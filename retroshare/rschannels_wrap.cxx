/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_CHANNEL_1MSG_1STATUS_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000f);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_CHANNEL_1MSG_1STATUS_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_CHANNEL_1MSG_1STATUS_1UNREAD_1BY_1USER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_CHANNEL_1MSG_1STATUS_1DOWLOADED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1ChannelInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ChannelInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ChannelInfo *)new ChannelInfo();
  *(ChannelInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->channelId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelName = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->channelName);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelDesc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelDesc = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelDesc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->channelDesc);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1channelFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->channelFlags);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pop = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->pop);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1autoDownload_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoDownload = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1autoDownload_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result = (bool) ((arg1)->autoDownload);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pngChanImage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->pngChanImage = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pngChanImage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result = (unsigned char *) ((arg1)->pngChanImage);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pngImageLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->pngImageLen = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1pngImageLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->pngImageLen);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1lastPost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->lastPost = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1lastPost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->lastPost);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1destination_1directory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->destination_directory = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelInfo_1destination_1directory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelInfo **)&jarg1; 
  result =  ((arg1)->destination_directory);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1ChannelInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ChannelInfo *arg1 = (ChannelInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ChannelInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1ChannelMsgThumbnail(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ChannelMsgThumbnail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ChannelMsgThumbnail *)new ChannelMsgThumbnail();
  *(ChannelMsgThumbnail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgThumbnail_1image_1thumbnail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgThumbnail *arg1 = (ChannelMsgThumbnail *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgThumbnail **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  if (arg1) (arg1)->image_thumbnail = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgThumbnail_1image_1thumbnail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgThumbnail *arg1 = (ChannelMsgThumbnail *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgThumbnail **)&jarg1; 
  result = (unsigned char *) ((arg1)->image_thumbnail);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgThumbnail_1im_1thumbnail_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ChannelMsgThumbnail *arg1 = (ChannelMsgThumbnail *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgThumbnail **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->im_thumbnail_size = arg2;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgThumbnail_1im_1thumbnail_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ChannelMsgThumbnail *arg1 = (ChannelMsgThumbnail *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgThumbnail **)&jarg1; 
  result = (int) ((arg1)->im_thumbnail_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1ChannelMsgThumbnail(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ChannelMsgThumbnail *arg1 = (ChannelMsgThumbnail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ChannelMsgThumbnail **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1ChannelMsgInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ChannelMsgInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ChannelMsgInfo *)new ChannelMsgInfo();
  *(ChannelMsgInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1channelId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1channelId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->channelId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msgId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->msgId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msgId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->msgId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msgflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msgflags = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msgflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result = (unsigned int) ((arg1)->msgflags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1subject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->subject = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1subject_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->subject);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->msg = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->msg);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ts = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->ts);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1files_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::list< FileInfo > arg2 ;
  std::list< FileInfo > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(std::list< FileInfo > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< FileInfo >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->files = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1files_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  std::list< FileInfo > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->files);
  *(std::list< FileInfo > **)&jresult = new std::list< FileInfo >((const std::list< FileInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->count);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result =  ((arg1)->size);
  *(uint64_t **)&jresult = new uint64_t((const uint64_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1thumbnail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  ChannelMsgThumbnail *arg2 = (ChannelMsgThumbnail *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  arg2 = *(ChannelMsgThumbnail **)&jarg2; 
  if (arg1) (arg1)->thumbnail = *arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgInfo_1thumbnail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  ChannelMsgThumbnail *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  result = (ChannelMsgThumbnail *)& ((arg1)->thumbnail);
  *(ChannelMsgThumbnail **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1ChannelMsgInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ChannelMsgInfo *arg1 = (ChannelMsgInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ChannelMsgInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1ChannelMsgSummary(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ChannelMsgSummary *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ChannelMsgSummary *)new ChannelMsgSummary();
  *(ChannelMsgSummary **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1channelId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->channelId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1channelId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->channelId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msgId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->msgId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msgId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->msgId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msgflags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->msgflags = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msgflags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->msgflags);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1subject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->subject = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1subject_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->subject);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->msg = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1msg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->msg);
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->count);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ts = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ChannelMsgSummary_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  result =  ((arg1)->ts);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1ChannelMsgSummary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ChannelMsgSummary *arg1 = (ChannelMsgSummary *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ChannelMsgSummary **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_rsChannels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsChannels *arg1 = (RsChannels *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  rsChannels = arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_rsChannels_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsChannels *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsChannels *)rsChannels;
  *(RsChannels **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsChannels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsChannels *arg1 = (RsChannels *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsChannels **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelsChanged(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1createChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::wstring arg2 ;
  std::wstring arg3 ;
  uint32_t arg4 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  uint32_t arg6 ;
  std::wstring *argp2 ;
  std::wstring *argp3 ;
  uint32_t *argp4 ;
  uint32_t *argp6 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  argp2 = *(std::wstring **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::wstring **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::wstring");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(unsigned char **)&jarg5; 
  argp6 = *(uint32_t **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg6 = *argp6; 
  result = (arg1)->createChannel(arg2,arg3,arg4,arg5,arg6);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getChannelInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  ChannelInfo *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(ChannelInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ChannelInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getChannelInfo((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getChannelList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::list< ChannelInfo > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::list< ChannelInfo > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ChannelInfo > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getChannelList(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getChannelMsgList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::list< ChannelMsgSummary > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::list< ChannelMsgSummary > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ChannelMsgSummary > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getChannelMsgList((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getChannelMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ChannelMsgInfo *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg4 = *(ChannelMsgInfo **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ChannelMsgInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getChannelMessage((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1setMessageStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t const *argp4 ;
  uint32_t const *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t const");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(uint32_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t const");
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->setMessageStatus((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getMessageStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg4 = *(uint32_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getMessageStatus((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getMessageCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  unsigned int *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(unsigned int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  arg4 = *(unsigned int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "unsigned int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getMessageCount((std::string const &)*arg2,*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1ChannelMessageSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  ChannelMsgInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(ChannelMsgInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ChannelMsgInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->ChannelMessageSend(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelSubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->channelSubscribe((std::string const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelExtraFileHash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  FileInfo *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg4 = *(FileInfo **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelExtraFileHash((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelExtraFileRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelExtraFileRemove((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelRestoreKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelRestoreKeys((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelShareKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::list< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelShareKeys((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelEditInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  ChannelInfo *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(ChannelInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ChannelInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelEditInfo((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1getPubKeysAvailableGrpIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return ;
  } 
  (arg1)->getPubKeysAvailableGrpIds(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelSetAutoDl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->channelSetAutoDl((std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelSetDestinationDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelSetDestinationDirectory((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsChannels_1channelGetAutoDl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsChannels *arg1 = (RsChannels *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsChannels **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->channelGetAutoDl((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

