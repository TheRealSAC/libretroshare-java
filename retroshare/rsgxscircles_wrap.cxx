/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_rsGxsCircles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  rsGxsCircles = arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_rsGxsCircles_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsGxsCircles *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsGxsCircles *)rsGxsCircles;
  *(RsGxsCircles **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1CIRCLE_1TYPE_1PUBLIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1CIRCLE_1TYPE_1EXTERNAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1CIRCLE_1TYPE_1YOUREYESONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1CIRCLE_1TYPE_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1CIRCLE_1TYPE_1EXT_1SELF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mCircleType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCircleType = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mCircleType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  result =  ((arg1)->mCircleType);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mCircleId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsGxsCircleId arg2 ;
  RsGxsCircleId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  argp2 = *(RsGxsCircleId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsGxsCircleId");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCircleId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mCircleId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsGxsCircleId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  result =  ((arg1)->mCircleId);
  *(RsGxsCircleId **)&jresult = new RsGxsCircleId((const RsGxsCircleId &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mOriginator_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsPeerId arg2 ;
  RsPeerId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  argp2 = *(RsPeerId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsPeerId");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mOriginator = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mOriginator_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsPeerId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  result =  ((arg1)->mOriginator);
  *(RsPeerId **)&jresult = new RsPeerId((const RsPeerId &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mInternalCircle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsCircleInternalId arg2 ;
  RsCircleInternalId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  argp2 = *(RsCircleInternalId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsCircleInternalId");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mInternalCircle = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_GxsPermissions_1mInternalCircle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  RsCircleInternalId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GxsPermissions **)&jarg1; 
  result =  ((arg1)->mInternalCircle);
  *(RsCircleInternalId **)&jresult = new RsCircleInternalId((const RsCircleInternalId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1GxsPermissions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GxsPermissions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GxsPermissions *)new GxsPermissions();
  *(GxsPermissions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1GxsPermissions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GxsPermissions *arg1 = (GxsPermissions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GxsPermissions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mMeta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  RsGroupMetaData arg2 ;
  RsGroupMetaData *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  argp2 = *(RsGroupMetaData **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsGroupMetaData");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mMeta = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mMeta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  RsGroupMetaData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  result =  ((arg1)->mMeta);
  *(RsGroupMetaData **)&jresult = new RsGroupMetaData((const RsGroupMetaData &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mLocalFriends_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsPgpId > arg2 ;
  std::list< RsPgpId > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  argp2 = *(std::list< RsPgpId > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< RsPgpId >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mLocalFriends = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mLocalFriends_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsPgpId > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  result =  ((arg1)->mLocalFriends);
  *(std::list< RsPgpId > **)&jresult = new std::list< RsPgpId >((const std::list< RsPgpId > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mInvitedMembers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsGxsId > arg2 ;
  std::list< RsGxsId > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  argp2 = *(std::list< RsGxsId > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< RsGxsId >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mInvitedMembers = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mInvitedMembers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsGxsId > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  result =  ((arg1)->mInvitedMembers);
  *(std::list< RsGxsId > **)&jresult = new std::list< RsGxsId >((const std::list< RsGxsId > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mSubCircles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsGxsCircleId > arg2 ;
  std::list< RsGxsCircleId > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  argp2 = *(std::list< RsGxsCircleId > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< RsGxsCircleId >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mSubCircles = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleGroup_1mSubCircles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  std::list< RsGxsCircleId > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  result =  ((arg1)->mSubCircles);
  *(std::list< RsGxsCircleId > **)&jresult = new std::list< RsGxsCircleId >((const std::list< RsGxsCircleId > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1RsGxsCircleGroup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsGxsCircleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsGxsCircleGroup *)new RsGxsCircleGroup();
  *(RsGxsCircleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsGxsCircleGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsGxsCircleGroup *arg1 = (RsGxsCircleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsGxsCircleGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleMsg_1mMeta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleMsg *arg1 = (RsGxsCircleMsg *) 0 ;
  RsMsgMetaData arg2 ;
  RsMsgMetaData *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleMsg **)&jarg1; 
  argp2 = *(RsMsgMetaData **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsMsgMetaData");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mMeta = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleMsg_1mMeta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleMsg *arg1 = (RsGxsCircleMsg *) 0 ;
  RsMsgMetaData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleMsg **)&jarg1; 
  result =  ((arg1)->mMeta);
  *(RsMsgMetaData **)&jresult = new RsMsgMetaData((const RsMsgMetaData &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleMsg_1stuff_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleMsg *arg1 = (RsGxsCircleMsg *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleMsg **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->stuff = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleMsg_1stuff_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleMsg *arg1 = (RsGxsCircleMsg *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleMsg **)&jarg1; 
  result =  ((arg1)->stuff);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1RsGxsCircleMsg(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsGxsCircleMsg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsGxsCircleMsg *)new RsGxsCircleMsg();
  *(RsGxsCircleMsg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsGxsCircleMsg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsGxsCircleMsg *arg1 = (RsGxsCircleMsg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsGxsCircleMsg **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  RsGxsCircleId arg2 ;
  RsGxsCircleId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  argp2 = *(RsGxsCircleId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RsGxsCircleId");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCircleId = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  RsGxsCircleId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result =  ((arg1)->mCircleId);
  *(RsGxsCircleId **)&jresult = new RsGxsCircleId((const RsGxsCircleId &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCircleName = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result =  ((arg1)->mCircleName);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCircleType = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mCircleType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result =  ((arg1)->mCircleType);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mIsExternal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mIsExternal = arg2;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mIsExternal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result = (bool) ((arg1)->mIsExternal);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mUnknownPeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::set< RsGxsId > arg2 ;
  std::set< RsGxsId > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  argp2 = *(std::set< RsGxsId > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< RsGxsId >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mUnknownPeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mUnknownPeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::set< RsGxsId > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result =  ((arg1)->mUnknownPeers);
  *(std::set< RsGxsId > **)&jresult = new std::set< RsGxsId >((const std::set< RsGxsId > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mAllowedPeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::map< RsPgpId,std::list< RsGxsId > > arg2 ;
  std::map< RsPgpId,std::list< RsGxsId > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  argp2 = *(std::map< RsPgpId,std::list< RsGxsId > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< RsPgpId,std::list< RsGxsId > >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mAllowedPeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircleDetails_1mAllowedPeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  std::map< RsPgpId,std::list< RsGxsId > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  result =  ((arg1)->mAllowedPeers);
  *(std::map< RsPgpId,std::list< RsGxsId > > **)&jresult = new std::map< RsPgpId,std::list< RsGxsId > >((const std::map< RsPgpId,std::list< RsGxsId > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1RsGxsCircleDetails(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsGxsCircleDetails *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsGxsCircleDetails *)new RsGxsCircleDetails();
  *(RsGxsCircleDetails **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsGxsCircleDetails(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsGxsCircleDetails *arg1 = (RsGxsCircleDetails *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsGxsCircleDetails **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsGxsCircles(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsGxsCircles **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircles_1getCircleDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  RsGxsCircleId *arg2 = 0 ;
  RsGxsCircleDetails *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  arg2 = *(RsGxsCircleId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsGxsCircleId const & reference is null");
    return 0;
  } 
  arg3 = *(RsGxsCircleDetails **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsGxsCircleDetails & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getCircleDetails((RsGxsCircleId const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircles_1getCircleExternalIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  std::list< RsGxsCircleId > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  arg2 = *(std::list< RsGxsCircleId > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsGxsCircleId > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getCircleExternalIdList(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircles_1getCirclePersonalIdList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  std::list< RsGxsCircleId > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  arg2 = *(std::list< RsGxsCircleId > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsGxsCircleId > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getCirclePersonalIdList(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircles_1getGroupData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  uint32_t *arg2 = 0 ;
  std::vector< RsGxsCircleGroup > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< RsGxsCircleGroup > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RsGxsCircleGroup > & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getGroupData((uint32_t const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGxsCircles_1createGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RsGxsCircles *arg1 = (RsGxsCircles *) 0 ;
  uint32_t *arg2 = 0 ;
  RsGxsCircleGroup *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RsGxsCircles **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  arg3 = *(RsGxsCircleGroup **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsGxsCircleGroup & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->createGroup(*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

