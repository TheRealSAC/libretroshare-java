/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1GROUP_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00010000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1GROUP_1META_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00020000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1GROUP_1IDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00040000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00080000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1META_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00100000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1IDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00200000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1RELATED_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00400000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1RELATED_1META_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00800000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GXS_1REQUEST_1TYPE_1MSG_1RELATED_1IDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x01000000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1VERSIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1ORIGMSG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1LATEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1THREAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0010);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1PARENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1MSG_1AUTHOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0040);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1READ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQOPT_1UNREAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQ_1ANSTYPE_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQ_1ANSTYPE_1SUMMARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQ_1ANSTYPE_1DATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1TOKREQ_1ANSTYPE_1ACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1RsTokReqOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsTokReqOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsTokReqOptions *)new RsTokReqOptions();
  *(RsTokReqOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mOptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mOptions = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mOptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mOptions);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mStatusFilter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mStatusFilter = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mStatusFilter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mStatusFilter);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mStatusMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mStatusMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mStatusMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mStatusMask);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mMsgFlagMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mMsgFlagMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mMsgFlagMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mMsgFlagMask);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mMsgFlagFilter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mMsgFlagFilter = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mMsgFlagFilter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mMsgFlagFilter);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mReqType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mReqType = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mReqType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mReqType);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mSubscribeFilter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mSubscribeFilter = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mSubscribeFilter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mSubscribeFilter);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mSubscribeMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mSubscribeMask = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mSubscribeMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mSubscribeMask);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mBefore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mBefore = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mBefore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mBefore);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mAfter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mAfter = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokReqOptions_1mAfter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  result =  ((arg1)->mAfter);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsTokReqOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsTokReqOptions *arg1 = (RsTokReqOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsTokReqOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_FAILED;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1PENDING_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_PENDING;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1PARTIAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_PARTIAL;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1FINISHED_1INCOMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_FINISHED_INCOMPLETE;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1COMPLETE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_COMPLETE;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1GXS_1REQUEST_1V2_1STATUS_1DONE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)RsTokenService::GXS_REQUEST_V2_STATUS_DONE;
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsTokenService(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsTokenService **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestGroupInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t arg3 ;
  RsTokReqOptions *arg4 = 0 ;
  std::list< RsGxsGroupId > *arg5 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(RsTokReqOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsTokReqOptions const & reference is null");
    return 0;
  } 
  arg5 = *(std::list< RsGxsGroupId > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsGxsGroupId > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestGroupInfo(*arg2,arg3,(RsTokReqOptions const &)*arg4,(std::list< RsGxsGroupId > const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestGroupInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t arg3 ;
  RsTokReqOptions *arg4 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(RsTokReqOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsTokReqOptions const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestGroupInfo(*arg2,arg3,(RsTokReqOptions const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestMsgInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t arg3 ;
  RsTokReqOptions *arg4 = 0 ;
  GxsMsgReq *arg5 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(RsTokReqOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsTokReqOptions const & reference is null");
    return 0;
  } 
  arg5 = *(GxsMsgReq **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GxsMsgReq const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestMsgInfo(*arg2,arg3,(RsTokReqOptions const &)*arg4,(GxsMsgReq const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestMsgInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t arg3 ;
  RsTokReqOptions *arg4 = 0 ;
  std::list< RsGxsGroupId > *arg5 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(RsTokReqOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsTokReqOptions const & reference is null");
    return 0;
  } 
  arg5 = *(std::list< RsGxsGroupId > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsGxsGroupId > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestMsgInfo(*arg2,arg3,(RsTokReqOptions const &)*arg4,(std::list< RsGxsGroupId > const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestMsgRelatedInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t arg3 ;
  RsTokReqOptions *arg4 = 0 ;
  std::vector< RsGxsGrpMsgIdPair > *arg5 = 0 ;
  uint32_t *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(RsTokReqOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsTokReqOptions const & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< RsGxsGrpMsgIdPair > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RsGxsGrpMsgIdPair > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->requestMsgRelatedInfo(*arg2,arg3,(RsTokReqOptions const &)*arg4,(std::vector< RsGxsGrpMsgIdPair > const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t arg2 ;
  uint32_t const *argp2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokenService **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t const");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->requestStatus(arg2);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestServiceStatistic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & reference is null");
    return ;
  } 
  (arg1)->requestServiceStatistic((uint32_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1requestGroupStatistic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  RsGxsGroupId *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & reference is null");
    return ;
  } 
  arg3 = *(RsGxsGroupId **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsGxsGroupId const & reference is null");
    return ;
  } 
  (arg1)->requestGroupStatistic((uint32_t const &)*arg2,(RsGxsGroupId const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTokenService_1cancelRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsTokenService *arg1 = (RsTokenService *) 0 ;
  uint32_t *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsTokenService **)&jarg1; 
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->cancelRequest((uint32_t const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

