/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_AndOp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LogicalOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (LogicalOperator)AndOp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_OrOp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LogicalOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (LogicalOperator)OrOp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_XorOp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LogicalOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (LogicalOperator)XorOp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_ContainsAnyStrings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StringOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (StringOperator)ContainsAnyStrings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_ContainsAllStrings_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StringOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (StringOperator)ContainsAllStrings;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_EqualsString_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  StringOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (StringOperator)EqualsString;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_Equals_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)Equals;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_GreaterEquals_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)GreaterEquals;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_Greater_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)Greater;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_SmallerEquals_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)SmallerEquals;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_Smaller_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)Smaller;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_InRange_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RelOperator result;
  
  (void)jenv;
  (void)jcls;
  result = (RelOperator)InRange;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1tokens_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< uint8_t > arg2 ;
  std::vector< uint8_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  argp2 = *(std::vector< uint8_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint8_t >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_tokens = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1tokens_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  result =  ((arg1)->_tokens);
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1ints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< uint32_t > arg2 ;
  std::vector< uint32_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  argp2 = *(std::vector< uint32_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint32_t >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_ints = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1ints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< uint32_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  result =  ((arg1)->_ints);
  *(std::vector< uint32_t > **)&jresult = new std::vector< uint32_t >((const std::vector< uint32_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1strings_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_strings = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1_1strings_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1; 
  result =  ((arg1)->_strings);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1DATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_DATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1POP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_POP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1HASH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_HASH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_NAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1PATH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_PATH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1EXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_EXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1COMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_COMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1EXPR_1SIZE_1MB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  LinearizedExpression::token result;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression::token)LinearizedExpression::EXPR_SIZE_MB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_LinearizedExpression_1toExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinearizedExpression *arg1 = 0 ;
  Expression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression const & reference is null");
    return 0;
  } 
  result = (Expression *)LinearizedExpression::toExpr((LinearizedExpression const &)*arg1);
  *(Expression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1LinearizedExpression(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  LinearizedExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (LinearizedExpression *)new LinearizedExpression();
  *(LinearizedExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1LinearizedExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  LinearizedExpression *arg1 = (LinearizedExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(LinearizedExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_Expression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Expression *arg1 = (Expression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Expression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1Expression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Expression *arg1 = (Expression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Expression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_Expression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Expression *arg1 = (Expression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Expression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((Expression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1CompoundExpression(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  enum LogicalOperator arg1 ;
  Expression *arg2 = (Expression *) 0 ;
  Expression *arg3 = (Expression *) 0 ;
  CompoundExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (enum LogicalOperator)jarg1; 
  arg2 = *(Expression **)&jarg2; 
  arg3 = *(Expression **)&jarg3; 
  result = (CompoundExpression *)new CompoundExpression(arg1,arg2,arg3);
  *(CompoundExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_CompoundExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  CompoundExpression *arg1 = (CompoundExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CompoundExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1CompoundExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CompoundExpression *arg1 = (CompoundExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CompoundExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_CompoundExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CompoundExpression *arg1 = (CompoundExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CompoundExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((CompoundExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_StringExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StringExpression *arg1 = (StringExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StringExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((StringExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1StringExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StringExpression *arg1 = (StringExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StringExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1CompareCharIC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CompareCharIC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CompareCharIC *)new CompareCharIC();
  *(CompareCharIC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1CompareCharIC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CompareCharIC *arg1 = (CompareCharIC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CompareCharIC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1NameExpression(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  enum StringOperator arg1 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  NameExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum StringOperator)jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (NameExpression *)new NameExpression(arg1,*arg2,arg3);
  *(NameExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_NameExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  NameExpression *arg1 = (NameExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NameExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NameExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NameExpression *arg1 = (NameExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NameExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((NameExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1NameExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NameExpression *arg1 = (NameExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NameExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1PathExpression(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  enum StringOperator arg1 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  PathExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum StringOperator)jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (PathExpression *)new PathExpression(arg1,*arg2,arg3);
  *(PathExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_PathExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  PathExpression *arg1 = (PathExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PathExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_PathExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PathExpression *arg1 = (PathExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PathExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((PathExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1PathExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PathExpression *arg1 = (PathExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PathExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1ExtExpression(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  enum StringOperator arg1 ;
  std::list< std::string > *arg2 = 0 ;
  bool arg3 ;
  ExtExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum StringOperator)jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (ExtExpression *)new ExtExpression(arg1,*arg2,arg3);
  *(ExtExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_ExtExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ExtExpression *arg1 = (ExtExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ExtExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_ExtExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ExtExpression *arg1 = (ExtExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ExtExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((ExtExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1ExtExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ExtExpression *arg1 = (ExtExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ExtExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1HashExpression(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  enum StringOperator arg1 ;
  std::list< std::string > *arg2 = 0 ;
  HashExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum StringOperator)jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  result = (HashExpression *)new HashExpression(arg1,*arg2);
  *(HashExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_HashExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  HashExpression *arg1 = (HashExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HashExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_HashExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HashExpression *arg1 = (HashExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HashExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((HashExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1HashExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HashExpression *arg1 = (HashExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HashExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1DateExpression_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  DateExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  result = (DateExpression *)new DateExpression(arg1,arg2);
  *(DateExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1DateExpression_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  int arg3 ;
  DateExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (DateExpression *)new DateExpression(arg1,arg2,arg3);
  *(DateExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_DateExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  DateExpression *arg1 = (DateExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_DateExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DateExpression *arg1 = (DateExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DateExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((DateExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1DateExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DateExpression *arg1 = (DateExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DateExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1SizeExpression_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  SizeExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  result = (SizeExpression *)new SizeExpression(arg1,arg2);
  *(SizeExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1SizeExpression_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  int arg3 ;
  SizeExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (SizeExpression *)new SizeExpression(arg1,arg2,arg3);
  *(SizeExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_SizeExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SizeExpression *arg1 = (SizeExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SizeExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_SizeExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SizeExpression *arg1 = (SizeExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SizeExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((SizeExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1SizeExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SizeExpression *arg1 = (SizeExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SizeExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1SizeExpressionMB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  SizeExpressionMB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  result = (SizeExpressionMB *)new SizeExpressionMB(arg1,arg2);
  *(SizeExpressionMB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1SizeExpressionMB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  int arg3 ;
  SizeExpressionMB *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (SizeExpressionMB *)new SizeExpressionMB(arg1,arg2,arg3);
  *(SizeExpressionMB **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_SizeExpressionMB_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  SizeExpressionMB *arg1 = (SizeExpressionMB *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SizeExpressionMB **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_SizeExpressionMB_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  SizeExpressionMB *arg1 = (SizeExpressionMB *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(SizeExpressionMB **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((SizeExpressionMB const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1SizeExpressionMB(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SizeExpressionMB *arg1 = (SizeExpressionMB *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SizeExpressionMB **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1PopExpression_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  PopExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  result = (PopExpression *)new PopExpression(arg1,arg2);
  *(PopExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1PopExpression_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  enum RelOperator arg1 ;
  int arg2 ;
  int arg3 ;
  PopExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum RelOperator)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (PopExpression *)new PopExpression(arg1,arg2,arg3);
  *(PopExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1PopExpression_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  LinearizedExpression *arg1 = 0 ;
  PopExpression *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(LinearizedExpression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression const & reference is null");
    return 0;
  } 
  result = (PopExpression *)new PopExpression((LinearizedExpression const &)*arg1);
  *(PopExpression **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_PopExpression_1eval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  PopExpression *arg1 = (PopExpression *) 0 ;
  FileEntry *arg2 = (FileEntry *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PopExpression **)&jarg1; 
  arg2 = *(FileEntry **)&jarg2; 
  result = (bool)(arg1)->eval(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_PopExpression_1linearize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PopExpression *arg1 = (PopExpression *) 0 ;
  LinearizedExpression *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PopExpression **)&jarg1; 
  arg2 = *(LinearizedExpression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "LinearizedExpression & reference is null");
    return ;
  } 
  ((PopExpression const *)arg1)->linearize(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1PopExpression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PopExpression *arg1 = (PopExpression *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PopExpression **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_CompoundExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Expression **)&baseptr = *(CompoundExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_StringExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Expression **)&baseptr = *(StringExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_NameExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(StringExpression **)&baseptr = *(NameExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_PathExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(StringExpression **)&baseptr = *(PathExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_ExtExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(StringExpression **)&baseptr = *(ExtExpression **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_HashExpression_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(StringExpression **)&baseptr = *(HashExpression **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

