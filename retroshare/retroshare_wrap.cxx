/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_retroshareJNI_rsDht_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsDht *arg1 = (RsDht *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  rsDht = arg1;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_rsDht_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsDht *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsDht *)rsDht;
  *(RsDht **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1NETSTART_1NETWORKMODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1NETSTART_1NATTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1NETSTART_1NATHOLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1NETSTART_1CONNECTMODES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1NETSTART_1NETSTATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERTYPE_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERTYPE_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERTYPE_1FOF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERTYPE_1FRIEND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1NOT_1ACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1SEARCHING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1FAILURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1OFFLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1UNREACHABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERDHT_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERCONN_1DISCONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERCONN_1UDP_1STARTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERCONN_1CONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERREQ_1STOPPED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1PEERREQ_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1TOU_1MODE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1TOU_1MODE_1DIRECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1TOU_1MODE_1PROXY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1TOU_1MODE_1RELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1NUM_1CLASS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1CLASS_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1CLASS_1GENERAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1CLASS_1FOF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1CLASS_1FRIENDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1MODE_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x00f0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1MODE_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0010);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1MODE_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0020);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RSDHT_1RELAY_1MODE_1SERVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0040);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_new_1RsDhtPeer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsDhtPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsDhtPeer *)new RsDhtPeer();
  *(RsDhtPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mBucket_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mBucket = arg2;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDhtPeer_1mBucket_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result = (int) ((arg1)->mBucket);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mDhtId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mDhtId = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mDhtId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mDhtId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mLastSendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mLastSendTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mLastSendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mLastSendTime);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mLastRecvTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mLastRecvTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mLastRecvTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mLastRecvTime);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mFoundTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mFoundTime = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mFoundTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mFoundTime);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mPeerFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mPeerFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mPeerFlags);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtPeer_1mExtraFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mExtraFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtPeer_1mExtraFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtPeer **)&jarg1; 
  result =  ((arg1)->mExtraFlags);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_delete_1RsDhtPeer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsDhtPeer *arg1 = (RsDhtPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsDhtPeer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_new_1RsDhtNetPeer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsDhtNetPeer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsDhtNetPeer *)new RsDhtNetPeer();
  *(RsDhtNetPeer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mDhtId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mDhtId = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mDhtId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mDhtId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mRsId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mRsId = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mRsId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mRsId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerType = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mPeerType);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mDhtState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mDhtState = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mDhtState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mDhtState);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mConnectState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mConnectState = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mConnectState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mConnectState);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerConnectState = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mPeerConnectState);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerConnectMode = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mPeerConnectMode);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mExclusiveProxyLock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mExclusiveProxyLock = arg2;
}


SWIGEXPORT jboolean JNICALL Java_retroshareJNI_RsDhtNetPeer_1mExclusiveProxyLock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result = (bool) ((arg1)->mExclusiveProxyLock);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectProxyId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerConnectProxyId = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerConnectProxyId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mPeerConnectProxyId);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerReqState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mPeerReqState = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mPeerReqState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mPeerReqState);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtNetPeer_1mCbPeerMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCbPeerMsg = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtNetPeer_1mCbPeerMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  result =  ((arg1)->mCbPeerMsg);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_delete_1RsDhtNetPeer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsDhtNetPeer *arg1 = (RsDhtNetPeer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsDhtNetPeer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_new_1RsDhtRelayEnd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsDhtRelayEnd *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsDhtRelayEnd *)new RsDhtRelayEnd();
  *(RsDhtRelayEnd **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mLocalAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mLocalAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mLocalAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  result =  ((arg1)->mLocalAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mProxyAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mProxyAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mProxyAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  result =  ((arg1)->mProxyAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mRemoteAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mRemoteAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mRemoteAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  result =  ((arg1)->mRemoteAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mCreateTS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCreateTS = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayEnd_1mCreateTS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  result =  ((arg1)->mCreateTS);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_delete_1RsDhtRelayEnd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsDhtRelayEnd *arg1 = (RsDhtRelayEnd *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsDhtRelayEnd **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_new_1RsDhtRelayProxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsDhtRelayProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsDhtRelayProxy *)new RsDhtRelayProxy();
  *(RsDhtRelayProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mSrcAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mSrcAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mSrcAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result =  ((arg1)->mSrcAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mDestAddr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mDestAddr = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mDestAddr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result =  ((arg1)->mDestAddr);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mBandwidth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mBandwidth = arg2;
}


SWIGEXPORT jdouble JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mBandwidth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result = (double) ((arg1)->mBandwidth);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mRelayClass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mRelayClass = arg2;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mRelayClass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result = (int) ((arg1)->mRelayClass);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mLastTS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mLastTS = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mLastTS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result =  ((arg1)->mLastTS);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mCreateTS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCreateTS = arg2;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDhtRelayProxy_1mCreateTS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  result =  ((arg1)->mCreateTS);
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_delete_1RsDhtRelayProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsDhtRelayProxy *arg1 = (RsDhtRelayProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsDhtRelayProxy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_delete_1RsDht(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsDht *arg1 = (RsDht *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsDht **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDht_1getNetState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->getNetState(arg2);
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getDhtPeers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  int arg2 ;
  std::list< RsDhtPeer > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::list< RsDhtPeer > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsDhtPeer > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDhtPeers(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getNetPeerList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getNetPeerList(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getNetPeerStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::string arg2 ;
  RsDhtNetPeer *arg3 = 0 ;
  std::string *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RsDht **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(RsDhtNetPeer **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsDhtNetPeer & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getNetPeerStatus(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getRelayEnds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::list< RsDhtRelayEnd > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(std::list< RsDhtRelayEnd > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsDhtRelayEnd > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getRelayEnds(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getRelayProxies(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::list< RsDhtRelayProxy > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(std::list< RsDhtRelayProxy > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< RsDhtRelayProxy > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getRelayProxies(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDht_1getUdpAddressString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  result = (arg1)->getUdpAddressString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDht_1getDhtRates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  RsDht *arg1 = (RsDht *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(float **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg3 = *(float **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->getDhtRates(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_retroshareJNI_RsDht_1getRelayRates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  RsDht *arg1 = (RsDht *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(float **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg3 = *(float **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  arg4 = *(float **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "float & reference is null");
    return ;
  } 
  (arg1)->getRelayRates(*arg2,*arg3,*arg4);
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getRelayServerList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(std::list< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< std::string > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getRelayServerList(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1addRelayServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->addRelayServer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1removeRelayServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->removeRelayServer(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_retroshareJNI_RsDht_1getRelayMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  result = (arg1)->getRelayMode();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1setRelayMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->setRelayMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1getRelayAllowance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  int arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(uint32_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  arg4 = *(uint32_t **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getRelayAllowance(arg2,*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_retroshareJNI_RsDht_1setRelayAllowance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *argp3 ;
  uint32_t *argp4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg4 = *argp4; 
  result = (int)(arg1)->setRelayAllowance(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_retroshareJNI_RsDht_1getOwnDhtId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RsDht *arg1 = (RsDht *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsDht **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getOwnDhtId(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

