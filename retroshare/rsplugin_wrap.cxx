/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_rsPlugins_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  rsPlugins = arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_rsPlugins_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsPluginHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsPluginHandler *)rsPlugins;
  *(RsPluginHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RS_1PLUGIN_1API_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x000101);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1NO_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1REJECTED_1HASH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0001);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1DLOPEN_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0002);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1MISSING_1SYMBOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1NULL_1PLUGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1LOADED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0005);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1WRONG_1API_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0006);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1MISSING_1API_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0007);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_PLUGIN_1STATUS_1MISSING_1SVN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0008);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1RsPlugInInterfaces(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsPlugInInterfaces *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsPlugInInterfaces *)new RsPlugInInterfaces();
  *(RsPlugInInterfaces **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugInInterfaces_1mPeers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPlugInInterfaces *arg1 = (RsPlugInInterfaces *) 0 ;
  RsPeers *arg2 = (RsPeers *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugInInterfaces **)&jarg1; 
  arg2 = *(RsPeers **)&jarg2; 
  if (arg1) (arg1)->mPeers = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugInInterfaces_1mPeers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugInInterfaces *arg1 = (RsPlugInInterfaces *) 0 ;
  RsPeers *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugInInterfaces **)&jarg1; 
  result = (RsPeers *) ((arg1)->mPeers);
  *(RsPeers **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugInInterfaces_1mFiles_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPlugInInterfaces *arg1 = (RsPlugInInterfaces *) 0 ;
  RsFiles *arg2 = (RsFiles *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugInInterfaces **)&jarg1; 
  arg2 = *(RsFiles **)&jarg2; 
  if (arg1) (arg1)->mFiles = arg2;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugInInterfaces_1mFiles_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugInInterfaces *arg1 = (RsPlugInInterfaces *) 0 ;
  RsFiles *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugInInterfaces **)&jarg1; 
  result = (RsFiles *) ((arg1)->mFiles);
  *(RsFiles **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsPlugInInterfaces(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsPlugInInterfaces *arg1 = (RsPlugInInterfaces *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsPlugInInterfaces **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1rs_1cache_1service(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  RsCacheService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (RsCacheService *)((RsPlugin const *)arg1)->rs_cache_service();
  *(RsCacheService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1rs_1pqi_1service(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  RsPQIService *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (RsPQIService *)((RsPlugin const *)arg1)->rs_pqi_service();
  *(RsPQIService **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1rs_1service_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->rs_service_id();
  *(uint16_t **)&jresult = new uint16_t((const uint16_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1configurationFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->configurationFileName();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1page(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  MainPage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (MainPage *)((RsPlugin const *)arg1)->qt_page();
  *(MainPage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1icon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  QIcon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (QIcon *)((RsPlugin const *)arg1)->qt_icon();
  *(QIcon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1config_1panel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  QWidget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (QWidget *)((RsPlugin const *)arg1)->qt_config_panel();
  *(QWidget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1about_1page(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  QDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (QDialog *)((RsPlugin const *)arg1)->qt_about_page();
  *(QDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1config_1page(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  ConfigPage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (ConfigPage *)((RsPlugin const *)arg1)->qt_config_page();
  *(ConfigPage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1transfers_1tab(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  RsAutoUpdatePage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (RsAutoUpdatePage *)((RsPlugin const *)arg1)->qt_transfers_tab();
  *(RsAutoUpdatePage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1transfers_1tab_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->qt_transfers_tab_name();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1sound_1events(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  SoundEvents *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  arg2 = *(SoundEvents **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SoundEvents & reference is null");
    return ;
  } 
  ((RsPlugin const *)arg1)->qt_sound_events(*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1allocate_1new_1popup_1chat_1dialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  PopupChatDialog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (PopupChatDialog *)((RsPlugin const *)arg1)->qt_allocate_new_popup_chat_dialog();
  *(PopupChatDialog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1translator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  QApplication *arg2 = (QApplication *) 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QTranslator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  arg2 = *(QApplication **)&jarg2; 
  arg3 = *(QString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QString const & reference is null");
    return 0;
  } 
  arg4 = *(QString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QString const & reference is null");
    return 0;
  } 
  result = (QTranslator *)((RsPlugin const *)arg1)->qt_translator(arg2,(QString const &)*arg3,(QString const &)*arg4);
  *(QTranslator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1qt_1feedNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  FeedNotify *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = (FeedNotify *)(arg1)->qt_feedNotify();
  *(FeedNotify **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1getSvnRevision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->getSvnRevision();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1getShortPluginDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->getShortPluginDescription();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1getPluginName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  result = ((RsPlugin const *)arg1)->getPluginName();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1getPluginVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPlugin **)&jarg1; 
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg3 = *(int **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return ;
  } 
  ((RsPlugin const *)arg1)->getPluginVersion(*arg2,*arg3,*arg4);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1setInterfaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  RsPlugInInterfaces *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RsPlugin **)&jarg1; 
  arg2 = *(RsPlugInInterfaces **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsPlugInInterfaces & reference is null");
    return ;
  } 
  (arg1)->setInterfaces(*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPlugin_1setPlugInHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  RsPluginHandler *arg2 = (RsPluginHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RsPlugin **)&jarg1; 
  arg2 = *(RsPluginHandler **)&jarg2; 
  (arg1)->setPlugInHandler(arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsPlugin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsPlugin *arg1 = (RsPlugin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsPlugin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1nbPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (int)((RsPluginHandler const *)arg1)->nbPlugins();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1plugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  int arg2 ;
  RsPlugin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (RsPlugin *)(arg1)->plugin(arg2);
  *(RsPlugin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getPluginDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (std::vector< std::string > *) &((RsPluginHandler const *)arg1)->getPluginDirectories();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getPluginStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  int arg2 ;
  uint32_t *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  std::string *arg7 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(uint32_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg5 = *(std::string **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg6 = *(uint32_t **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t & reference is null");
    return ;
  } 
  arg7 = *(std::string **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  ((RsPluginHandler const *)arg1)->getPluginStatus(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1enablePlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->enablePlugin((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1disablePlugin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->disablePlugin((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1allowAllPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->allowAllPlugins(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getAllowAllPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (bool)((RsPluginHandler const *)arg1)->getAllowAllPlugins();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1slowTickPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->slowTickPlugins(arg2);
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getLocalCacheDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (std::string *) &((RsPluginHandler const *)arg1)->getLocalCacheDir();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getRemoteCacheDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (std::string *) &((RsPluginHandler const *)arg1)->getRemoteCacheDir();
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getFileServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  ftServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (ftServer *)((RsPluginHandler const *)arg1)->getFileServer();
  *(ftServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsPluginHandler_1getLinkMgr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  p3LinkMgr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsPluginHandler **)&jarg1; 
  result = (p3LinkMgr *)((RsPluginHandler const *)arg1)->getLinkMgr();
  *(p3LinkMgr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsPluginHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsPluginHandler *arg1 = (RsPluginHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsPluginHandler **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

