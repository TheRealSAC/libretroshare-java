/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_rsicontrol_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsControl *arg1 = (RsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  rsicontrol = arg1;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_rsicontrol_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsControl *)rsicontrol;
  *(RsControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_InitRsConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RsInit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RsInit *)InitRsConfig();
  *(RsInit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_net_retroshare_RetroshareJNI_RsConfigDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  result = (char *)RsConfigDirectory(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsConfigStartMinimised(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  result = (bool)RsConfigStartMinimised(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_CleanupRsConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsInit *arg1 = (RsInit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  CleanupRsConfig(arg1);
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_InitRetroShare(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  RsInit *arg3 = (RsInit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(char ***)&jarg2; 
  arg3 = *(RsInit **)&jarg3; 
  result = (int)InitRetroShare(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_ValidateCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)ValidateCertificate(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_ValidateTrustedUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  std::string arg2 ;
  std::string *arg3 = 0 ;
  std::string *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)ValidateTrustedUser(arg1,arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_LoadPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)LoadPassword(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsGenerateCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  std::string *arg7 = 0 ;
  std::string *argp2 ;
  std::string *argp3 ;
  std::string *argp4 ;
  std::string *argp5 ;
  std::string *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::string **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::string **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(std::string **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::string **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = *(std::string **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)RsGenerateCertificate(arg1,arg2,arg3,arg4,arg5,arg6,*arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsTryAutoLogin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  result = (bool)RsTryAutoLogin(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsStoreAutoLogin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  result = (bool)RsStoreAutoLogin(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsClearAutoLogin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  std::string *argp1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)RsClearAutoLogin(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_LoadCertificates(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jint jresult = 0 ;
  RsInit *arg1 = (RsInit *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsInit **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)LoadCertificates(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_createRsControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NotifyBase *arg1 = 0 ;
  RsControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NotifyBase & reference is null");
    return 0;
  } 
  result = (RsControl *)createRsControl(*arg1);
  *(RsControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1RsControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RsControl *arg1 = (RsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RsControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1StartupRetroShare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  result = (int)(arg1)->StartupRetroShare();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1SetInBroadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->SetInBroadcast(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1SetInSubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::string *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->SetInSubscribe(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1ClearInBroadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  result = (int)(arg1)->ClearInBroadcast();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1ClearInSubscribe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  result = (int)(arg1)->ClearInSubscribe();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1ConfigSetBootPrompt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->ConfigSetBootPrompt(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1ConfigFinalSave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsControl *arg1 = (RsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  (arg1)->ConfigFinalSave();
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1rsGlobalShutDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RsControl *arg1 = (RsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  (arg1)->rsGlobalShutDown();
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1getNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  NotifyBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  result = (NotifyBase *) &(arg1)->getNotify();
  *(NotifyBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_RsControl_1getPeerCryptoDetails(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  RsControl *arg1 = (RsControl *) 0 ;
  std::string *arg2 = 0 ;
  RsPeerCryptoParams *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RsControl **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(RsPeerCryptoParams **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RsPeerCryptoParams & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->getPeerCryptoDetails((std::string const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_new_1NotifyBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  NotifyBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (NotifyBase *)new NotifyBase();
  *(NotifyBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_delete_1NotifyBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NotifyBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyListPreChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->notifyListPreChange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyListChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->notifyListChange(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyErrorMsg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string arg4 ;
  std::string *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(std::string **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->notifyErrorMsg(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyChatStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->notifyChatStatus((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyChatLobbyEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  uint64_t *argp2 ;
  uint32_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint64_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint64_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(std::string **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg5 = *(std::string **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->notifyChatLobbyEvent(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyChatLobbyTimeShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->notifyChatLobbyTimeShift(arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyCustomState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->notifyCustomState((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyHashingInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->notifyHashingInfo(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyTurtleSearchResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint32_t arg2 ;
  std::list< TurtleFileInfo > *arg3 = 0 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(std::list< TurtleFileInfo > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< TurtleFileInfo > const & reference is null");
    return ;
  } 
  (arg1)->notifyTurtleSearchResult(arg2,(std::list< TurtleFileInfo > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyPeerHasNewAvatar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(std::string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::string");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->notifyPeerHasNewAvatar(arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyOwnAvatarChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  (arg1)->notifyOwnAvatarChanged();
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyOwnStatusMessageChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  (arg1)->notifyOwnStatusMessageChanged();
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyDiskFull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *argp2 ;
  uint32_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->notifyDiskFull(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyPeerStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->notifyPeerStatusChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyPeerStatusChangedSummary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  (arg1)->notifyPeerStatusChangedSummary();
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyForumMsgReadSatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->notifyForumMsgReadSatusChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyChannelMsgReadSatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  uint32_t *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  argp4 = *(uint32_t **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->notifyChannelMsgReadSatusChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyDiscInfoChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  (arg1)->notifyDiscInfoChanged();
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyDownloadComplete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->notifyDownloadComplete((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyDownloadCompleteCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->notifyDownloadCompleteCount(arg2);
}


SWIGEXPORT void JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1notifyHistoryChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  uint32_t arg2 ;
  int arg3 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->notifyHistoryChanged(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1askForPassword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(std::string **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPassword((std::string const &)*arg2,arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1askForPluginConfirmation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForPluginConfirmation((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_retroshare_RetroshareJNI_NotifyBase_1askForDeferredSelfSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  NotifyBase *arg1 = (NotifyBase *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  unsigned int *arg5 = (unsigned int *) 0 ;
  int *arg6 = 0 ;
  uint32_t const *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NotifyBase **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  argp3 = *(uint32_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t const");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(unsigned char **)&jarg4; 
  arg5 = *(unsigned int **)&jarg5; 
  arg6 = *(int **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->askForDeferredSelfSignature((void const *)arg2,arg3,arg4,arg5,*arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1NEIGHBOURS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_NEIGHBOURS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1FRIENDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_FRIENDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1SEARCHLIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_SEARCHLIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1MESSAGELIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_MESSAGELIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1CHANNELLIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_CHANNELLIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1TRANSFERLIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_TRANSFERLIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1CONFIG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_CONFIG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1DIRLIST_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_DIRLIST_LOCAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1DIRLIST_1FRIENDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_DIRLIST_FRIENDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1FORUMLIST_1LOCKED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_FORUMLIST_LOCKED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1MESSAGE_1TAGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_MESSAGE_TAGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1PUBLIC_1CHAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_PUBLIC_CHAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1PRIVATE_1INCOMING_1CHAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_PRIVATE_INCOMING_CHAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1PRIVATE_1OUTGOING_1CHAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_PRIVATE_OUTGOING_CHAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1GROUPLIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_GROUPLIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1CHANNELLIST_1LOCKED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_CHANNELLIST_LOCKED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1CHAT_1LOBBY_1INVITATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_CHAT_LOBBY_INVITATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1LIST_1CHAT_1LOBBY_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_LIST_CHAT_LOBBY_LIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1TYPE_1SAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_TYPE_SAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1TYPE_1MOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_TYPE_MOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1TYPE_1ADD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_TYPE_ADD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1TYPE_1DEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NOTIFY_TYPE_DEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1HASHTYPE_1EXAMINING_1FILES_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)NOTIFY_HASHTYPE_EXAMINING_FILES;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1HASHTYPE_1FINISH_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)NOTIFY_HASHTYPE_FINISH;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1HASHTYPE_1HASH_1FILE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)NOTIFY_HASHTYPE_HASH_FILE;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_retroshare_RetroshareJNI_NOTIFY_1HASHTYPE_1SAVE_1FILE_1INDEX_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)NOTIFY_HASHTYPE_SAVE_FILE_INDEX;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

