/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class LinearizedExpression {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected LinearizedExpression(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(LinearizedExpression obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_LinearizedExpression(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void set_tokens(SWIGTYPE_p_std__vectorT_unsigned_char_t value) {
    RetroshareJNI.LinearizedExpression__tokens_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_char_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_unsigned_char_t get_tokens() {
    return new SWIGTYPE_p_std__vectorT_unsigned_char_t(RetroshareJNI.LinearizedExpression__tokens_get(swigCPtr, this), true);
  }

  public void set_ints(SWIGTYPE_p_std__vectorT_unsigned_int_t value) {
    RetroshareJNI.LinearizedExpression__ints_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t get_ints() {
    return new SWIGTYPE_p_std__vectorT_unsigned_int_t(RetroshareJNI.LinearizedExpression__ints_get(swigCPtr, this), true);
  }

  public void set_strings(SWIGTYPE_p_std__vectorT_std__string_t value) {
    RetroshareJNI.LinearizedExpression__strings_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_std__string_t get_strings() {
    return new SWIGTYPE_p_std__vectorT_std__string_t(RetroshareJNI.LinearizedExpression__strings_get(swigCPtr, this), true);
  }

  public static Expression toExpr(LinearizedExpression e) {
    long cPtr = RetroshareJNI.LinearizedExpression_toExpr(LinearizedExpression.getCPtr(e), e);
    return (cPtr == 0) ? null : new Expression(cPtr, false);
  }

  public LinearizedExpression() {
    this(RetroshareJNI.new_LinearizedExpression(), true);
  }

  public final static class token {
    public final static LinearizedExpression.token EXPR_DATE = new LinearizedExpression.token("EXPR_DATE", RetroshareJNI.LinearizedExpression_EXPR_DATE_get());
    public final static LinearizedExpression.token EXPR_POP = new LinearizedExpression.token("EXPR_POP", RetroshareJNI.LinearizedExpression_EXPR_POP_get());
    public final static LinearizedExpression.token EXPR_SIZE = new LinearizedExpression.token("EXPR_SIZE", RetroshareJNI.LinearizedExpression_EXPR_SIZE_get());
    public final static LinearizedExpression.token EXPR_HASH = new LinearizedExpression.token("EXPR_HASH", RetroshareJNI.LinearizedExpression_EXPR_HASH_get());
    public final static LinearizedExpression.token EXPR_NAME = new LinearizedExpression.token("EXPR_NAME", RetroshareJNI.LinearizedExpression_EXPR_NAME_get());
    public final static LinearizedExpression.token EXPR_PATH = new LinearizedExpression.token("EXPR_PATH", RetroshareJNI.LinearizedExpression_EXPR_PATH_get());
    public final static LinearizedExpression.token EXPR_EXT = new LinearizedExpression.token("EXPR_EXT", RetroshareJNI.LinearizedExpression_EXPR_EXT_get());
    public final static LinearizedExpression.token EXPR_COMP = new LinearizedExpression.token("EXPR_COMP", RetroshareJNI.LinearizedExpression_EXPR_COMP_get());
    public final static LinearizedExpression.token EXPR_SIZE_MB = new LinearizedExpression.token("EXPR_SIZE_MB", RetroshareJNI.LinearizedExpression_EXPR_SIZE_MB_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static token swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + token.class + " with value " + swigValue);
    }

    private token(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private token(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private token(String swigName, token swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static token[] swigValues = { EXPR_DATE, EXPR_POP, EXPR_SIZE, EXPR_HASH, EXPR_NAME, EXPR_PATH, EXPR_EXT, EXPR_COMP, EXPR_SIZE_MB };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
