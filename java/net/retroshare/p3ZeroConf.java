/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class p3ZeroConf extends pqiNetAssistConnect {
  private long swigCPtr;

  protected p3ZeroConf(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.p3ZeroConf_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(p3ZeroConf obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_p3ZeroConf(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public p3ZeroConf(SWIGTYPE_p_std__string gpgid, SWIGTYPE_p_std__string sslid, pqiConnectCb cb, p3NetMgr nm, p3PeerMgr pm) {
    this(RetroshareJNI.new_p3ZeroConf(SWIGTYPE_p_std__string.getCPtr(gpgid), SWIGTYPE_p_std__string.getCPtr(sslid), pqiConnectCb.getCPtr(cb), cb, p3NetMgr.getCPtr(nm), nm, p3PeerMgr.getCPtr(pm), pm), true);
  }

  public boolean resetListener(SWIGTYPE_p_sockaddr_in local) {
    return RetroshareJNI.p3ZeroConf_resetListener(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(local));
  }

  public void start() {
    RetroshareJNI.p3ZeroConf_start(swigCPtr, this);
  }

  public int tick() {
    return RetroshareJNI.p3ZeroConf_tick(swigCPtr, this);
  }

  public void enable(boolean on) {
    RetroshareJNI.p3ZeroConf_enable(swigCPtr, this, on);
  }

  public void shutdown() {
    RetroshareJNI.p3ZeroConf_shutdown(swigCPtr, this);
  }

  public void restart() {
    RetroshareJNI.p3ZeroConf_restart(swigCPtr, this);
  }

  public boolean getEnabled() {
    return RetroshareJNI.p3ZeroConf_getEnabled(swigCPtr, this);
  }

  public boolean getActive() {
    return RetroshareJNI.p3ZeroConf_getActive(swigCPtr, this);
  }

  public boolean getNetworkStats(SWIGTYPE_p_unsigned_int netsize, SWIGTYPE_p_unsigned_int localnetsize) {
    return RetroshareJNI.p3ZeroConf_getNetworkStats(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(netsize), SWIGTYPE_p_unsigned_int.getCPtr(localnetsize));
  }

  public boolean findPeer(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.p3ZeroConf_findPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public boolean dropPeer(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.p3ZeroConf_dropPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public int addBadPeer(SWIGTYPE_p_sockaddr_in addr, long reason, long flags, long age) {
    return RetroshareJNI.p3ZeroConf_addBadPeer(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(addr), reason, flags, age);
  }

  public int addKnownPeer(SWIGTYPE_p_std__string pid, SWIGTYPE_p_sockaddr_in addr, long flags) {
    return RetroshareJNI.p3ZeroConf_addKnownPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), SWIGTYPE_p_sockaddr_in.getCPtr(addr), flags);
  }

  public void ConnectionFeedback(SWIGTYPE_p_std__string pid, int state) {
    RetroshareJNI.p3ZeroConf_ConnectionFeedback(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), state);
  }

  public boolean getPeerStatus(SWIGTYPE_p_std__string id, SWIGTYPE_p_sockaddr_in laddr, SWIGTYPE_p_sockaddr_in raddr, SWIGTYPE_p_unsigned_int type, SWIGTYPE_p_unsigned_int mode) {
    return RetroshareJNI.p3ZeroConf_getPeerStatus(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), SWIGTYPE_p_sockaddr_in.getCPtr(laddr), SWIGTYPE_p_sockaddr_in.getCPtr(raddr), SWIGTYPE_p_unsigned_int.getCPtr(type), SWIGTYPE_p_unsigned_int.getCPtr(mode));
  }

  public boolean setAttachMode(boolean on) {
    return RetroshareJNI.p3ZeroConf_setAttachMode(swigCPtr, this, on);
  }

  public void callbackRegister(SWIGTYPE_p_DNSServiceRef sdRef, SWIGTYPE_p_DNSServiceFlags flags, SWIGTYPE_p_DNSServiceErrorType errorCode, String name, String regtype, String domain) {
    RetroshareJNI.p3ZeroConf_callbackRegister(swigCPtr, this, SWIGTYPE_p_DNSServiceRef.getCPtr(sdRef), SWIGTYPE_p_DNSServiceFlags.getCPtr(flags), SWIGTYPE_p_DNSServiceErrorType.getCPtr(errorCode), name, regtype, domain);
  }

  public void callbackBrowse(SWIGTYPE_p_DNSServiceRef sdRef, SWIGTYPE_p_DNSServiceFlags flags, long interfaceIndex, SWIGTYPE_p_DNSServiceErrorType errorCode, String serviceName, String regtype, String replyDomain) {
    RetroshareJNI.p3ZeroConf_callbackBrowse(swigCPtr, this, SWIGTYPE_p_DNSServiceRef.getCPtr(sdRef), SWIGTYPE_p_DNSServiceFlags.getCPtr(flags), interfaceIndex, SWIGTYPE_p_DNSServiceErrorType.getCPtr(errorCode), serviceName, regtype, replyDomain);
  }

  public void callbackResolve(SWIGTYPE_p_DNSServiceRef sdRef, SWIGTYPE_p_DNSServiceFlags flags, long interfaceIndex, SWIGTYPE_p_DNSServiceErrorType errorCode, String fullname, String hosttarget, int port, int txtLen, SWIGTYPE_p_unsigned_char txtRecord) {
    RetroshareJNI.p3ZeroConf_callbackResolve(swigCPtr, this, SWIGTYPE_p_DNSServiceRef.getCPtr(sdRef), SWIGTYPE_p_DNSServiceFlags.getCPtr(flags), interfaceIndex, SWIGTYPE_p_DNSServiceErrorType.getCPtr(errorCode), fullname, hosttarget, port, txtLen, SWIGTYPE_p_unsigned_char.getCPtr(txtRecord));
  }

  public void callbackQueryIp(SWIGTYPE_p_DNSServiceRef sdRef, SWIGTYPE_p_DNSServiceFlags flags, long interfaceIndex, SWIGTYPE_p_DNSServiceErrorType errorCode, String fullname, int rrtype, int rrclass, int rdlen, SWIGTYPE_p_void rdata, long ttl) {
    RetroshareJNI.p3ZeroConf_callbackQueryIp(swigCPtr, this, SWIGTYPE_p_DNSServiceRef.getCPtr(sdRef), SWIGTYPE_p_DNSServiceFlags.getCPtr(flags), interfaceIndex, SWIGTYPE_p_DNSServiceErrorType.getCPtr(errorCode), fullname, rrtype, rrclass, rdlen, SWIGTYPE_p_void.getCPtr(rdata), ttl);
  }

}
