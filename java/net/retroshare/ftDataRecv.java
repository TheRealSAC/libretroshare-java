/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftDataRecv {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected ftDataRecv(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftDataRecv obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftDataRecv(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean recvData(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftDataRecv_recvData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize, SWIGTYPE_p_void.getCPtr(data));
  }

  public boolean recvDataRequest(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize) {
    return RetroshareJNI.ftDataRecv_recvDataRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize);
  }

  public boolean recvChunkMapRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, boolean is_client) {
    return RetroshareJNI.ftDataRecv_recvChunkMapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), is_client);
  }

  public boolean recvChunkMap(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, CompressedChunkMap cmap, boolean is_client) {
    return RetroshareJNI.ftDataRecv_recvChunkMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), CompressedChunkMap.getCPtr(cmap), cmap, is_client);
  }

  public boolean recvCRC32MapRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftDataRecv_recvCRC32MapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean recvCRC32Map(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, SWIGTYPE_p_t_CRCMapT_unsigned_int_t crcmap) {
    return RetroshareJNI.ftDataRecv_recvCRC32Map(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_t_CRCMapT_unsigned_int_t.getCPtr(crcmap));
  }

  public boolean recvSingleChunkCRCRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, long chunk_id) {
    return RetroshareJNI.ftDataRecv_recvSingleChunkCRCRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), chunk_id);
  }

  public boolean recvSingleChunkCRC(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, long chunk_id, Sha1CheckSum sum) {
    return RetroshareJNI.ftDataRecv_recvSingleChunkCRC(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), chunk_id, Sha1CheckSum.getCPtr(sum), sum);
  }

}
