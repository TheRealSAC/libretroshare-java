/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class FileChunksInfo {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected FileChunksInfo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FileChunksInfo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_FileChunksInfo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setFile_size(java.math.BigInteger value) {
    RetroshareJNI.FileChunksInfo_file_size_set(swigCPtr, this, value);
  }

  public java.math.BigInteger getFile_size() {
    return RetroshareJNI.FileChunksInfo_file_size_get(swigCPtr, this);
  }

  public void setChunk_size(long value) {
    RetroshareJNI.FileChunksInfo_chunk_size_set(swigCPtr, this, value);
  }

  public long getChunk_size() {
    return RetroshareJNI.FileChunksInfo_chunk_size_get(swigCPtr, this);
  }

  public void setStrategy(long value) {
    RetroshareJNI.FileChunksInfo_strategy_set(swigCPtr, this, value);
  }

  public long getStrategy() {
    return RetroshareJNI.FileChunksInfo_strategy_get(swigCPtr, this);
  }

  public void setChunks(SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t value) {
    RetroshareJNI.FileChunksInfo_chunks_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t getChunks() {
    return new SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t(RetroshareJNI.FileChunksInfo_chunks_get(swigCPtr, this), true);
  }

  public void setCompressed_peer_availability_maps(SWIGTYPE_p_std__mapT_std__string_CompressedChunkMap_t value) {
    RetroshareJNI.FileChunksInfo_compressed_peer_availability_maps_set(swigCPtr, this, SWIGTYPE_p_std__mapT_std__string_CompressedChunkMap_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__mapT_std__string_CompressedChunkMap_t getCompressed_peer_availability_maps() {
    long cPtr = RetroshareJNI.FileChunksInfo_compressed_peer_availability_maps_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__mapT_std__string_CompressedChunkMap_t(cPtr, false);
  }

  public void setActive_chunks(SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t value) {
    RetroshareJNI.FileChunksInfo_active_chunks_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t getActive_chunks() {
    return new SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t(RetroshareJNI.FileChunksInfo_active_chunks_get(swigCPtr, this), true);
  }

  public void setPending_slices(SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_FileChunksInfo__SliceInfo_t_t value) {
    RetroshareJNI.FileChunksInfo_pending_slices_set(swigCPtr, this, SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_FileChunksInfo__SliceInfo_t_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_FileChunksInfo__SliceInfo_t_t getPending_slices() {
    long cPtr = RetroshareJNI.FileChunksInfo_pending_slices_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__mapT_unsigned_int_std__vectorT_FileChunksInfo__SliceInfo_t_t(cPtr, false);
  }

  public FileChunksInfo() {
    this(RetroshareJNI.new_FileChunksInfo(), true);
  }

  public final static class ChunkState {
    public final static FileChunksInfo.ChunkState CHUNK_CHECKING = new FileChunksInfo.ChunkState("CHUNK_CHECKING", RetroshareJNI.FileChunksInfo_CHUNK_CHECKING_get());
    public final static FileChunksInfo.ChunkState CHUNK_DONE = new FileChunksInfo.ChunkState("CHUNK_DONE", RetroshareJNI.FileChunksInfo_CHUNK_DONE_get());
    public final static FileChunksInfo.ChunkState CHUNK_ACTIVE = new FileChunksInfo.ChunkState("CHUNK_ACTIVE", RetroshareJNI.FileChunksInfo_CHUNK_ACTIVE_get());
    public final static FileChunksInfo.ChunkState CHUNK_OUTSTANDING = new FileChunksInfo.ChunkState("CHUNK_OUTSTANDING", RetroshareJNI.FileChunksInfo_CHUNK_OUTSTANDING_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ChunkState swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ChunkState.class + " with value " + swigValue);
    }

    private ChunkState(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ChunkState(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ChunkState(String swigName, ChunkState swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ChunkState[] swigValues = { CHUNK_CHECKING, CHUNK_DONE, CHUNK_ACTIVE, CHUNK_OUTSTANDING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ChunkStrategy {
    public final static FileChunksInfo.ChunkStrategy CHUNK_STRATEGY_STREAMING = new FileChunksInfo.ChunkStrategy("CHUNK_STRATEGY_STREAMING");
    public final static FileChunksInfo.ChunkStrategy CHUNK_STRATEGY_RANDOM = new FileChunksInfo.ChunkStrategy("CHUNK_STRATEGY_RANDOM");
    public final static FileChunksInfo.ChunkStrategy CHUNK_STRATEGY_PROGRESSIVE = new FileChunksInfo.ChunkStrategy("CHUNK_STRATEGY_PROGRESSIVE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ChunkStrategy swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ChunkStrategy.class + " with value " + swigValue);
    }

    private ChunkStrategy(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ChunkStrategy(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ChunkStrategy(String swigName, ChunkStrategy swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ChunkStrategy[] swigValues = { CHUNK_STRATEGY_STREAMING, CHUNK_STRATEGY_RANDOM, CHUNK_STRATEGY_PROGRESSIVE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
