/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftDataMultiplex extends ftDataRecv {
  private long swigCPtr;

  protected ftDataMultiplex(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.ftDataMultiplex_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftDataMultiplex obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftDataMultiplex(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ftDataMultiplex(SWIGTYPE_p_std__string ownId, ftDataSend server, ftSearch search) {
    this(RetroshareJNI.new_ftDataMultiplex(SWIGTYPE_p_std__string.getCPtr(ownId), ftDataSend.getCPtr(server), server, ftSearch.getCPtr(search), search), true);
  }

  public boolean addTransferModule(ftTransferModule mod, ftFileCreator f) {
    return RetroshareJNI.ftDataMultiplex_addTransferModule(swigCPtr, this, ftTransferModule.getCPtr(mod), mod, ftFileCreator.getCPtr(f), f);
  }

  public boolean removeTransferModule(SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftDataMultiplex_removeTransferModule(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean FileUploads(SWIGTYPE_p_std__listT_std__string_t hashs) {
    return RetroshareJNI.ftDataMultiplex_FileUploads(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(hashs));
  }

  public boolean FileDownloads(SWIGTYPE_p_std__listT_std__string_t hashs) {
    return RetroshareJNI.ftDataMultiplex_FileDownloads(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(hashs));
  }

  public boolean FileDetails(SWIGTYPE_p_std__string hash, SWIGTYPE_p_t_RsFlags32T_0xf29ba5_t hintsflag, FileInfo info) {
    return RetroshareJNI.ftDataMultiplex_FileDetails(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_t_RsFlags32T_0xf29ba5_t.getCPtr(hintsflag), FileInfo.getCPtr(info), info);
  }

  public void deleteUnusedServers() {
    RetroshareJNI.ftDataMultiplex_deleteUnusedServers(swigCPtr, this);
  }

  public void handlePendingCrcRequests() {
    RetroshareJNI.ftDataMultiplex_handlePendingCrcRequests(swigCPtr, this);
  }

  public boolean sendDataRequest(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize) {
    return RetroshareJNI.ftDataMultiplex_sendDataRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize);
  }

  public boolean sendData(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftDataMultiplex_sendData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize, SWIGTYPE_p_void.getCPtr(data));
  }

  public boolean sendChunkMapRequest(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, boolean is_client) {
    return RetroshareJNI.ftDataMultiplex_sendChunkMapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), is_client);
  }

  public boolean sendCRC32MapRequest(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftDataMultiplex_sendCRC32MapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean computeAndSendCRC32Map(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftDataMultiplex_computeAndSendCRC32Map(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean sendSingleChunkCRCRequests(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__vectorT_unsigned_int_t to_ask) {
    return RetroshareJNI.ftDataMultiplex_sendSingleChunkCRCRequests(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(to_ask));
  }

  public boolean dispatchReceivedChunkCheckSum() {
    return RetroshareJNI.ftDataMultiplex_dispatchReceivedChunkCheckSum(swigCPtr, this);
  }

  public boolean recvData(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftDataMultiplex_recvData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize, SWIGTYPE_p_void.getCPtr(data));
  }

  public boolean recvDataRequest(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_std__string hash, java.math.BigInteger size, java.math.BigInteger offset, long chunksize) {
    return RetroshareJNI.ftDataMultiplex_recvDataRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_std__string.getCPtr(hash), size, offset, chunksize);
  }

  public boolean recvChunkMapRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, boolean is_client) {
    return RetroshareJNI.ftDataMultiplex_recvChunkMapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), is_client);
  }

  public boolean recvChunkMap(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, CompressedChunkMap cmap, boolean is_client) {
    return RetroshareJNI.ftDataMultiplex_recvChunkMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), CompressedChunkMap.getCPtr(cmap), cmap, is_client);
  }

  public boolean recvCRC32Map(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, SWIGTYPE_p_t_CRCMapT_unsigned_int_t crc_map) {
    return RetroshareJNI.ftDataMultiplex_recvCRC32Map(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_t_CRCMapT_unsigned_int_t.getCPtr(crc_map));
  }

  public boolean recvCRC32MapRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftDataMultiplex_recvCRC32MapRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean recvSingleChunkCRCRequest(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, long chunk_id) {
    return RetroshareJNI.ftDataMultiplex_recvSingleChunkCRCRequest(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), chunk_id);
  }

  public boolean recvSingleChunkCRC(SWIGTYPE_p_std__string peer_id, SWIGTYPE_p_std__string hash, long chunk_id, Sha1CheckSum sum) {
    return RetroshareJNI.ftDataMultiplex_recvSingleChunkCRC(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), SWIGTYPE_p_std__string.getCPtr(hash), chunk_id, Sha1CheckSum.getCPtr(sum), sum);
  }

  public boolean getClientChunkMap(SWIGTYPE_p_std__string upload_hash, SWIGTYPE_p_std__string peer_id, CompressedChunkMap map) {
    return RetroshareJNI.ftDataMultiplex_getClientChunkMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(upload_hash), SWIGTYPE_p_std__string.getCPtr(peer_id), CompressedChunkMap.getCPtr(map), map);
  }

}
