/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class pqissltunnel extends NetBinInterface {
  private long swigCPtr;

  protected pqissltunnel(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.pqissltunnel_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(pqissltunnel obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_pqissltunnel(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public pqissltunnel(PQInterface parent, p3LinkMgr cm, p3tunnel p3t) {
    this(RetroshareJNI.new_pqissltunnel(PQInterface.getCPtr(parent), parent, p3LinkMgr.getCPtr(cm), cm, p3tunnel.getCPtr(p3t), p3t), true);
  }

  public int connect(SWIGTYPE_p_sockaddr_in raddr) {
    return RetroshareJNI.pqissltunnel_connect(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr));
  }

  public int listen() {
    return RetroshareJNI.pqissltunnel_listen(swigCPtr, this);
  }

  public int stoplistening() {
    return RetroshareJNI.pqissltunnel_stoplistening(swigCPtr, this);
  }

  public int reset() {
    return RetroshareJNI.pqissltunnel_reset(swigCPtr, this);
  }

  public int disconnect() {
    return RetroshareJNI.pqissltunnel_disconnect(swigCPtr, this);
  }

  public int getConnectAddress(SWIGTYPE_p_sockaddr_in raddr) {
    return RetroshareJNI.pqissltunnel_getConnectAddress(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr));
  }

  public boolean connect_parameter(long type, long value) {
    return RetroshareJNI.pqissltunnel_connect_parameter(swigCPtr, this, type, value);
  }

  public int tick() {
    return RetroshareJNI.pqissltunnel_tick(swigCPtr, this);
  }

  public int status() {
    return RetroshareJNI.pqissltunnel_status(swigCPtr, this);
  }

  public int senddata(SWIGTYPE_p_void arg0, int arg1) {
    return RetroshareJNI.pqissltunnel_senddata(swigCPtr, this, SWIGTYPE_p_void.getCPtr(arg0), arg1);
  }

  public int readdata(SWIGTYPE_p_void arg0, int arg1) {
    return RetroshareJNI.pqissltunnel_readdata(swigCPtr, this, SWIGTYPE_p_void.getCPtr(arg0), arg1);
  }

  public int netstatus() {
    return RetroshareJNI.pqissltunnel_netstatus(swigCPtr, this);
  }

  public int isactive() {
    return RetroshareJNI.pqissltunnel_isactive(swigCPtr, this);
  }

  public boolean moretoread() {
    return RetroshareJNI.pqissltunnel_moretoread(swigCPtr, this);
  }

  public boolean cansend() {
    return RetroshareJNI.pqissltunnel_cansend(swigCPtr, this);
  }

  public int close() {
    return RetroshareJNI.pqissltunnel_close(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string gethash() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.pqissltunnel_gethash(swigCPtr, this), true);
  }

  public boolean bandwidthLimited() {
    return RetroshareJNI.pqissltunnel_bandwidthLimited(swigCPtr, this);
  }

  public void addIncomingPacket(SWIGTYPE_p_void encoded_data, int data_length) {
    RetroshareJNI.pqissltunnel_addIncomingPacket(swigCPtr, this, SWIGTYPE_p_void.getCPtr(encoded_data), data_length);
  }

  public void IncommingPingPacket() {
    RetroshareJNI.pqissltunnel_IncommingPingPacket(swigCPtr, this);
  }

  public void IncommingHanshakePacket(SWIGTYPE_p_std__string incRelayPeerId) {
    RetroshareJNI.pqissltunnel_IncommingHanshakePacket(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(incRelayPeerId));
  }

}
