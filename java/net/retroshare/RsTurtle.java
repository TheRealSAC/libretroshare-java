/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RsTurtle {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RsTurtle(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RsTurtle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_RsTurtle(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setEnabled(boolean arg0) {
    RetroshareJNI.RsTurtle_setEnabled(swigCPtr, this, arg0);
  }

  public boolean enabled() {
    return RetroshareJNI.RsTurtle_enabled(swigCPtr, this);
  }

  public void setSessionEnabled(boolean arg0) {
    RetroshareJNI.RsTurtle_setSessionEnabled(swigCPtr, this, arg0);
  }

  public boolean sessionEnabled() {
    return RetroshareJNI.RsTurtle_sessionEnabled(swigCPtr, this);
  }

  public long turtleSearch(SWIGTYPE_p_std__string match_string) {
    return RetroshareJNI.RsTurtle_turtleSearch__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(match_string));
  }

  public long turtleSearch(LinearizedExpression expr) {
    return RetroshareJNI.RsTurtle_turtleSearch__SWIG_1(swigCPtr, this, LinearizedExpression.getCPtr(expr), expr);
  }

  public void monitorTunnels(SWIGTYPE_p_std__string file_hash, RsTurtleClientService client_service) {
    RetroshareJNI.RsTurtle_monitorTunnels(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(file_hash), RsTurtleClientService.getCPtr(client_service), client_service);
  }

  public void stopMonitoringTunnels(SWIGTYPE_p_std__string file_hash) {
    RetroshareJNI.RsTurtle_stopMonitoringTunnels(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(file_hash));
  }

  public void registerTunnelService(RsTurtleClientService service) {
    RetroshareJNI.RsTurtle_registerTunnelService(swigCPtr, this, RsTurtleClientService.getCPtr(service), service);
  }

  public void getInfo(SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t arg0, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t arg1, SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t arg2, SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t arg3) {
    RetroshareJNI.RsTurtle_getInfo(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t.getCPtr(arg0), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t.getCPtr(arg1), SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t.getCPtr(arg2), SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t.getCPtr(arg3));
  }

  public void getTrafficStatistics(TurtleTrafficStatisticsInfo info) {
    RetroshareJNI.RsTurtle_getTrafficStatistics(swigCPtr, this, TurtleTrafficStatisticsInfo.getCPtr(info), info);
  }

  public boolean isTurtlePeer(SWIGTYPE_p_std__string peer_id) {
    return RetroshareJNI.RsTurtle_isTurtlePeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public void setMaxTRForwardRate(int max_tr_up_rate) {
    RetroshareJNI.RsTurtle_setMaxTRForwardRate(swigCPtr, this, max_tr_up_rate);
  }

  public int getMaxTRForwardRate() {
    return RetroshareJNI.RsTurtle_getMaxTRForwardRate(swigCPtr, this);
  }

}
