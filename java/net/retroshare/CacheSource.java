/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class CacheSource {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CacheSource(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CacheSource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_CacheSource(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CacheSource(int t, boolean m, CacheStrapper cs, SWIGTYPE_p_std__string cachedir) {
    this(RetroshareJNI.new_CacheSource(t, m, CacheStrapper.getCPtr(cs), cs, SWIGTYPE_p_std__string.getCPtr(cachedir)), true);
  }

  public boolean cachesAvailable(SWIGTYPE_p_std__string pid, SWIGTYPE_p_std__mapT_CacheId_RsCacheData_t ids) {
    return RetroshareJNI.CacheSource_cachesAvailable(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), SWIGTYPE_p_std__mapT_CacheId_RsCacheData_t.getCPtr(ids));
  }

  public boolean loadLocalCache(RsCacheData data) {
    return RetroshareJNI.CacheSource_loadLocalCache(swigCPtr, this, RsCacheData.getCPtr(data), data);
  }

  public boolean refreshCache(RsCacheData data, SWIGTYPE_p_std__setT_std__string_t destination_peers) {
    return RetroshareJNI.CacheSource_refreshCache__SWIG_0(swigCPtr, this, RsCacheData.getCPtr(data), data, SWIGTYPE_p_std__setT_std__string_t.getCPtr(destination_peers));
  }

  public boolean refreshCache(RsCacheData data) {
    return RetroshareJNI.CacheSource_refreshCache__SWIG_1(swigCPtr, this, RsCacheData.getCPtr(data), data);
  }

  public boolean clearCache(CacheId id) {
    return RetroshareJNI.CacheSource_clearCache(swigCPtr, this, CacheId.getCPtr(id), id);
  }

  public boolean isPeerAcceptedAsCacheReceiver(SWIGTYPE_p_std__string arg0) {
    return RetroshareJNI.CacheSource_isPeerAcceptedAsCacheReceiver(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(arg0));
  }

  public SWIGTYPE_p_std__string getCacheDir() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.CacheSource_getCacheDir(swigCPtr, this), true);
  }

  public boolean isMultiCache() {
    return RetroshareJNI.CacheSource_isMultiCache(swigCPtr, this);
  }

  public int getCacheType() {
    return RetroshareJNI.CacheSource_getCacheType(swigCPtr, this);
  }

  public void listCaches(SWIGTYPE_p_std__ostream out) {
    RetroshareJNI.CacheSource_listCaches(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

  public boolean findCache(SWIGTYPE_p_std__string hash, RsCacheData data) {
    return RetroshareJNI.CacheSource_findCache(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), RsCacheData.getCPtr(data), data);
  }

}
