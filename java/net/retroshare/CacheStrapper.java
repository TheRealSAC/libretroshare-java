/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class CacheStrapper extends pqiMonitor {
  private long swigCPtr;

  protected CacheStrapper(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.CacheStrapper_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CacheStrapper obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_CacheStrapper(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CacheStrapper(p3LinkMgr lm) {
    this(RetroshareJNI.new_CacheStrapper(p3LinkMgr.getCPtr(lm), lm), true);
  }

  public void statusChange(SWIGTYPE_p_std__listT_pqipeer_t plist) {
    RetroshareJNI.CacheStrapper_statusChange(swigCPtr, this, SWIGTYPE_p_std__listT_pqipeer_t.getCPtr(plist));
  }

  public void refreshCache(RsCacheData data) {
    RetroshareJNI.CacheStrapper_refreshCache__SWIG_0(swigCPtr, this, RsCacheData.getCPtr(data), data);
  }

  public void refreshCache(RsCacheData data, SWIGTYPE_p_std__setT_std__string_t destination_peers) {
    RetroshareJNI.CacheStrapper_refreshCache__SWIG_1(swigCPtr, this, RsCacheData.getCPtr(data), data, SWIGTYPE_p_std__setT_std__string_t.getCPtr(destination_peers));
  }

  public void refreshCacheStore(RsCacheData data) {
    RetroshareJNI.CacheStrapper_refreshCacheStore(swigCPtr, this, RsCacheData.getCPtr(data), data);
  }

  public boolean getCacheUpdates(SWIGTYPE_p_std__listT_std__pairT_std__string_RsCacheData_t_t updates) {
    return RetroshareJNI.CacheStrapper_getCacheUpdates(swigCPtr, this, SWIGTYPE_p_std__listT_std__pairT_std__string_RsCacheData_t_t.getCPtr(updates));
  }

  public void addCachePair(CachePair pair) {
    RetroshareJNI.CacheStrapper_addCachePair(swigCPtr, this, CachePair.getCPtr(pair), pair);
  }

  public void recvCacheResponse(RsCacheData data, SWIGTYPE_p_time_t ts) {
    RetroshareJNI.CacheStrapper_recvCacheResponse(swigCPtr, this, RsCacheData.getCPtr(data), data, SWIGTYPE_p_time_t.getCPtr(ts));
  }

  public void handleCacheQuery(SWIGTYPE_p_std__string id, SWIGTYPE_p_std__mapT_CacheId_RsCacheData_t data) {
    RetroshareJNI.CacheStrapper_handleCacheQuery(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), SWIGTYPE_p_std__mapT_CacheId_RsCacheData_t.getCPtr(data));
  }

  public boolean findCache(SWIGTYPE_p_std__string hash, RsCacheData data) {
    return RetroshareJNI.CacheStrapper_findCache(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), RsCacheData.getCPtr(data), data);
  }

  public void listCaches(SWIGTYPE_p_std__ostream out) {
    RetroshareJNI.CacheStrapper_listCaches(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

  public void listPeerStatus(SWIGTYPE_p_std__ostream out) {
    RetroshareJNI.CacheStrapper_listPeerStatus(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

  public boolean CacheExist(RsCacheData data) {
    return RetroshareJNI.CacheStrapper_CacheExist(swigCPtr, this, RsCacheData.getCPtr(data), data);
  }

}
