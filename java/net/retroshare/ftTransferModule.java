/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftTransferModule {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected ftTransferModule(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftTransferModule obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftTransferModule(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ftTransferModule(ftFileCreator fc, ftDataMultiplex dm, ftController c) {
    this(RetroshareJNI.new_ftTransferModule(ftFileCreator.getCPtr(fc), fc, ftDataMultiplex.getCPtr(dm), dm, ftController.getCPtr(c), c), true);
  }

  public boolean setFileSources(SWIGTYPE_p_std__listT_std__string_t peerIds) {
    return RetroshareJNI.ftTransferModule_setFileSources(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(peerIds));
  }

  public boolean addFileSource(SWIGTYPE_p_std__string peerId) {
    return RetroshareJNI.ftTransferModule_addFileSource(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId));
  }

  public boolean removeFileSource(SWIGTYPE_p_std__string peerId) {
    return RetroshareJNI.ftTransferModule_removeFileSource(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId));
  }

  public boolean setPeerState(SWIGTYPE_p_std__string peerId, long state, long maxRate) {
    return RetroshareJNI.ftTransferModule_setPeerState(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), state, maxRate);
  }

  public boolean getFileSources(SWIGTYPE_p_std__listT_std__string_t peerIds) {
    return RetroshareJNI.ftTransferModule_getFileSources(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(peerIds));
  }

  public boolean getPeerState(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_unsigned_int state, SWIGTYPE_p_unsigned_int tfRate) {
    return RetroshareJNI.ftTransferModule_getPeerState(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_unsigned_int.getCPtr(state), SWIGTYPE_p_unsigned_int.getCPtr(tfRate));
  }

  public long getDataRate(SWIGTYPE_p_std__string peerId) {
    return RetroshareJNI.ftTransferModule_getDataRate(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId));
  }

  public boolean cancelTransfer() {
    return RetroshareJNI.ftTransferModule_cancelTransfer(swigCPtr, this);
  }

  public boolean cancelFileTransferUpward() {
    return RetroshareJNI.ftTransferModule_cancelFileTransferUpward(swigCPtr, this);
  }

  public boolean completeFileTransfer() {
    return RetroshareJNI.ftTransferModule_completeFileTransfer(swigCPtr, this);
  }

  public boolean isCheckingHash() {
    return RetroshareJNI.ftTransferModule_isCheckingHash(swigCPtr, this);
  }

  public void forceCheck() {
    RetroshareJNI.ftTransferModule_forceCheck(swigCPtr, this);
  }

  public void addCRC32Map(SWIGTYPE_p_t_CRCMapT_unsigned_int_t map) {
    RetroshareJNI.ftTransferModule_addCRC32Map(swigCPtr, this, SWIGTYPE_p_t_CRCMapT_unsigned_int_t.getCPtr(map));
  }

  public boolean recvFileData(SWIGTYPE_p_std__string peerId, java.math.BigInteger offset, long chunk_size, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftTransferModule_recvFileData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), offset, chunk_size, SWIGTYPE_p_void.getCPtr(data));
  }

  public void locked_requestData(SWIGTYPE_p_std__string peerId, java.math.BigInteger offset, long chunk_size) {
    RetroshareJNI.ftTransferModule_locked_requestData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), offset, chunk_size);
  }

  public boolean locked_getChunk(SWIGTYPE_p_std__string peer_id, long size_hint, SWIGTYPE_p_unsigned_long_long offset, SWIGTYPE_p_unsigned_int chunk_size) {
    return RetroshareJNI.ftTransferModule_locked_getChunk(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), size_hint, SWIGTYPE_p_unsigned_long_long.getCPtr(offset), SWIGTYPE_p_unsigned_int.getCPtr(chunk_size));
  }

  public boolean locked_storeData(java.math.BigInteger offset, long chunk_size, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftTransferModule_locked_storeData(swigCPtr, this, offset, chunk_size, SWIGTYPE_p_void.getCPtr(data));
  }

  public int tick() {
    return RetroshareJNI.ftTransferModule_tick(swigCPtr, this);
  }

  public SWIGTYPE_p_std__string hash() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftTransferModule_hash(swigCPtr, this), true);
  }

  public java.math.BigInteger size() {
    return RetroshareJNI.ftTransferModule_size(swigCPtr, this);
  }

  public boolean queryInactive() {
    return RetroshareJNI.ftTransferModule_queryInactive(swigCPtr, this);
  }

  public void adjustSpeed() {
    RetroshareJNI.ftTransferModule_adjustSpeed(swigCPtr, this);
  }

  public DwlSpeed downloadPriority() {
    return DwlSpeed.swigToEnum(RetroshareJNI.ftTransferModule_downloadPriority(swigCPtr, this));
  }

  public void setDownloadPriority(DwlSpeed p) {
    RetroshareJNI.ftTransferModule_setDownloadPriority(swigCPtr, this, p.swigValue());
  }

}
