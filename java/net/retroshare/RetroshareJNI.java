/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RetroshareJNI {
  public final static native int _STDINT_H_get();
  public final static native int _FEATURES_H_get();
  public final static native int __USE_ANSI_get();
  public final static native int _BSD_SOURCE_get();
  public final static native int _SVID_SOURCE_get();
  public final static native int _POSIX_SOURCE_get();
  public final static native int _POSIX_C_SOURCE_get();
  public final static native int __USE_POSIX_IMPLICITLY_get();
  public final static native int __USE_POSIX_get();
  public final static native int __USE_POSIX2_get();
  public final static native int __USE_POSIX199309_get();
  public final static native int __USE_POSIX199506_get();
  public final static native int __USE_XOPEN2K_get();
  public final static native int __USE_ISOC95_get();
  public final static native int __USE_ISOC99_get();
  public final static native int __USE_XOPEN2K8_get();
  public final static native int _ATFILE_SOURCE_get();
  public final static native int __USE_MISC_get();
  public final static native int __USE_BSD_get();
  public final static native int __USE_SVID_get();
  public final static native int __USE_ATFILE_get();
  public final static native int __USE_FORTIFY_LEVEL_get();
  public final static native int _STDC_PREDEF_H_get();
  public final static native int __STDC_IEC_559___get();
  public final static native int __STDC_IEC_559_COMPLEX___get();
  public final static native int __STDC_ISO_10646___get();
  public final static native int __STDC_NO_THREADS___get();
  public final static native int __GNU_LIBRARY___get();
  public final static native int __GLIBC___get();
  public final static native int __GLIBC_MINOR___get();
  public final static native int _SYS_CDEFS_H_get();
  public final static native int __WORDSIZE_get();
  public final static native int _BITS_WCHAR_H_get();
  public final static native long new_RsGroupMetaData();
  public final static native void RsGroupMetaData_mGroupId_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mGroupId_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mGroupName_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mGroupName_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mGroupFlags_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mGroupFlags_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mSignFlags_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mSignFlags_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mPublishTs_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mPublishTs_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mAuthorId_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mAuthorId_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mCircleId_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mCircleId_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mCircleType_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mCircleType_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mAuthenFlags_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mAuthenFlags_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mSubscribeFlags_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mSubscribeFlags_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mPop_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mPop_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mMsgCount_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mMsgCount_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mLastPost_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mLastPost_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mGroupStatus_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mGroupStatus_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mServiceString_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mServiceString_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mOriginator_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mOriginator_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void RsGroupMetaData_mInternalCircle_set(long jarg1, RsGroupMetaData jarg1_, long jarg2);
  public final static native long RsGroupMetaData_mInternalCircle_get(long jarg1, RsGroupMetaData jarg1_);
  public final static native void delete_RsGroupMetaData(long jarg1);
  public final static native long new_RsMsgMetaData();
  public final static native void RsMsgMetaData_mGroupId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mGroupId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mMsgId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mMsgId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mThreadId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mThreadId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mParentId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mParentId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mOrigMsgId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mOrigMsgId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mAuthorId_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mAuthorId_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mMsgName_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mMsgName_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mPublishTs_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mPublishTs_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mMsgFlags_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mMsgFlags_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mMsgStatus_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mMsgStatus_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mChildTs_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mChildTs_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void RsMsgMetaData_mServiceString_set(long jarg1, RsMsgMetaData jarg1_, long jarg2);
  public final static native long RsMsgMetaData_mServiceString_get(long jarg1, RsMsgMetaData jarg1_);
  public final static native void delete_RsMsgMetaData(long jarg1);
  public final static native void GxsGroupStatistic_mGrpId_set(long jarg1, GxsGroupStatistic jarg1_, long jarg2);
  public final static native long GxsGroupStatistic_mGrpId_get(long jarg1, GxsGroupStatistic jarg1_);
  public final static native void GxsGroupStatistic_mNumMsgs_set(long jarg1, GxsGroupStatistic jarg1_, long jarg2);
  public final static native long GxsGroupStatistic_mNumMsgs_get(long jarg1, GxsGroupStatistic jarg1_);
  public final static native void GxsGroupStatistic_mTotalSizeOfMsgs_set(long jarg1, GxsGroupStatistic jarg1_, long jarg2);
  public final static native long GxsGroupStatistic_mTotalSizeOfMsgs_get(long jarg1, GxsGroupStatistic jarg1_);
  public final static native long new_GxsGroupStatistic();
  public final static native void delete_GxsGroupStatistic(long jarg1);
  public final static native void GxsServiceStatistic_mNumMsgs_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mNumMsgs_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native void GxsServiceStatistic_mNumGrps_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mNumGrps_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native void GxsServiceStatistic_mSizeOfMsgs_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mSizeOfMsgs_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native void GxsServiceStatistic_mSizeOfGrps_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mSizeOfGrps_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native void GxsServiceStatistic_mNumGrpsSubscribed_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mNumGrpsSubscribed_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native void GxsServiceStatistic_mSizeStore_set(long jarg1, GxsServiceStatistic jarg1_, long jarg2);
  public final static native long GxsServiceStatistic_mSizeStore_get(long jarg1, GxsServiceStatistic jarg1_);
  public final static native long new_GxsServiceStatistic();
  public final static native void delete_GxsServiceStatistic(long jarg1);
  public final static native java.math.BigInteger ntohll(java.math.BigInteger jarg1);
  public final static native java.math.BigInteger htonll(java.math.BigInteger jarg1);
  public final static native void sockaddr_clear(long jarg1);
  public final static native boolean isValidNet(long jarg1);
  public final static native boolean isLoopbackNet(long jarg1);
  public final static native boolean isPrivateNet(long jarg1);
  public final static native boolean isExternalNet(long jarg1);
  public final static native long rs_inet_ntoa(long jarg1);
  public final static native void delete_RsTlvItem(long jarg1);
  public final static native long RsTlvItem_TlvSize(long jarg1, RsTlvItem jarg1_);
  public final static native void RsTlvItem_TlvClear(long jarg1, RsTlvItem jarg1_);
  public final static native void RsTlvItem_TlvShallowClear(long jarg1, RsTlvItem jarg1_);
  public final static native boolean RsTlvItem_SetTlv(long jarg1, RsTlvItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvItem_GetTlv(long jarg1, RsTlvItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvItem_print(long jarg1, RsTlvItem jarg1_, long jarg2, int jarg3);
  public final static native long RsTlvItem_printBase(long jarg1, RsTlvItem jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long RsTlvItem_printEnd(long jarg1, RsTlvItem jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long printIndent(long jarg1, int jarg2);
  public final static native long new_RsTlvBinaryData__SWIG_0(int jarg1);
  public final static native long new_RsTlvBinaryData__SWIG_1(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void delete_RsTlvBinaryData(long jarg1);
  public final static native long RsTlvBinaryData_TlvSize(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void RsTlvBinaryData_TlvClear(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void RsTlvBinaryData_TlvShallowClear(long jarg1, RsTlvBinaryData jarg1_);
  public final static native boolean RsTlvBinaryData_SetTlv(long jarg1, RsTlvBinaryData jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvBinaryData_GetTlv(long jarg1, RsTlvBinaryData jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvBinaryData_print(long jarg1, RsTlvBinaryData jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTlvBinaryData_setBinData(long jarg1, RsTlvBinaryData jarg1_, long jarg2, long jarg3);
  public final static native void RsTlvBinaryData_tlvtype_set(long jarg1, RsTlvBinaryData jarg1_, int jarg2);
  public final static native int RsTlvBinaryData_tlvtype_get(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void RsTlvBinaryData_bin_len_set(long jarg1, RsTlvBinaryData jarg1_, long jarg2);
  public final static native long RsTlvBinaryData_bin_len_get(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void RsTlvBinaryData_bin_data_set(long jarg1, RsTlvBinaryData jarg1_, long jarg2);
  public final static native long RsTlvBinaryData_bin_data_get(long jarg1, RsTlvBinaryData jarg1_);
  public final static native long new_RsTlvStringSet(int jarg1);
  public final static native void delete_RsTlvStringSet(long jarg1);
  public final static native long RsTlvStringSet_TlvSize(long jarg1, RsTlvStringSet jarg1_);
  public final static native void RsTlvStringSet_TlvClear(long jarg1, RsTlvStringSet jarg1_);
  public final static native boolean RsTlvStringSet_SetTlv(long jarg1, RsTlvStringSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvStringSet_GetTlv(long jarg1, RsTlvStringSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvStringSet_print(long jarg1, RsTlvStringSet jarg1_, long jarg2, int jarg3);
  public final static native long RsTlvStringSet_printHex(long jarg1, RsTlvStringSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvStringSet_mType_set(long jarg1, RsTlvStringSet jarg1_, int jarg2);
  public final static native int RsTlvStringSet_mType_get(long jarg1, RsTlvStringSet jarg1_);
  public final static native void RsTlvStringSet_ids_set(long jarg1, RsTlvStringSet jarg1_, long jarg2);
  public final static native long RsTlvStringSet_ids_get(long jarg1, RsTlvStringSet jarg1_);
  public final static native long new_RsTlvPeerIdSet();
  public final static native void delete_RsTlvPeerIdSet(long jarg1);
  public final static native long new_RsTlvHashSet();
  public final static native void delete_RsTlvHashSet(long jarg1);
  public final static native long new_RsTlvServiceIdSet();
  public final static native void delete_RsTlvServiceIdSet(long jarg1);
  public final static native long RsTlvServiceIdSet_TlvSize(long jarg1, RsTlvServiceIdSet jarg1_);
  public final static native void RsTlvServiceIdSet_TlvClear(long jarg1, RsTlvServiceIdSet jarg1_);
  public final static native boolean RsTlvServiceIdSet_SetTlv(long jarg1, RsTlvServiceIdSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvServiceIdSet_GetTlv(long jarg1, RsTlvServiceIdSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvServiceIdSet_print(long jarg1, RsTlvServiceIdSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvServiceIdSet_ids_set(long jarg1, RsTlvServiceIdSet jarg1_, long jarg2);
  public final static native long RsTlvServiceIdSet_ids_get(long jarg1, RsTlvServiceIdSet jarg1_);
  public final static native long new_RsTlvFileItem();
  public final static native void delete_RsTlvFileItem(long jarg1);
  public final static native long RsTlvFileItem_TlvSize(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_TlvClear(long jarg1, RsTlvFileItem jarg1_);
  public final static native boolean RsTlvFileItem_SetTlv(long jarg1, RsTlvFileItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvFileItem_GetTlv(long jarg1, RsTlvFileItem jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvFileItem_print(long jarg1, RsTlvFileItem jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvFileItem_filesize_set(long jarg1, RsTlvFileItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsTlvFileItem_filesize_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_hash_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_hash_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_name_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_name_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_path_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_path_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_pop_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_pop_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_age_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_age_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_piecesize_set(long jarg1, RsTlvFileItem jarg1_, long jarg2);
  public final static native long RsTlvFileItem_piecesize_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native void RsTlvFileItem_hashset_set(long jarg1, RsTlvFileItem jarg1_, long jarg2, RsTlvHashSet jarg2_);
  public final static native long RsTlvFileItem_hashset_get(long jarg1, RsTlvFileItem jarg1_);
  public final static native long new_RsTlvFileSet();
  public final static native void delete_RsTlvFileSet(long jarg1);
  public final static native long RsTlvFileSet_TlvSize(long jarg1, RsTlvFileSet jarg1_);
  public final static native void RsTlvFileSet_TlvClear(long jarg1, RsTlvFileSet jarg1_);
  public final static native boolean RsTlvFileSet_SetTlv(long jarg1, RsTlvFileSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvFileSet_GetTlv(long jarg1, RsTlvFileSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvFileSet_print(long jarg1, RsTlvFileSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvFileSet_items_set(long jarg1, RsTlvFileSet jarg1_, long jarg2);
  public final static native long RsTlvFileSet_items_get(long jarg1, RsTlvFileSet jarg1_);
  public final static native void RsTlvFileSet_title_set(long jarg1, RsTlvFileSet jarg1_, long jarg2);
  public final static native long RsTlvFileSet_title_get(long jarg1, RsTlvFileSet jarg1_);
  public final static native void RsTlvFileSet_comment_set(long jarg1, RsTlvFileSet jarg1_, long jarg2);
  public final static native long RsTlvFileSet_comment_get(long jarg1, RsTlvFileSet jarg1_);
  public final static native long new_RsTlvFileData();
  public final static native void delete_RsTlvFileData(long jarg1);
  public final static native long RsTlvFileData_TlvSize(long jarg1, RsTlvFileData jarg1_);
  public final static native void RsTlvFileData_TlvClear(long jarg1, RsTlvFileData jarg1_);
  public final static native boolean RsTlvFileData_SetTlv(long jarg1, RsTlvFileData jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvFileData_GetTlv(long jarg1, RsTlvFileData jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvFileData_print(long jarg1, RsTlvFileData jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvFileData_file_set(long jarg1, RsTlvFileData jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsTlvFileData_file_get(long jarg1, RsTlvFileData jarg1_);
  public final static native void RsTlvFileData_file_offset_set(long jarg1, RsTlvFileData jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsTlvFileData_file_offset_get(long jarg1, RsTlvFileData jarg1_);
  public final static native void RsTlvFileData_binData_set(long jarg1, RsTlvFileData jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsTlvFileData_binData_get(long jarg1, RsTlvFileData jarg1_);
  public final static native long new_RsTlvKeyValue__SWIG_0();
  public final static native long new_RsTlvKeyValue__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsTlvKeyValue(long jarg1);
  public final static native long RsTlvKeyValue_TlvSize(long jarg1, RsTlvKeyValue jarg1_);
  public final static native void RsTlvKeyValue_TlvClear(long jarg1, RsTlvKeyValue jarg1_);
  public final static native boolean RsTlvKeyValue_SetTlv(long jarg1, RsTlvKeyValue jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeyValue_GetTlv(long jarg1, RsTlvKeyValue jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeyValue_print(long jarg1, RsTlvKeyValue jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeyValue_key_set(long jarg1, RsTlvKeyValue jarg1_, long jarg2);
  public final static native long RsTlvKeyValue_key_get(long jarg1, RsTlvKeyValue jarg1_);
  public final static native void RsTlvKeyValue_value_set(long jarg1, RsTlvKeyValue jarg1_, long jarg2);
  public final static native long RsTlvKeyValue_value_get(long jarg1, RsTlvKeyValue jarg1_);
  public final static native long new_RsTlvKeyValueSet();
  public final static native void delete_RsTlvKeyValueSet(long jarg1);
  public final static native long RsTlvKeyValueSet_TlvSize(long jarg1, RsTlvKeyValueSet jarg1_);
  public final static native void RsTlvKeyValueSet_TlvClear(long jarg1, RsTlvKeyValueSet jarg1_);
  public final static native boolean RsTlvKeyValueSet_SetTlv(long jarg1, RsTlvKeyValueSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeyValueSet_GetTlv(long jarg1, RsTlvKeyValueSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeyValueSet_print(long jarg1, RsTlvKeyValueSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeyValueSet_pairs_set(long jarg1, RsTlvKeyValueSet jarg1_, long jarg2);
  public final static native long RsTlvKeyValueSet_pairs_get(long jarg1, RsTlvKeyValueSet jarg1_);
  public final static native long new_RsTlvImage__SWIG_0();
  public final static native long new_RsTlvImage__SWIG_1(long jarg1, RsTlvImage jarg1_);
  public final static native void delete_RsTlvImage(long jarg1);
  public final static native long RsTlvImage_TlvSize(long jarg1, RsTlvImage jarg1_);
  public final static native void RsTlvImage_TlvClear(long jarg1, RsTlvImage jarg1_);
  public final static native boolean RsTlvImage_SetTlv(long jarg1, RsTlvImage jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvImage_GetTlv(long jarg1, RsTlvImage jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvImage_print(long jarg1, RsTlvImage jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvImage_image_type_set(long jarg1, RsTlvImage jarg1_, long jarg2);
  public final static native long RsTlvImage_image_type_get(long jarg1, RsTlvImage jarg1_);
  public final static native void RsTlvImage_binData_set(long jarg1, RsTlvImage jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsTlvImage_binData_get(long jarg1, RsTlvImage jarg1_);
  public final static native long new_RsTlvIpAddressInfo();
  public final static native void delete_RsTlvIpAddressInfo(long jarg1);
  public final static native long RsTlvIpAddressInfo_TlvSize(long jarg1, RsTlvIpAddressInfo jarg1_);
  public final static native void RsTlvIpAddressInfo_TlvClear(long jarg1, RsTlvIpAddressInfo jarg1_);
  public final static native boolean RsTlvIpAddressInfo_SetTlv(long jarg1, RsTlvIpAddressInfo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvIpAddressInfo_GetTlv(long jarg1, RsTlvIpAddressInfo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvIpAddressInfo_print(long jarg1, RsTlvIpAddressInfo jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvIpAddressInfo_addr_set(long jarg1, RsTlvIpAddressInfo jarg1_, long jarg2);
  public final static native long RsTlvIpAddressInfo_addr_get(long jarg1, RsTlvIpAddressInfo jarg1_);
  public final static native void RsTlvIpAddressInfo_seenTime_set(long jarg1, RsTlvIpAddressInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsTlvIpAddressInfo_seenTime_get(long jarg1, RsTlvIpAddressInfo jarg1_);
  public final static native void RsTlvIpAddressInfo_source_set(long jarg1, RsTlvIpAddressInfo jarg1_, long jarg2);
  public final static native long RsTlvIpAddressInfo_source_get(long jarg1, RsTlvIpAddressInfo jarg1_);
  public final static native long new_RsTlvIpAddrSet();
  public final static native void delete_RsTlvIpAddrSet(long jarg1);
  public final static native long RsTlvIpAddrSet_TlvSize(long jarg1, RsTlvIpAddrSet jarg1_);
  public final static native void RsTlvIpAddrSet_TlvClear(long jarg1, RsTlvIpAddrSet jarg1_);
  public final static native boolean RsTlvIpAddrSet_SetTlv(long jarg1, RsTlvIpAddrSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvIpAddrSet_GetTlv(long jarg1, RsTlvIpAddrSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvIpAddrSet_print(long jarg1, RsTlvIpAddrSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvIpAddrSet_addrs_set(long jarg1, RsTlvIpAddrSet jarg1_, long jarg2);
  public final static native long RsTlvIpAddrSet_addrs_get(long jarg1, RsTlvIpAddrSet jarg1_);
  public final static native int MAX_ADDRESS_LIST_SIZE_get();
  public final static native boolean pqiIpAddress_sameAddress(long jarg1, pqiIpAddress jarg1_, long jarg2, pqiIpAddress jarg2_);
  public final static native boolean pqiIpAddress_validAddress(long jarg1, pqiIpAddress jarg1_);
  public final static native void pqiIpAddress_mAddr_set(long jarg1, pqiIpAddress jarg1_, long jarg2);
  public final static native long pqiIpAddress_mAddr_get(long jarg1, pqiIpAddress jarg1_);
  public final static native void pqiIpAddress_mSeenTime_set(long jarg1, pqiIpAddress jarg1_, long jarg2);
  public final static native long pqiIpAddress_mSeenTime_get(long jarg1, pqiIpAddress jarg1_);
  public final static native void pqiIpAddress_mSrc_set(long jarg1, pqiIpAddress jarg1_, long jarg2);
  public final static native long pqiIpAddress_mSrc_get(long jarg1, pqiIpAddress jarg1_);
  public final static native long new_pqiIpAddress();
  public final static native void delete_pqiIpAddress(long jarg1);
  public final static native boolean pqiIpAddrList_updateIpAddressList(long jarg1, pqiIpAddrList jarg1_, long jarg2, pqiIpAddress jarg2_);
  public final static native void pqiIpAddrList_printIpAddressList(long jarg1, pqiIpAddrList jarg1_, long jarg2);
  public final static native void pqiIpAddrList_extractFromTlv(long jarg1, pqiIpAddrList jarg1_, long jarg2, RsTlvIpAddrSet jarg2_);
  public final static native void pqiIpAddrList_loadTlv(long jarg1, pqiIpAddrList jarg1_, long jarg2, RsTlvIpAddrSet jarg2_);
  public final static native void pqiIpAddrList_mAddrs_set(long jarg1, pqiIpAddrList jarg1_, long jarg2);
  public final static native long pqiIpAddrList_mAddrs_get(long jarg1, pqiIpAddrList jarg1_);
  public final static native long new_pqiIpAddrList();
  public final static native void delete_pqiIpAddrList(long jarg1);
  public final static native boolean pqiIpAddrSet_updateLocalAddrs(long jarg1, pqiIpAddrSet jarg1_, long jarg2, pqiIpAddress jarg2_);
  public final static native boolean pqiIpAddrSet_updateExtAddrs(long jarg1, pqiIpAddrSet jarg1_, long jarg2, pqiIpAddress jarg2_);
  public final static native boolean pqiIpAddrSet_updateAddrs(long jarg1, pqiIpAddrSet jarg1_, long jarg2, pqiIpAddrSet jarg2_);
  public final static native void pqiIpAddrSet_printAddrs(long jarg1, pqiIpAddrSet jarg1_, long jarg2);
  public final static native void pqiIpAddrSet_mLocal_set(long jarg1, pqiIpAddrSet jarg1_, long jarg2, pqiIpAddrList jarg2_);
  public final static native long pqiIpAddrSet_mLocal_get(long jarg1, pqiIpAddrSet jarg1_);
  public final static native void pqiIpAddrSet_mExt_set(long jarg1, pqiIpAddrSet jarg1_, long jarg2, pqiIpAddrList jarg2_);
  public final static native long pqiIpAddrSet_mExt_get(long jarg1, pqiIpAddrSet jarg1_);
  public final static native long new_pqiIpAddrSet();
  public final static native void delete_pqiIpAddrSet(long jarg1);
  public final static native long RS_PEER_STATE_MASK_get();
  public final static native long RS_PEER_ACTION_MASK_get();
  public final static native long RS_PEER_S_FRIEND_get();
  public final static native long RS_PEER_S_ONLINE_get();
  public final static native long RS_PEER_S_CONNECTED_get();
  public final static native long RS_PEER_S_UNREACHABLE_get();
  public final static native long RS_PEER_NEW_get();
  public final static native long RS_PEER_ONLINE_get();
  public final static native long RS_PEER_CONNECTED_get();
  public final static native long RS_PEER_MOVED_get();
  public final static native long RS_PEER_DISCONNECTED_get();
  public final static native long RS_PEER_CONNECT_REQ_get();
  public final static native long RS_STUN_ONLINE_get();
  public final static native long RS_STUN_FRIEND_get();
  public final static native long RS_STUN_FRIEND_OF_FRIEND_get();
  public final static native int RS_CONNECT_PASSIVE_get();
  public final static native int RS_CONNECT_ACTIVE_get();
  public final static native int RS_CB_DHT_get();
  public final static native int RS_CB_DISC_get();
  public final static native int RS_CB_PERSON_get();
  public final static native int RS_CB_PROXY_get();
  public final static native int RS_CB_FLAG_MASK_MODE_get();
  public final static native int RS_CB_FLAG_MASK_ORDER_get();
  public final static native int RS_CB_FLAG_MODE_TCP_get();
  public final static native int RS_CB_FLAG_MODE_UDP_DIRECT_get();
  public final static native int RS_CB_FLAG_MODE_UDP_PROXY_get();
  public final static native int RS_CB_FLAG_MODE_UDP_RELAY_get();
  public final static native int RS_CB_FLAG_ORDER_UNSPEC_get();
  public final static native int RS_CB_FLAG_ORDER_PASSIVE_get();
  public final static native int RS_CB_FLAG_ORDER_ACTIVE_get();
  public final static native int RSUDP_NUM_TOU_RECVERS_get();
  public final static native int RSUDP_TOU_RECVER_DIRECT_IDX_get();
  public final static native int RSUDP_TOU_RECVER_PROXY_IDX_get();
  public final static native int RSUDP_TOU_RECVER_RELAY_IDX_get();
  public final static native void pqipeer_id_set(long jarg1, pqipeer jarg1_, long jarg2);
  public final static native long pqipeer_id_get(long jarg1, pqipeer jarg1_);
  public final static native void pqipeer_name_set(long jarg1, pqipeer jarg1_, long jarg2);
  public final static native long pqipeer_name_get(long jarg1, pqipeer jarg1_);
  public final static native void pqipeer_state_set(long jarg1, pqipeer jarg1_, long jarg2);
  public final static native long pqipeer_state_get(long jarg1, pqipeer jarg1_);
  public final static native void pqipeer_actions_set(long jarg1, pqipeer jarg1_, long jarg2);
  public final static native long pqipeer_actions_get(long jarg1, pqipeer jarg1_);
  public final static native long new_pqipeer();
  public final static native void delete_pqipeer(long jarg1);
  public final static native void delete_pqiMonitor(long jarg1);
  public final static native void pqiMonitor_setLinkMgr(long jarg1, pqiMonitor jarg1_, long jarg2, p3LinkMgr jarg2_);
  public final static native void pqiMonitor_statusChange(long jarg1, pqiMonitor jarg1_, long jarg2);
  public final static native void delete_pqiConnectCb(long jarg1);
  public final static native void pqiConnectCb_peerStatus(long jarg1, pqiConnectCb jarg1_, long jarg2, long jarg3, pqiIpAddrSet jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native void pqiConnectCb_peerConnectRequest(long jarg1, pqiConnectCb jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native void delete_pqiConnectCbDummy(long jarg1);
  public final static native void pqiConnectCbDummy_peerStatus(long jarg1, pqiConnectCbDummy jarg1_, long jarg2, long jarg3, pqiIpAddrSet jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native void pqiConnectCbDummy_peerConnectRequest(long jarg1, pqiConnectCbDummy jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean pqiNetListener_resetListener(long jarg1, pqiNetListener jarg1_, long jarg2);
  public final static native void delete_pqiNetListener(long jarg1);
  public final static native void showSocketError(long jarg1);
  public final static native long socket_errorType(int jarg1);
  public final static native int sockaddr_cmp(long jarg1, long jarg2);
  public final static native int inaddr_cmp__SWIG_0(long jarg1, long jarg2);
  public final static native int inaddr_cmp__SWIG_1(long jarg1, long jarg2);
  public final static native boolean getPreferredInterface(long jarg1, long jarg2);
  public final static native boolean getLocalInterfaces(long jarg1, long jarg2);
  public final static native boolean isSameSubnet(long jarg1, long jarg2);
  public final static native boolean sameNet(long jarg1, long jarg2);
  public final static native long pqi_inet_netof(long jarg1);
  public final static native boolean LookupDNSAddr(long jarg1, long jarg2);
  public final static native int unix_close(int jarg1);
  public final static native int unix_socket(int jarg1, int jarg2, int jarg3);
  public final static native int unix_fcntl_nonblock(int jarg1);
  public final static native int unix_connect(int jarg1, long jarg2, long jarg3);
  public final static native int unix_getsockopt_error(int jarg1, long jarg2);
  public final static native void delete_pqiNetAssist(long jarg1);
  public final static native void pqiNetAssist_enable(long jarg1, pqiNetAssist jarg1_, boolean jarg2);
  public final static native void pqiNetAssist_shutdown(long jarg1, pqiNetAssist jarg1_);
  public final static native void pqiNetAssist_restart(long jarg1, pqiNetAssist jarg1_);
  public final static native boolean pqiNetAssist_getEnabled(long jarg1, pqiNetAssist jarg1_);
  public final static native boolean pqiNetAssist_getActive(long jarg1, pqiNetAssist jarg1_);
  public final static native int pqiNetAssist_tick(long jarg1, pqiNetAssist jarg1_);
  public final static native int PFP_TYPE_UDP_get();
  public final static native int PFP_TYPE_TCP_get();
  public final static native void PortForwardParams_fwdId_set(long jarg1, PortForwardParams jarg1_, long jarg2);
  public final static native long PortForwardParams_fwdId_get(long jarg1, PortForwardParams jarg1_);
  public final static native void PortForwardParams_status_set(long jarg1, PortForwardParams jarg1_, long jarg2);
  public final static native long PortForwardParams_status_get(long jarg1, PortForwardParams jarg1_);
  public final static native void PortForwardParams_typeFlags_set(long jarg1, PortForwardParams jarg1_, long jarg2);
  public final static native long PortForwardParams_typeFlags_get(long jarg1, PortForwardParams jarg1_);
  public final static native void PortForwardParams_intAddr_set(long jarg1, PortForwardParams jarg1_, long jarg2);
  public final static native long PortForwardParams_intAddr_get(long jarg1, PortForwardParams jarg1_);
  public final static native void PortForwardParams_extaddr_set(long jarg1, PortForwardParams jarg1_, long jarg2);
  public final static native long PortForwardParams_extaddr_get(long jarg1, PortForwardParams jarg1_);
  public final static native long new_PortForwardParams();
  public final static native void delete_PortForwardParams(long jarg1);
  public final static native void delete_pqiNetAssistFirewall(long jarg1);
  public final static native void pqiNetAssistFirewall_setInternalPort(long jarg1, pqiNetAssistFirewall jarg1_, int jarg2);
  public final static native void pqiNetAssistFirewall_setExternalPort(long jarg1, pqiNetAssistFirewall jarg1_, int jarg2);
  public final static native boolean pqiNetAssistFirewall_getInternalAddress(long jarg1, pqiNetAssistFirewall jarg1_, long jarg2);
  public final static native boolean pqiNetAssistFirewall_getExternalAddress(long jarg1, pqiNetAssistFirewall jarg1_, long jarg2);
  public final static native boolean pqiNetAssistFirewall_requestPortForward(long jarg1, pqiNetAssistFirewall jarg1_, long jarg2, PortForwardParams jarg2_);
  public final static native boolean pqiNetAssistFirewall_statusPortForward(long jarg1, pqiNetAssistFirewall jarg1_, long jarg2, long jarg3, PortForwardParams jarg3_);
  public final static native int PNASS_TYPE_BADPEER_get();
  public final static native int PNASS_REASON_UNKNOWN_get();
  public final static native void pqiNetAssistPeerShare_updatePeer(long jarg1, pqiNetAssistPeerShare jarg1_, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6);
  public final static native void delete_pqiNetAssistPeerShare(long jarg1);
  public final static native void delete_pqiAddrAssist(long jarg1);
  public final static native boolean pqiAddrAssist_getExternalAddr(long jarg1, pqiAddrAssist jarg1_, long jarg2, long jarg3);
  public final static native void pqiAddrAssist_setRefreshPeriod(long jarg1, pqiAddrAssist jarg1_, int jarg2);
  public final static native int pqiAddrAssist_tick(long jarg1, pqiAddrAssist jarg1_);
  public final static native int NETASSIST_KNOWN_PEER_OFFLINE_get();
  public final static native int NETASSIST_KNOWN_PEER_ONLINE_get();
  public final static native int NETASSIST_KNOWN_PEER_WHITELIST_get();
  public final static native int NETASSIST_KNOWN_PEER_FRIEND_get();
  public final static native int NETASSIST_KNOWN_PEER_FOF_get();
  public final static native int NETASSIST_KNOWN_PEER_RELAY_get();
  public final static native int NETASSIST_KNOWN_PEER_SELF_get();
  public final static native int NETASSIST_KNOWN_PEER_TYPE_MASK_get();
  public final static native boolean pqiNetAssistConnect_findPeer(long jarg1, pqiNetAssistConnect jarg1_, long jarg2);
  public final static native boolean pqiNetAssistConnect_dropPeer(long jarg1, pqiNetAssistConnect jarg1_, long jarg2);
  public final static native int pqiNetAssistConnect_addBadPeer(long jarg1, pqiNetAssistConnect jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int pqiNetAssistConnect_addKnownPeer(long jarg1, pqiNetAssistConnect jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void pqiNetAssistConnect_ConnectionFeedback(long jarg1, pqiNetAssistConnect jarg1_, long jarg2, int jarg3);
  public final static native boolean pqiNetAssistConnect_getPeerStatus(long jarg1, pqiNetAssistConnect jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean pqiNetAssistConnect_setAttachMode(long jarg1, pqiNetAssistConnect jarg1_, boolean jarg2);
  public final static native boolean pqiNetAssistConnect_getNetworkStats(long jarg1, pqiNetAssistConnect jarg1_, long jarg2, long jarg3);
  public final static native void delete_pqiNetAssistConnect(long jarg1);
  public final static native long new_RsMutex(long jarg1);
  public final static native void delete_RsMutex(long jarg1);
  public final static native void RsMutex_lock(long jarg1, RsMutex jarg1_);
  public final static native void RsMutex_unlock(long jarg1, RsMutex jarg1_);
  public final static native boolean RsMutex_trylock(long jarg1, RsMutex jarg1_);
  public final static native long new_RsStackMutex(long jarg1, RsMutex jarg1_);
  public final static native void delete_RsStackMutex(long jarg1);
  public final static native long createThread(long jarg1, RsThread jarg1_);
  public final static native void delete_RsThread(long jarg1);
  public final static native void RsThread_start(long jarg1, RsThread jarg1_);
  public final static native void RsThread_run(long jarg1, RsThread jarg1_);
  public final static native void RsThread_join(long jarg1, RsThread jarg1_);
  public final static native void RsThread_stop(long jarg1, RsThread jarg1_);
  public final static native boolean RsThread_isRunning(long jarg1, RsThread jarg1_);
  public final static native void RsThread_mTid_set(long jarg1, RsThread jarg1_, long jarg2);
  public final static native long RsThread_mTid_get(long jarg1, RsThread jarg1_);
  public final static native void RsThread_mMutex_set(long jarg1, RsThread jarg1_, long jarg2, RsMutex jarg2_);
  public final static native long RsThread_mMutex_get(long jarg1, RsThread jarg1_);
  public final static native void delete_RsQueueThread(long jarg1);
  public final static native void RsQueueThread_run(long jarg1, RsQueueThread jarg1_);
  public final static native int MAX_SMALL_OBJECT_SIZE_get();
  public final static native short BLOCKS_PER_CHUNK_get();
  public final static native void Chunk_init(long jarg1, Chunk jarg1_, long jarg2, short jarg3);
  public final static native void Chunk_free(long jarg1, Chunk jarg1_);
  public final static native long Chunk_allocate(long jarg1, Chunk jarg1_, long jarg2);
  public final static native void Chunk_deallocate(long jarg1, Chunk jarg1_, long jarg2, long jarg3);
  public final static native void Chunk__data_set(long jarg1, Chunk jarg1_, long jarg2);
  public final static native long Chunk__data_get(long jarg1, Chunk jarg1_);
  public final static native void Chunk__firstAvailableBlock_set(long jarg1, Chunk jarg1_, short jarg2);
  public final static native short Chunk__firstAvailableBlock_get(long jarg1, Chunk jarg1_);
  public final static native void Chunk__blocksAvailable_set(long jarg1, Chunk jarg1_, short jarg2);
  public final static native short Chunk__blocksAvailable_get(long jarg1, Chunk jarg1_);
  public final static native void Chunk_printStatistics(long jarg1, Chunk jarg1_, int jarg2);
  public final static native long new_Chunk();
  public final static native void delete_Chunk(long jarg1);
  public final static native long new_FixedAllocator(long jarg1);
  public final static native void delete_FixedAllocator(long jarg1);
  public final static native long FixedAllocator_allocate(long jarg1, FixedAllocator jarg1_);
  public final static native void FixedAllocator_deallocate(long jarg1, FixedAllocator jarg1_, long jarg2);
  public final static native long FixedAllocator_blockSize(long jarg1, FixedAllocator jarg1_);
  public final static native boolean FixedAllocator_chunkOwnsPointer(long jarg1, FixedAllocator jarg1_, long jarg2, Chunk jarg2_, long jarg3);
  public final static native void FixedAllocator_printStatistics(long jarg1, FixedAllocator jarg1_);
  public final static native long new_SmallObjectAllocator(long jarg1);
  public final static native void delete_SmallObjectAllocator(long jarg1);
  public final static native long SmallObjectAllocator_allocate(long jarg1, SmallObjectAllocator jarg1_, long jarg2);
  public final static native void SmallObjectAllocator_deallocate(long jarg1, SmallObjectAllocator jarg1_, long jarg2, long jarg3);
  public final static native void SmallObjectAllocator_printStatistics(long jarg1, SmallObjectAllocator jarg1_);
  public final static native void SmallObjectAllocator__active_set(long jarg1, SmallObjectAllocator jarg1_, boolean jarg2);
  public final static native boolean SmallObjectAllocator__active_get(long jarg1, SmallObjectAllocator jarg1_);
  public final static native void SmallObject_printStatistics();
  public final static native void delete_SmallObject(long jarg1);
  public final static native long new_SmallObject();
  public final static native void printStatistics();
  public final static native short QOS_PRIORITY_UNKNOWN_get();
  public final static native short QOS_PRIORITY_DEFAULT_get();
  public final static native short QOS_PRIORITY_TOP_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_OPEN_TUNNEL_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_TUNNEL_OK_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_SEARCH_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_CRC_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_CHUNK_CRC_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_MAP_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_SEARCH_RESULT_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_DATA_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_CRC_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_CHUNK_CRC_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FILE_MAP_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_GENERIC_ITEM_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_FORWARD_FILE_DATA_get();
  public final static native short QOS_PRIORITY_RS_TURTLE_GENERIC_DATA_get();
  public final static native short QOS_PRIORITY_RS_FILE_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_FILE_CRC_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_CHUNK_CRC_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_FILE_MAP_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_CACHE_REQUEST_get();
  public final static native short QOS_PRIORITY_RS_FILE_DATA_get();
  public final static native short QOS_PRIORITY_RS_FILE_CRC_get();
  public final static native short QOS_PRIORITY_RS_CHUNK_CRC_get();
  public final static native short QOS_PRIORITY_RS_FILE_MAP_get();
  public final static native short QOS_PRIORITY_RS_CACHE_ITEM_get();
  public final static native short QOS_PRIORITY_RS_DISC_HEART_BEAT_get();
  public final static native short QOS_PRIORITY_RS_DISC_ASK_INFO_get();
  public final static native short QOS_PRIORITY_RS_DISC_REPLY_get();
  public final static native short QOS_PRIORITY_RS_DISC_VERSION_get();
  public final static native short QOS_PRIORITY_RS_CHAT_ITEM_get();
  public final static native short QOS_PRIORITY_RS_CHAT_AVATAR_ITEM_get();
  public final static native short QOS_PRIORITY_RS_MSG_ITEM_get();
  public final static native short QOS_PRIORITY_RS_STATUS_ITEM_get();
  public final static native short QOS_PRIORITY_RS_VOIP_PING_get();
  public final static native short QOS_PRIORITY_RS_BANLIST_ITEM_get();
  public final static native short QOS_PRIORITY_RS_BWCTRL_ALLOWED_ITEM_get();
  public final static native short QOS_PRIORITY_RS_DSDV_ROUTE_get();
  public final static native short QOS_PRIORITY_RS_DSDV_DATA_get();
  public final static native short QOS_PRIORITY_RS_GXS_NET_get();
  public final static native short RS_PKT_VERSION1_get();
  public final static native short RS_PKT_VERSION_SERVICE_get();
  public final static native short RS_PKT_CLASS_BASE_get();
  public final static native short RS_PKT_CLASS_CONFIG_get();
  public final static native short RS_PKT_SUBTYPE_DEFAULT_get();
  public final static native void delete_RsItem(long jarg1);
  public final static native void RsItem_clear(long jarg1, RsItem jarg1_);
  public final static native long RsItem_print__SWIG_0(long jarg1, RsItem jarg1_, long jarg2, int jarg3);
  public final static native long RsItem_print__SWIG_1(long jarg1, RsItem jarg1_, long jarg2);
  public final static native void RsItem_print_string__SWIG_0(long jarg1, RsItem jarg1_, long jarg2, int jarg3);
  public final static native void RsItem_print_string__SWIG_1(long jarg1, RsItem jarg1_, long jarg2);
  public final static native long RsItem_PeerId__SWIG_0(long jarg1, RsItem jarg1_);
  public final static native void RsItem_PeerId__SWIG_1(long jarg1, RsItem jarg1_, long jarg2);
  public final static native long RsItem_PacketId(long jarg1, RsItem jarg1_);
  public final static native short RsItem_PacketVersion(long jarg1, RsItem jarg1_);
  public final static native short RsItem_PacketClass(long jarg1, RsItem jarg1_);
  public final static native short RsItem_PacketType(long jarg1, RsItem jarg1_);
  public final static native short RsItem_PacketSubType(long jarg1, RsItem jarg1_);
  public final static native int RsItem_PacketService(long jarg1, RsItem jarg1_);
  public final static native short RsItem_priority_level(long jarg1, RsItem jarg1_);
  public final static native void RsItem_setPriorityLevel(long jarg1, RsItem jarg1_, short jarg2);
  public final static native long new_RsSerialType__SWIG_0(long jarg1);
  public final static native long new_RsSerialType__SWIG_1(short jarg1, short jarg2, short jarg3);
  public final static native long new_RsSerialType__SWIG_2(short jarg1, int jarg2);
  public final static native void delete_RsSerialType(long jarg1);
  public final static native long RsSerialType_size(long jarg1, RsSerialType jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsSerialType_serialise(long jarg1, RsSerialType jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsSerialType_deserialise(long jarg1, RsSerialType jarg1_, long jarg2, long jarg3);
  public final static native long RsSerialType_PacketId(long jarg1, RsSerialType jarg1_);
  public final static native long new_RsSerialiser();
  public final static native void delete_RsSerialiser(long jarg1);
  public final static native boolean RsSerialiser_addSerialType(long jarg1, RsSerialiser jarg1_, long jarg2, RsSerialType jarg2_);
  public final static native long RsSerialiser_size(long jarg1, RsSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsSerialiser_serialise(long jarg1, RsSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsSerialiser_deserialise(long jarg1, RsSerialiser jarg1_, long jarg2, long jarg3);
  public final static native boolean setRsItemHeader(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long getRsItemId(long jarg1);
  public final static native long getRsItemSize(long jarg1);
  public final static native short getRsItemVersion(long jarg1);
  public final static native short getRsItemClass(long jarg1);
  public final static native short getRsItemType(long jarg1);
  public final static native short getRsItemSubType(long jarg1);
  public final static native int getRsItemService(long jarg1);
  public final static native long getRsPktBaseSize();
  public final static native long getRsPktMaxSize();
  public final static native long printRsItemBase(long jarg1, long jarg2, int jarg3);
  public final static native long printRsItemEnd(long jarg1, long jarg2, int jarg3);
  public final static native long new_RsRawItem(long jarg1, long jarg2);
  public final static native void delete_RsRawItem(long jarg1);
  public final static native long RsRawItem_getRawLength(long jarg1, RsRawItem jarg1_);
  public final static native long RsRawItem_getRawData(long jarg1, RsRawItem jarg1_);
  public final static native void RsRawItem_clear(long jarg1, RsRawItem jarg1_);
  public final static native long RsRawItem_print__SWIG_0(long jarg1, RsRawItem jarg1_, long jarg2, int jarg3);
  public final static native long RsRawItem_print__SWIG_1(long jarg1, RsRawItem jarg1_, long jarg2);
  public final static native int PQI_MIN_PORT_get();
  public final static native int PQI_MAX_PORT_get();
  public final static native int PQI_DEFAULT_PORT_get();
  public final static native int getPQIsearchId();
  public final static native int fixme(String jarg1, int jarg2);
  public final static native long new_RsBwRates();
  public final static native void RsBwRates_mRateIn_set(long jarg1, RsBwRates jarg1_, float jarg2);
  public final static native float RsBwRates_mRateIn_get(long jarg1, RsBwRates jarg1_);
  public final static native void RsBwRates_mRateOut_set(long jarg1, RsBwRates jarg1_, float jarg2);
  public final static native float RsBwRates_mRateOut_get(long jarg1, RsBwRates jarg1_);
  public final static native void RsBwRates_mMaxRateIn_set(long jarg1, RsBwRates jarg1_, float jarg2);
  public final static native float RsBwRates_mMaxRateIn_get(long jarg1, RsBwRates jarg1_);
  public final static native void RsBwRates_mMaxRateOut_set(long jarg1, RsBwRates jarg1_, float jarg2);
  public final static native float RsBwRates_mMaxRateOut_get(long jarg1, RsBwRates jarg1_);
  public final static native void RsBwRates_mQueueIn_set(long jarg1, RsBwRates jarg1_, int jarg2);
  public final static native int RsBwRates_mQueueIn_get(long jarg1, RsBwRates jarg1_);
  public final static native void RsBwRates_mQueueOut_set(long jarg1, RsBwRates jarg1_, int jarg2);
  public final static native int RsBwRates_mQueueOut_get(long jarg1, RsBwRates jarg1_);
  public final static native void delete_RsBwRates(long jarg1);
  public final static native long new_RateInterface();
  public final static native void delete_RateInterface(long jarg1);
  public final static native void RateInterface_getRates(long jarg1, RateInterface jarg1_, long jarg2, RsBwRates jarg2_);
  public final static native int RateInterface_getQueueSize(long jarg1, RateInterface jarg1_, boolean jarg2);
  public final static native float RateInterface_getRate(long jarg1, RateInterface jarg1_, boolean jarg2);
  public final static native float RateInterface_getMaxRate(long jarg1, RateInterface jarg1_, boolean jarg2);
  public final static native void RateInterface_setMaxRate(long jarg1, RateInterface jarg1_, boolean jarg2, float jarg3);
  public final static native void RateInterface_setRateCap(long jarg1, RateInterface jarg1_, float jarg2, float jarg3);
  public final static native void delete_PQInterface(long jarg1);
  public final static native int PQInterface_SendItem__SWIG_0(long jarg1, PQInterface jarg1_, long jarg2, RsItem jarg2_);
  public final static native int PQInterface_SendItem__SWIG_1(long jarg1, PQInterface jarg1_, long jarg2, RsItem jarg2_, long jarg3);
  public final static native boolean PQInterface_getCryptoParams(long jarg1, PQInterface jarg1_, long jarg2, RsPeerCryptoParams jarg2_);
  public final static native long PQInterface_GetItem(long jarg1, PQInterface jarg1_);
  public final static native int PQInterface_tick(long jarg1, PQInterface jarg1_);
  public final static native int PQInterface_status(long jarg1, PQInterface jarg1_);
  public final static native long PQInterface_PeerId(long jarg1, PQInterface jarg1_);
  public final static native int PQInterface_notifyEvent(long jarg1, PQInterface jarg1_, long jarg2, NetInterface jarg2_, int jarg3);
  public final static native long PQI_CONNECT_TCP_get();
  public final static native long PQI_CONNECT_UDP_get();
  public final static native long PQI_CONNECT_TUNNEL_get();
  public final static native int BIN_FLAGS_NO_CLOSE_get();
  public final static native int BIN_FLAGS_READABLE_get();
  public final static native int BIN_FLAGS_WRITEABLE_get();
  public final static native int BIN_FLAGS_NO_DELETE_get();
  public final static native int BIN_FLAGS_HASH_DATA_get();
  public final static native void delete_BinInterface(long jarg1);
  public final static native int BinInterface_tick(long jarg1, BinInterface jarg1_);
  public final static native int BinInterface_senddata(long jarg1, BinInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinInterface_readdata(long jarg1, BinInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinInterface_netstatus(long jarg1, BinInterface jarg1_);
  public final static native int BinInterface_isactive(long jarg1, BinInterface jarg1_);
  public final static native boolean BinInterface_moretoread(long jarg1, BinInterface jarg1_);
  public final static native boolean BinInterface_cansend(long jarg1, BinInterface jarg1_);
  public final static native int BinInterface_close(long jarg1, BinInterface jarg1_);
  public final static native long BinInterface_gethash(long jarg1, BinInterface jarg1_);
  public final static native java.math.BigInteger BinInterface_bytecount(long jarg1, BinInterface jarg1_);
  public final static native boolean BinInterface_bandwidthLimited(long jarg1, BinInterface jarg1_);
  public final static native int NET_CONNECT_RECEIVED_get();
  public final static native int NET_CONNECT_SUCCESS_get();
  public final static native int NET_CONNECT_UNREACHABLE_get();
  public final static native int NET_CONNECT_FIREWALLED_get();
  public final static native int NET_CONNECT_FAILED_get();
  public final static native long NET_PARAM_CONNECT_DELAY_get();
  public final static native long NET_PARAM_CONNECT_PERIOD_get();
  public final static native long NET_PARAM_CONNECT_TIMEOUT_get();
  public final static native long NET_PARAM_CONNECT_FLAGS_get();
  public final static native long NET_PARAM_CONNECT_BANDWIDTH_get();
  public final static native long NET_PARAM_CONNECT_PROXY_get();
  public final static native long NET_PARAM_CONNECT_SOURCE_get();
  public final static native void delete_NetInterface(long jarg1);
  public final static native int NetInterface_connect(long jarg1, NetInterface jarg1_, long jarg2);
  public final static native int NetInterface_listen(long jarg1, NetInterface jarg1_);
  public final static native int NetInterface_stoplistening(long jarg1, NetInterface jarg1_);
  public final static native int NetInterface_disconnect(long jarg1, NetInterface jarg1_);
  public final static native int NetInterface_reset(long jarg1, NetInterface jarg1_);
  public final static native long NetInterface_PeerId(long jarg1, NetInterface jarg1_);
  public final static native int NetInterface_getConnectAddress(long jarg1, NetInterface jarg1_, long jarg2);
  public final static native boolean NetInterface_connect_parameter(long jarg1, NetInterface jarg1_, long jarg2, long jarg3);
  public final static native boolean NetInterface_connect_additional_address(long jarg1, NetInterface jarg1_, long jarg2, long jarg3);
  public final static native void delete_NetBinInterface(long jarg1);
  public final static native int CHAN_SIGN_SIZE_get();
  public final static native int CERTSIGNLEN_get();
  public final static native int PQI_PEERID_LENGTH_get();
  public final static native long new_Indicator__SWIG_0(int jarg1);
  public final static native long new_Indicator__SWIG_1();
  public final static native void Indicator_IndicateChanged(long jarg1, Indicator jarg1_);
  public final static native boolean Indicator_Changed__SWIG_0(long jarg1, Indicator jarg1_, int jarg2);
  public final static native boolean Indicator_Changed__SWIG_1(long jarg1, Indicator jarg1_);
  public final static native void delete_Indicator(long jarg1);
  public final static native boolean ConvertUtf8ToUtf16(long jarg1, long jarg2);
  public final static native boolean ConvertUtf16ToUtf8(long jarg1, long jarg2);
  public final static native String INT64FMT_get();
  public final static native String UINT64FMT_get();
  public final static native int rs_sprintf_args(long jarg1, String jarg2, long jarg3);
  public final static native int rs_sprintf(long jarg1, String jarg2);
  public final static native int rs_sprintf_append_args(long jarg1, String jarg2, long jarg3);
  public final static native int rs_sprintf_append(long jarg1, String jarg2);
  public final static native void stringToUpperCase(long jarg1, long jarg2);
  public final static native void stringToLowerCase(long jarg1, long jarg2);
  public final static native int FLAGS_TAG_TRANSFER_REQS_get();
  public final static native int FLAGS_TAG_FILE_STORAGE_get();
  public final static native int FLAGS_TAG_FILE_SEARCH_get();
  public final static native int FLAGS_TAG_SERVICE_PERM_get();
  public final static native int FLAGS_TAG_SERVICE_CHAT_get();
  public final static native long FT_STATE_FAILED_get();
  public final static native long FT_STATE_OKAY_get();
  public final static native long FT_STATE_WAITING_get();
  public final static native long FT_STATE_DOWNLOADING_get();
  public final static native long FT_STATE_COMPLETE_get();
  public final static native long FT_STATE_QUEUED_get();
  public final static native long FT_STATE_PAUSED_get();
  public final static native long FT_STATE_CHECKING_HASH_get();
  public final static native long RS_PARTIALS_DIRECTORY_get();
  public final static native long RS_DOWNLOAD_DIRECTORY_get();
  public final static native long RS_CONFIG_DIRECTORY_get();
  public final static native long RS_PGP_DIRECTORY_get();
  public final static native long RS_DIRECTORY_COUNT_get();
  public final static native long new_Sha1CheckSum__SWIG_0();
  public final static native long new_Sha1CheckSum__SWIG_1(long jarg1);
  public final static native long new_Sha1CheckSum__SWIG_2(long jarg1);
  public final static native long Sha1CheckSum_toStdString(long jarg1, Sha1CheckSum jarg1_);
  public final static native void Sha1CheckSum_fourbytes_set(long jarg1, Sha1CheckSum jarg1_, long jarg2);
  public final static native long Sha1CheckSum_fourbytes_get(long jarg1, Sha1CheckSum jarg1_);
  public final static native void delete_Sha1CheckSum(long jarg1);
  public final static native void TransferInfo_peerId_set(long jarg1, TransferInfo jarg1_, long jarg2);
  public final static native long TransferInfo_peerId_get(long jarg1, TransferInfo jarg1_);
  public final static native void TransferInfo_name_set(long jarg1, TransferInfo jarg1_, long jarg2);
  public final static native long TransferInfo_name_get(long jarg1, TransferInfo jarg1_);
  public final static native void TransferInfo_tfRate_set(long jarg1, TransferInfo jarg1_, double jarg2);
  public final static native double TransferInfo_tfRate_get(long jarg1, TransferInfo jarg1_);
  public final static native void TransferInfo_status_set(long jarg1, TransferInfo jarg1_, int jarg2);
  public final static native int TransferInfo_status_get(long jarg1, TransferInfo jarg1_);
  public final static native void TransferInfo_transfered_set(long jarg1, TransferInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger TransferInfo_transfered_get(long jarg1, TransferInfo jarg1_);
  public final static native long new_TransferInfo();
  public final static native void delete_TransferInfo(long jarg1);
  public final static native int QUEUE_TOP_get();
  public final static native int QUEUE_UP_get();
  public final static native int QUEUE_DOWN_get();
  public final static native int QUEUE_BOTTOM_get();
  public final static native int SPEED_LOW_get();
  public final static native int SPEED_NORMAL_get();
  public final static native int SPEED_HIGH_get();
  public final static native long TypeExt_get();
  public final static native long TypeName_get();
  public final static native long TypeHash_get();
  public final static native long TypeSize_get();
  public final static native int OpContains_get();
  public final static native int OpExactMatch_get();
  public final static native int OpLessThan_get();
  public final static native int OpGreaterThan_get();
  public final static native void Condition_type_set(long jarg1, Condition jarg1_, long jarg2);
  public final static native long Condition_type_get(long jarg1, Condition jarg1_);
  public final static native void Condition_op_set(long jarg1, Condition jarg1_, int jarg2);
  public final static native int Condition_op_get(long jarg1, Condition jarg1_);
  public final static native void Condition_value_set(long jarg1, Condition jarg1_, double jarg2);
  public final static native double Condition_value_get(long jarg1, Condition jarg1_);
  public final static native void Condition_name_set(long jarg1, Condition jarg1_, long jarg2);
  public final static native long Condition_name_get(long jarg1, Condition jarg1_);
  public final static native long new_Condition();
  public final static native void delete_Condition(long jarg1);
  public final static native void SearchRequest_searchId_set(long jarg1, SearchRequest jarg1_, int jarg2);
  public final static native int SearchRequest_searchId_get(long jarg1, SearchRequest jarg1_);
  public final static native void SearchRequest_toId_set(long jarg1, SearchRequest jarg1_, long jarg2);
  public final static native long SearchRequest_toId_get(long jarg1, SearchRequest jarg1_);
  public final static native void SearchRequest_tests_set(long jarg1, SearchRequest jarg1_, long jarg2);
  public final static native long SearchRequest_tests_get(long jarg1, SearchRequest jarg1_);
  public final static native long new_SearchRequest();
  public final static native void delete_SearchRequest(long jarg1);
  public final static native int DIR_TYPE_ROOT_get();
  public final static native int DIR_TYPE_PERSON_get();
  public final static native int DIR_TYPE_DIR_get();
  public final static native int DIR_TYPE_FILE_get();
  public final static native long new_FileInfo();
  public final static native void FileInfo_id_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_id_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_storage_permission_flags_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_storage_permission_flags_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_transfer_info_flags_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_transfer_info_flags_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_mId_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_mId_get(long jarg1, FileInfo jarg1_);
  public final static native int FileInfo_kRsFiStatusNone_get();
  public final static native int FileInfo_kRsFiStatusStall_get();
  public final static native int FileInfo_kRsFiStatusProgress_get();
  public final static native int FileInfo_kRsFiStatusDone_get();
  public final static native void FileInfo_searchId_set(long jarg1, FileInfo jarg1_, int jarg2);
  public final static native int FileInfo_searchId_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_path_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_path_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_fname_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_fname_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_hash_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_hash_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_ext_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_ext_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_size_set(long jarg1, FileInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileInfo_size_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_avail_set(long jarg1, FileInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileInfo_avail_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_status_set(long jarg1, FileInfo jarg1_, int jarg2);
  public final static native int FileInfo_status_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_rank_set(long jarg1, FileInfo jarg1_, double jarg2);
  public final static native double FileInfo_rank_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_age_set(long jarg1, FileInfo jarg1_, int jarg2);
  public final static native int FileInfo_age_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_queue_position_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_queue_position_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_transfered_set(long jarg1, FileInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileInfo_transfered_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_tfRate_set(long jarg1, FileInfo jarg1_, double jarg2);
  public final static native double FileInfo_tfRate_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_downloadStatus_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_downloadStatus_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_peers_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_peers_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_priority_set(long jarg1, FileInfo jarg1_, int jarg2);
  public final static native int FileInfo_priority_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_lastTS_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_lastTS_get(long jarg1, FileInfo jarg1_);
  public final static native void FileInfo_parent_groups_set(long jarg1, FileInfo jarg1_, long jarg2);
  public final static native long FileInfo_parent_groups_get(long jarg1, FileInfo jarg1_);
  public final static native void delete_FileInfo(long jarg1);
  public final static native void DirStub_type_set(long jarg1, DirStub jarg1_, short jarg2);
  public final static native short DirStub_type_get(long jarg1, DirStub jarg1_);
  public final static native void DirStub_name_set(long jarg1, DirStub jarg1_, long jarg2);
  public final static native long DirStub_name_get(long jarg1, DirStub jarg1_);
  public final static native void DirStub_ref_set(long jarg1, DirStub jarg1_, long jarg2);
  public final static native long DirStub_ref_get(long jarg1, DirStub jarg1_);
  public final static native long new_DirStub();
  public final static native void delete_DirStub(long jarg1);
  public final static native void DirDetails_parent_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_parent_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_prow_set(long jarg1, DirDetails jarg1_, int jarg2);
  public final static native int DirDetails_prow_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_ref_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_ref_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_type_set(long jarg1, DirDetails jarg1_, short jarg2);
  public final static native short DirDetails_type_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_id_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_id_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_name_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_name_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_hash_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_hash_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_path_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_path_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_count_set(long jarg1, DirDetails jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger DirDetails_count_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_age_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_age_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_flags_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_flags_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_min_age_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_min_age_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_children_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_children_get(long jarg1, DirDetails jarg1_);
  public final static native void DirDetails_parent_groups_set(long jarg1, DirDetails jarg1_, long jarg2);
  public final static native long DirDetails_parent_groups_get(long jarg1, DirDetails jarg1_);
  public final static native long new_DirDetails();
  public final static native void delete_DirDetails(long jarg1);
  public final static native void FileDetail_id_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_id_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_name_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_name_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_hash_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_hash_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_path_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_path_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_size_set(long jarg1, FileDetail jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileDetail_size_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_age_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_age_get(long jarg1, FileDetail jarg1_);
  public final static native void FileDetail_rank_set(long jarg1, FileDetail jarg1_, long jarg2);
  public final static native long FileDetail_rank_get(long jarg1, FileDetail jarg1_);
  public final static native long new_FileDetail();
  public final static native void delete_FileDetail(long jarg1);
  public final static native int FileChunksInfo_CHUNK_CHECKING_get();
  public final static native int FileChunksInfo_CHUNK_DONE_get();
  public final static native int FileChunksInfo_CHUNK_ACTIVE_get();
  public final static native int FileChunksInfo_CHUNK_OUTSTANDING_get();
  public final static native void FileChunksInfo_file_size_set(long jarg1, FileChunksInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileChunksInfo_file_size_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_chunk_size_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_chunk_size_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_strategy_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_strategy_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_chunks_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_chunks_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_compressed_peer_availability_maps_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_compressed_peer_availability_maps_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_active_chunks_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_active_chunks_get(long jarg1, FileChunksInfo jarg1_);
  public final static native void FileChunksInfo_pending_slices_set(long jarg1, FileChunksInfo jarg1_, long jarg2);
  public final static native long FileChunksInfo_pending_slices_get(long jarg1, FileChunksInfo jarg1_);
  public final static native long new_FileChunksInfo();
  public final static native void delete_FileChunksInfo(long jarg1);
  public final static native long new_CompressedChunkMap__SWIG_0();
  public final static native long new_CompressedChunkMap__SWIG_1(long jarg1);
  public final static native long new_CompressedChunkMap__SWIG_2(long jarg1, long jarg2);
  public final static native long CompressedChunkMap_getCompressedSize(long jarg1);
  public final static native long CompressedChunkMap_filledChunks(long jarg1, CompressedChunkMap jarg1_, long jarg2);
  public final static native java.math.BigInteger CompressedChunkMap_computeProgress(long jarg1, CompressedChunkMap jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native void CompressedChunkMap_set(long jarg1, CompressedChunkMap jarg1_, long jarg2);
  public final static native void CompressedChunkMap_reset(long jarg1, CompressedChunkMap jarg1_, long jarg2);
  public final static native void CompressedChunkMap__map_set(long jarg1, CompressedChunkMap jarg1_, long jarg2);
  public final static native long CompressedChunkMap__map_get(long jarg1, CompressedChunkMap jarg1_);
  public final static native void delete_CompressedChunkMap(long jarg1);
  public final static native long new_DwlDetails__SWIG_0();
  public final static native long new_DwlDetails__SWIG_1(long jarg1, long jarg2, int jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native void DwlDetails_fname_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_fname_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_hash_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_hash_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_count_set(long jarg1, DwlDetails jarg1_, int jarg2);
  public final static native int DwlDetails_count_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_dest_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_dest_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_flags_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_flags_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_srcIds_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_srcIds_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_queue_position_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_queue_position_get(long jarg1, DwlDetails jarg1_);
  public final static native void DwlDetails_retries_set(long jarg1, DwlDetails jarg1_, long jarg2);
  public final static native long DwlDetails_retries_get(long jarg1, DwlDetails jarg1_);
  public final static native void delete_DwlDetails(long jarg1);
  public final static native long new_pqihash();
  public final static native void delete_pqihash(long jarg1);
  public final static native void pqihash_addData(long jarg1, pqihash jarg1_, long jarg2, long jarg3);
  public final static native void pqihash_Complete(long jarg1, pqihash jarg1_, long jarg2);
  public final static native long new_BinFileInterface(String jarg1, int jarg2);
  public final static native void delete_BinFileInterface(long jarg1);
  public final static native int BinFileInterface_tick(long jarg1, BinFileInterface jarg1_);
  public final static native int BinFileInterface_senddata(long jarg1, BinFileInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinFileInterface_readdata(long jarg1, BinFileInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinFileInterface_netstatus(long jarg1, BinFileInterface jarg1_);
  public final static native int BinFileInterface_isactive(long jarg1, BinFileInterface jarg1_);
  public final static native boolean BinFileInterface_moretoread(long jarg1, BinFileInterface jarg1_);
  public final static native int BinFileInterface_close(long jarg1, BinFileInterface jarg1_);
  public final static native boolean BinFileInterface_cansend(long jarg1, BinFileInterface jarg1_);
  public final static native boolean BinFileInterface_bandwidthLimited(long jarg1, BinFileInterface jarg1_);
  public final static native long BinFileInterface_gethash(long jarg1, BinFileInterface jarg1_);
  public final static native java.math.BigInteger BinFileInterface_bytecount(long jarg1, BinFileInterface jarg1_);
  public final static native long new_BinEncryptedFileInterface(String jarg1, int jarg2);
  public final static native void delete_BinEncryptedFileInterface(long jarg1);
  public final static native int BinEncryptedFileInterface_senddata(long jarg1, BinEncryptedFileInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinEncryptedFileInterface_readdata(long jarg1, BinEncryptedFileInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinEncryptedFileInterface_close(long jarg1, BinEncryptedFileInterface jarg1_);
  public final static native java.math.BigInteger BinEncryptedFileInterface_bytecount(long jarg1, BinEncryptedFileInterface jarg1_);
  public final static native boolean BinEncryptedFileInterface_moretoread(long jarg1, BinEncryptedFileInterface jarg1_);
  public final static native long new_BinMemInterface__SWIG_0(int jarg1, int jarg2);
  public final static native long new_BinMemInterface__SWIG_1(long jarg1, int jarg2, int jarg3);
  public final static native void delete_BinMemInterface(long jarg1);
  public final static native int BinMemInterface_fseek(long jarg1, BinMemInterface jarg1_, int jarg2);
  public final static native int BinMemInterface_memsize(long jarg1, BinMemInterface jarg1_);
  public final static native long BinMemInterface_memptr(long jarg1, BinMemInterface jarg1_);
  public final static native boolean BinMemInterface_writetofile(long jarg1, BinMemInterface jarg1_, String jarg2);
  public final static native boolean BinMemInterface_readfromfile(long jarg1, BinMemInterface jarg1_, String jarg2);
  public final static native int BinMemInterface_tick(long jarg1, BinMemInterface jarg1_);
  public final static native int BinMemInterface_senddata(long jarg1, BinMemInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinMemInterface_readdata(long jarg1, BinMemInterface jarg1_, long jarg2, int jarg3);
  public final static native int BinMemInterface_netstatus(long jarg1, BinMemInterface jarg1_);
  public final static native int BinMemInterface_isactive(long jarg1, BinMemInterface jarg1_);
  public final static native boolean BinMemInterface_moretoread(long jarg1, BinMemInterface jarg1_);
  public final static native int BinMemInterface_close(long jarg1, BinMemInterface jarg1_);
  public final static native boolean BinMemInterface_cansend(long jarg1, BinMemInterface jarg1_);
  public final static native boolean BinMemInterface_bandwidthLimited(long jarg1, BinMemInterface jarg1_);
  public final static native long BinMemInterface_gethash(long jarg1, BinMemInterface jarg1_);
  public final static native java.math.BigInteger BinMemInterface_bytecount(long jarg1, BinMemInterface jarg1_);
  public final static native long new_NetBinDummy(long jarg1, PQInterface jarg1_, long jarg2, long jarg3);
  public final static native void delete_NetBinDummy(long jarg1);
  public final static native int NetBinDummy_connect(long jarg1, NetBinDummy jarg1_, long jarg2);
  public final static native int NetBinDummy_listen(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_stoplistening(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_disconnect(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_reset(long jarg1, NetBinDummy jarg1_);
  public final static native boolean NetBinDummy_connect_parameter(long jarg1, NetBinDummy jarg1_, long jarg2, long jarg3);
  public final static native int NetBinDummy_getConnectAddress(long jarg1, NetBinDummy jarg1_, long jarg2);
  public final static native int NetBinDummy_tick(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_senddata(long jarg1, NetBinDummy jarg1_, long jarg2, int jarg3);
  public final static native int NetBinDummy_readdata(long jarg1, NetBinDummy jarg1_, long jarg2, int jarg3);
  public final static native int NetBinDummy_netstatus(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_isactive(long jarg1, NetBinDummy jarg1_);
  public final static native boolean NetBinDummy_moretoread(long jarg1, NetBinDummy jarg1_);
  public final static native boolean NetBinDummy_cansend(long jarg1, NetBinDummy jarg1_);
  public final static native int NetBinDummy_close(long jarg1, NetBinDummy jarg1_);
  public final static native long NetBinDummy_gethash(long jarg1, NetBinDummy jarg1_);
  public final static native long CONFIG_TYPE_GENERAL_get();
  public final static native long CONFIG_TYPE_PEERS_get();
  public final static native long CONFIG_TYPE_FSERVER_get();
  public final static native long CONFIG_TYPE_MSGS_get();
  public final static native long CONFIG_TYPE_CACHE_OLDID_get();
  public final static native long CONFIG_TYPE_AUTHGPG_get();
  public final static native long CONFIG_TYPE_FT_SHARED_get();
  public final static native long CONFIG_TYPE_FT_EXTRA_LIST_get();
  public final static native long CONFIG_TYPE_FT_CONTROL_get();
  public final static native long CONFIG_TYPE_FT_DWLQUEUE_get();
  public final static native long CONFIG_TYPE_P3DISC_get();
  public final static native long CONFIG_TYPE_AUTHSSL_get();
  public final static native long CONFIG_TYPE_CHAT_get();
  public final static native long CONFIG_TYPE_STATUS_get();
  public final static native long CONFIG_TYPE_PLUGINS_get();
  public final static native long CONFIG_TYPE_HISTORY_get();
  public final static native long CONFIG_TYPE_TURTLE_get();
  public final static native long CONFIG_TYPE_BITDHT_get();
  public final static native long CONFIG_TYPE_QBLOG_get();
  public final static native long CONFIG_TYPE_FORUMS_get();
  public final static native long CONFIG_TYPE_CHANNELS_get();
  public final static native long CONFIG_TYPE_CACHE_get();
  public final static native void delete_pqiConfig(long jarg1);
  public final static native boolean pqiConfig_loadConfiguration(long jarg1, pqiConfig jarg1_, long jarg2);
  public final static native boolean pqiConfig_saveConfiguration(long jarg1, pqiConfig jarg1_);
  public final static native long pqiConfig_Type(long jarg1, pqiConfig jarg1_);
  public final static native long pqiConfig_Filename(long jarg1, pqiConfig jarg1_);
  public final static native long pqiConfig_Hash(long jarg1, pqiConfig jarg1_);
  public final static native long new_p3ConfigMgr(long jarg1, long jarg2, long jarg3);
  public final static native void p3ConfigMgr_tick(long jarg1, p3ConfigMgr jarg1_);
  public final static native void p3ConfigMgr_saveConfiguration(long jarg1, p3ConfigMgr jarg1_);
  public final static native void p3ConfigMgr_loadConfiguration(long jarg1, p3ConfigMgr jarg1_);
  public final static native void p3ConfigMgr_addConfiguration(long jarg1, p3ConfigMgr jarg1_, long jarg2, long jarg3, pqiConfig jarg3_);
  public final static native void p3ConfigMgr_completeConfiguration(long jarg1, p3ConfigMgr jarg1_);
  public final static native void delete_p3ConfigMgr(long jarg1);
  public final static native boolean p3Config_loadConfiguration(long jarg1, p3Config jarg1_, long jarg2);
  public final static native boolean p3Config_saveConfiguration(long jarg1, p3Config jarg1_);
  public final static native void delete_p3Config(long jarg1);
  public final static native long new_p3GeneralConfig();
  public final static native long p3GeneralConfig_getSetting(long jarg1, p3GeneralConfig jarg1_, long jarg2);
  public final static native void p3GeneralConfig_setSetting(long jarg1, p3GeneralConfig jarg1_, long jarg2, long jarg3);
  public final static native void delete_p3GeneralConfig(long jarg1);
  public final static native long RS_NET_CONN_TCP_ALL_get();
  public final static native long RS_NET_CONN_UDP_ALL_get();
  public final static native long RS_NET_CONN_TUNNEL_get();
  public final static native long RS_NET_CONN_TCP_LOCAL_get();
  public final static native long RS_NET_CONN_TCP_EXTERNAL_get();
  public final static native long RS_NET_CONN_TCP_UNKNOW_TOPOLOGY_get();
  public final static native long RS_NET_CONN_UDP_DHT_SYNC_get();
  public final static native long RS_NET_CONN_UDP_PEER_SYNC_get();
  public final static native long RS_TCP_STD_TIMEOUT_PERIOD_get();
  public final static native long RS_UDP_STD_TIMEOUT_PERIOD_get();
  public final static native long new_peerAddrInfo();
  public final static native void peerAddrInfo_found_set(long jarg1, peerAddrInfo jarg1_, boolean jarg2);
  public final static native boolean peerAddrInfo_found_get(long jarg1, peerAddrInfo jarg1_);
  public final static native void peerAddrInfo_type_set(long jarg1, peerAddrInfo jarg1_, long jarg2);
  public final static native long peerAddrInfo_type_get(long jarg1, peerAddrInfo jarg1_);
  public final static native void peerAddrInfo_addrs_set(long jarg1, peerAddrInfo jarg1_, long jarg2, pqiIpAddrSet jarg2_);
  public final static native long peerAddrInfo_addrs_get(long jarg1, peerAddrInfo jarg1_);
  public final static native void peerAddrInfo_ts_set(long jarg1, peerAddrInfo jarg1_, long jarg2);
  public final static native long peerAddrInfo_ts_get(long jarg1, peerAddrInfo jarg1_);
  public final static native void delete_peerAddrInfo(long jarg1);
  public final static native long new_peerConnectAddress();
  public final static native void peerConnectAddress_addr_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_addr_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_delay_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_delay_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_period_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_period_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_type_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_type_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_flags_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_flags_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_ts_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_ts_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_proxyaddr_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_proxyaddr_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_srcaddr_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_srcaddr_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void peerConnectAddress_bandwidth_set(long jarg1, peerConnectAddress jarg1_, long jarg2);
  public final static native long peerConnectAddress_bandwidth_get(long jarg1, peerConnectAddress jarg1_);
  public final static native void delete_peerConnectAddress(long jarg1);
  public final static native long new_peerConnectState();
  public final static native void peerConnectState_id_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_id_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_dhtVisible_set(long jarg1, peerConnectState jarg1_, boolean jarg2);
  public final static native boolean peerConnectState_dhtVisible_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_connecttype_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_connecttype_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_lastavailable_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_lastavailable_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_lastattempt_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_lastattempt_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_name_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_name_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_state_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_state_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_actions_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_actions_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_linkType_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_linkType_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_source_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_source_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_dht_set(long jarg1, peerConnectState jarg1_, long jarg2, peerAddrInfo jarg2_);
  public final static native long peerConnectState_dht_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_disc_set(long jarg1, peerConnectState jarg1_, long jarg2, peerAddrInfo jarg2_);
  public final static native long peerConnectState_disc_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_peer_set(long jarg1, peerConnectState jarg1_, long jarg2, peerAddrInfo jarg2_);
  public final static native long peerConnectState_peer_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_inConnAttempt_set(long jarg1, peerConnectState jarg1_, boolean jarg2);
  public final static native boolean peerConnectState_inConnAttempt_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_currentConnAddrAttempt_set(long jarg1, peerConnectState jarg1_, long jarg2, peerConnectAddress jarg2_);
  public final static native long peerConnectState_currentConnAddrAttempt_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_connAddrs_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_connAddrs_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_wasDeniedConnection_set(long jarg1, peerConnectState jarg1_, boolean jarg2);
  public final static native boolean peerConnectState_wasDeniedConnection_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_deniedTS_set(long jarg1, peerConnectState jarg1_, long jarg2);
  public final static native long peerConnectState_deniedTS_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_deniedInConnAttempt_set(long jarg1, peerConnectState jarg1_, boolean jarg2);
  public final static native boolean peerConnectState_deniedInConnAttempt_get(long jarg1, peerConnectState jarg1_);
  public final static native void peerConnectState_deniedConnectionAttempt_set(long jarg1, peerConnectState jarg1_, long jarg2, peerConnectAddress jarg2_);
  public final static native long peerConnectState_deniedConnectionAttempt_get(long jarg1, peerConnectState jarg1_);
  public final static native void delete_peerConnectState(long jarg1);
  public final static native long textPeerConnectState(long jarg1, peerConnectState jarg1_);
  public final static native void delete_p3LinkMgr(long jarg1);
  public final static native long p3LinkMgr_getOwnId(long jarg1, p3LinkMgr jarg1_);
  public final static native boolean p3LinkMgr_isOnline(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native void p3LinkMgr_getOnlineList(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native boolean p3LinkMgr_getPeerName(long jarg1, p3LinkMgr jarg1_, long jarg2, long jarg3);
  public final static native long p3LinkMgr_getLinkType(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native void p3LinkMgr_addMonitor(long jarg1, p3LinkMgr jarg1_, long jarg2, pqiMonitor jarg2_);
  public final static native void p3LinkMgr_removeMonitor(long jarg1, p3LinkMgr jarg1_, long jarg2, pqiMonitor jarg2_);
  public final static native boolean p3LinkMgr_connectAttempt(long jarg1, p3LinkMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native boolean p3LinkMgr_connectResult(long jarg1, p3LinkMgr jarg1_, long jarg2, boolean jarg3, long jarg4, long jarg5);
  public final static native boolean p3LinkMgr_retryConnect(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native void p3LinkMgr_notifyDeniedConnection(long jarg1, p3LinkMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native boolean p3LinkMgr_setLocalAddress(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native long p3LinkMgr_getLocalAddress(long jarg1, p3LinkMgr jarg1_);
  public final static native void p3LinkMgr_getFriendList(long jarg1, p3LinkMgr jarg1_, long jarg2);
  public final static native boolean p3LinkMgr_getFriendNetStatus(long jarg1, p3LinkMgr jarg1_, long jarg2, long jarg3, peerConnectState jarg3_);
  public final static native void p3LinkMgr_setTunnelConnection(long jarg1, p3LinkMgr jarg1_, boolean jarg2);
  public final static native boolean p3LinkMgr_getTunnelConnection(long jarg1, p3LinkMgr jarg1_);
  public final static native int p3LinkMgr_addFriend(long jarg1, p3LinkMgr jarg1_, long jarg2, boolean jarg3);
  public final static native long p3LinkMgrIMPL_getOwnId(long jarg1, p3LinkMgrIMPL jarg1_);
  public final static native boolean p3LinkMgrIMPL_isOnline(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native void p3LinkMgrIMPL_getOnlineList(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3LinkMgrIMPL_getPeerName(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native long p3LinkMgrIMPL_getLinkType(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native void p3LinkMgrIMPL_addMonitor(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, pqiMonitor jarg2_);
  public final static native void p3LinkMgrIMPL_removeMonitor(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, pqiMonitor jarg2_);
  public final static native boolean p3LinkMgrIMPL_connectAttempt(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native boolean p3LinkMgrIMPL_connectResult(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, boolean jarg3, long jarg4, long jarg5);
  public final static native boolean p3LinkMgrIMPL_retryConnect(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native void p3LinkMgrIMPL_notifyDeniedConnection(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native boolean p3LinkMgrIMPL_setLocalAddress(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native long p3LinkMgrIMPL_getLocalAddress(long jarg1, p3LinkMgrIMPL jarg1_);
  public final static native void p3LinkMgrIMPL_peerStatus(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3, pqiIpAddrSet jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native void p3LinkMgrIMPL_peerConnectRequest(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native void p3LinkMgrIMPL_getFriendList(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3LinkMgrIMPL_getFriendNetStatus(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, long jarg3, peerConnectState jarg3_);
  public final static native void p3LinkMgrIMPL_setTunnelConnection(long jarg1, p3LinkMgrIMPL jarg1_, boolean jarg2);
  public final static native boolean p3LinkMgrIMPL_getTunnelConnection(long jarg1, p3LinkMgrIMPL jarg1_);
  public final static native long new_p3LinkMgrIMPL(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, p3NetMgrIMPL jarg2_);
  public final static native void p3LinkMgrIMPL_tick(long jarg1, p3LinkMgrIMPL jarg1_);
  public final static native void p3LinkMgrIMPL_setFriendVisibility(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, boolean jarg3);
  public final static native int p3LinkMgrIMPL_addFriend(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2, boolean jarg3);
  public final static native int p3LinkMgrIMPL_removeFriend(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native void p3LinkMgrIMPL_printPeerLists(long jarg1, p3LinkMgrIMPL jarg1_, long jarg2);
  public final static native void delete_p3LinkMgrIMPL(long jarg1);
  public final static native int RS_SERVICE_TYPE_FILE_INDEX_get();
  public final static native int RS_SERVICE_TYPE_DISC_get();
  public final static native int RS_SERVICE_TYPE_CHAT_get();
  public final static native int RS_SERVICE_TYPE_MSG_get();
  public final static native int RS_SERVICE_TYPE_TURTLE_get();
  public final static native int RS_SERVICE_TYPE_TUNNEL_get();
  public final static native int RS_SERVICE_TYPE_BANLIST_get();
  public final static native int RS_SERVICE_TYPE_DISTRIB_get();
  public final static native int RS_SERVICE_TYPE_FORUM_get();
  public final static native int RS_SERVICE_TYPE_CHANNEL_get();
  public final static native int RS_SERVICE_TYPE_CHANNEL_SOCKET_get();
  public final static native int RS_SERVICE_TYPE_STATUS_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_ARADO_ID_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_QCHESS_ID_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_FEEDREADER_get();
  public final static native int RS_SERVICE_TYPE_QBLOG_get();
  public final static native int RS_SERVICE_TYPE_PROXY_get();
  public final static native int RS_SERVICE_TYPE_DSDV_get();
  public final static native int RS_SERVICE_TYPE_BWCTRL_get();
  public final static native int RS_SERVICE_TYPE_GAME_LAUNCHER_get();
  public final static native int RS_SERVICE_TYPE_PORT_get();
  public final static native int RS_SERVICE_TYPE_GAME_QTCHESS_get();
  public final static native int RS_SERVICE_TYPE_GAME_QGO_get();
  public final static native int RS_SERVICE_TYPE_GAME_BIGTWO_get();
  public final static native int RS_SERVICE_TYPE_GAME_POKER_get();
  public final static native int RS_SERVICE_TYPE_NXS_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_GXSID_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_GXSCIRCLE_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_PHOTO_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_WIKI_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_WIRE_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_FORUMS_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_POSTED_get();
  public final static native int RS_SERVICE_GXSV2_TYPE_CHANNELS_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_GXSID_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_PHOTO_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_WIKI_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_WIRE_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_FORUMS_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_POSTED_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_CHANNELS_get();
  public final static native int RS_SERVICE_GXSV3_TYPE_GXSCIRCLE_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_ARADO_TEST_ID1_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_QCHESS_TEST_ID1_get();
  public final static native int RS_SERVICE_TYPE_PLUGIN_SIMPLE_FORUM_get();
  public final static native long TLV_HEADER_TYPE_SIZE_get();
  public final static native long TLV_HEADER_LEN_SIZE_get();
  public final static native long TLV_HEADER_SIZE_get();
  public final static native int TLV_TYPE_UINT8_SERID_get();
  public final static native int TLV_TYPE_UINT16_SERID_get();
  public final static native int TLV_TYPE_UINT32_SIZE_get();
  public final static native int TLV_TYPE_UINT32_POP_get();
  public final static native int TLV_TYPE_UINT32_AGE_get();
  public final static native int TLV_TYPE_UINT32_OFFSET_get();
  public final static native int TLV_TYPE_UINT32_SERID_get();
  public final static native int TLV_TYPE_UINT32_BW_get();
  public final static native int TLV_TYPE_UINT64_SIZE_get();
  public final static native int TLV_TYPE_UINT64_OFFSET_get();
  public final static native int TLV_TYPE_STR_PEERID_get();
  public final static native int TLV_TYPE_STR_NAME_get();
  public final static native int TLV_TYPE_STR_PATH_get();
  public final static native int TLV_TYPE_STR_KEY_get();
  public final static native int TLV_TYPE_STR_VALUE_get();
  public final static native int TLV_TYPE_STR_COMMENT_get();
  public final static native int TLV_TYPE_STR_TITLE_get();
  public final static native int TLV_TYPE_STR_MSG_get();
  public final static native int TLV_TYPE_STR_SUBJECT_get();
  public final static native int TLV_TYPE_STR_LINK_get();
  public final static native int TLV_TYPE_STR_GENID_get();
  public final static native int TLV_TYPE_STR_GPGID_get();
  public final static native int TLV_TYPE_STR_LOCATION_get();
  public final static native int TLV_TYPE_STR_CERT_GPG_get();
  public final static native int TLV_TYPE_STR_CERT_SSL_get();
  public final static native int TLV_TYPE_WSTR_PEERID_get();
  public final static native int TLV_TYPE_WSTR_NAME_get();
  public final static native int TLV_TYPE_WSTR_PATH_get();
  public final static native int TLV_TYPE_WSTR_KEY_get();
  public final static native int TLV_TYPE_WSTR_VALUE_get();
  public final static native int TLV_TYPE_WSTR_COMMENT_get();
  public final static native int TLV_TYPE_WSTR_TITLE_get();
  public final static native int TLV_TYPE_WSTR_MSG_get();
  public final static native int TLV_TYPE_WSTR_SUBJECT_get();
  public final static native int TLV_TYPE_WSTR_LINK_get();
  public final static native int TLV_TYPE_WSTR_GENID_get();
  public final static native int TLV_TYPE_STR_HASH_SHA1_get();
  public final static native int TLV_TYPE_STR_HASH_ED2K_get();
  public final static native int TLV_TYPE_IPV4_LOCAL_get();
  public final static native int TLV_TYPE_IPV4_REMOTE_get();
  public final static native int TLV_TYPE_IPV4_LAST_get();
  public final static native int TLV_TYPE_STR_DYNDNS_get();
  public final static native int TLV_TYPE_STR_GROUPID_get();
  public final static native int TLV_TYPE_STR_MSGID_get();
  public final static native int TLV_TYPE_STR_PARENTID_get();
  public final static native int TLV_TYPE_STR_THREADID_get();
  public final static native int TLV_TYPE_STR_KEYID_get();
  public final static native int TLV_TYPE_WSTR_CATEGORY_get();
  public final static native int TLV_TYPE_CERT_XPGP_DER_get();
  public final static native int TLV_TYPE_CERT_X509_get();
  public final static native int TLV_TYPE_CERT_OPENPGP_get();
  public final static native int TLV_TYPE_KEY_EVP_PKEY_get();
  public final static native int TLV_TYPE_KEY_PRIV_RSA_get();
  public final static native int TLV_TYPE_KEY_PUB_RSA_get();
  public final static native int TLV_TYPE_SIGN_RSA_SHA1_get();
  public final static native int TLV_TYPE_BIN_IMAGE_get();
  public final static native int TLV_TYPE_BIN_FILEDATA_get();
  public final static native int TLV_TYPE_BIN_SERIALISE_get();
  public final static native int TLV_TYPE_BIN_GENERIC_get();
  public final static native int TLV_TYPE_FILEITEM_get();
  public final static native int TLV_TYPE_FILESET_get();
  public final static native int TLV_TYPE_FILEDATA_get();
  public final static native int TLV_TYPE_KEYVALUE_get();
  public final static native int TLV_TYPE_WKEYVALUE_get();
  public final static native int TLV_TYPE_KEYVALUESET_get();
  public final static native int TLV_TYPE_WKEYVALUESET_get();
  public final static native int TLV_TYPE_STRINGSET_get();
  public final static native int TLV_TYPE_PEERSET_get();
  public final static native int TLV_TYPE_HASHSET_get();
  public final static native int TLV_TYPE_SERVICESET_get();
  public final static native int TLV_TYPE_SECURITYKEY_get();
  public final static native int TLV_TYPE_SECURITYKEYSET_get();
  public final static native int TLV_TYPE_KEYSIGNATURE_get();
  public final static native int TLV_TYPE_KEYSIGNATURESET_get();
  public final static native int TLV_TYPE_KEYSIGNATURETYPE_get();
  public final static native int TLV_TYPE_IMAGE_get();
  public final static native int TLV_TYPE_ADDRESS_INFO_get();
  public final static native int TLV_TYPE_ADDRESS_SET_get();
  public final static native int TLV_TYPE_DSDV_ENDPOINT_get();
  public final static native int TLV_TYPE_DSDV_ENTRY_get();
  public final static native int TLV_TYPE_DSDV_ENTRY_SET_get();
  public final static native int TLV_TYPE_BAN_ENTRY_get();
  public final static native int TLV_TYPE_BAN_LIST_get();
  public final static native long RSTLV_IMAGE_TYPE_PNG_get();
  public final static native long RSTLV_IMAGE_TYPE_JPG_get();
  public final static native long GetTlvSize(long jarg1);
  public final static native int GetTlvType(long jarg1);
  public final static native boolean SetTlvBase(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean SetTlvSize(long jarg1, long jarg2, long jarg3);
  public final static native boolean SetTlvType(long jarg1, long jarg2, int jarg3);
  public final static native boolean SkipUnknownTlv(long jarg1, long jarg2, long jarg3);
  public final static native boolean SetTlvUInt8(long jarg1, long jarg2, long jarg3, int jarg4, short jarg5);
  public final static native boolean GetTlvUInt8(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean SetTlvUInt16(long jarg1, long jarg2, long jarg3, int jarg4, int jarg5);
  public final static native boolean GetTlvUInt16(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean SetTlvUInt32(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GetTlvUInt32(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean SetTlvUInt64(long jarg1, long jarg2, long jarg3, int jarg4, java.math.BigInteger jarg5);
  public final static native boolean GetTlvUInt64(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native long GetTlvUInt8Size();
  public final static native long GetTlvUInt16Size();
  public final static native long GetTlvUInt32Size();
  public final static native long GetTlvUInt64Size();
  public final static native boolean SetTlvString(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GetTlvString(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native long GetTlvStringSize(long jarg1);
  public final static native boolean SetTlvWideString(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GetTlvWideString(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native long GetTlvWideStringSize(long jarg1);
  public final static native boolean SetTlvIpAddrPortV4(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GetTlvIpAddrPortV4(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native long GetTlvIpAddrPortV4Size();
  public final static native long RSTLV_KEY_TYPE_MASK_get();
  public final static native long RSTLV_KEY_DISTRIB_MASK_get();
  public final static native long RSTLV_KEY_TYPE_PUBLIC_ONLY_get();
  public final static native long RSTLV_KEY_TYPE_FULL_get();
  public final static native long RSTLV_KEY_TYPE_SHARED_get();
  public final static native long RSTLV_KEY_DISTRIB_PUBLIC_get();
  public final static native long RSTLV_KEY_DISTRIB_PRIVATE_get();
  public final static native long RSTLV_KEY_DISTRIB_ADMIN_get();
  public final static native long RSTLV_KEY_DISTRIB_IDENTITY_get();
  public final static native long new_RsTlvSecurityKey();
  public final static native void delete_RsTlvSecurityKey(long jarg1);
  public final static native long RsTlvSecurityKey_TlvSize(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_TlvClear(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native boolean RsTlvSecurityKey_SetTlv(long jarg1, RsTlvSecurityKey jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvSecurityKey_GetTlv(long jarg1, RsTlvSecurityKey jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvSecurityKey_print(long jarg1, RsTlvSecurityKey jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvSecurityKey_ShallowClear(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_keyId_set(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long RsTlvSecurityKey_keyId_get(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_keyFlags_set(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long RsTlvSecurityKey_keyFlags_get(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_startTS_set(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long RsTlvSecurityKey_startTS_get(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_endTS_set(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long RsTlvSecurityKey_endTS_get(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void RsTlvSecurityKey_keyData_set(long jarg1, RsTlvSecurityKey jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsTlvSecurityKey_keyData_get(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native long new_RsTlvSecurityKeySet();
  public final static native void delete_RsTlvSecurityKeySet(long jarg1);
  public final static native long RsTlvSecurityKeySet_TlvSize(long jarg1, RsTlvSecurityKeySet jarg1_);
  public final static native void RsTlvSecurityKeySet_TlvClear(long jarg1, RsTlvSecurityKeySet jarg1_);
  public final static native boolean RsTlvSecurityKeySet_SetTlv(long jarg1, RsTlvSecurityKeySet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvSecurityKeySet_GetTlv(long jarg1, RsTlvSecurityKeySet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvSecurityKeySet_print(long jarg1, RsTlvSecurityKeySet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvSecurityKeySet_groupId_set(long jarg1, RsTlvSecurityKeySet jarg1_, long jarg2);
  public final static native long RsTlvSecurityKeySet_groupId_get(long jarg1, RsTlvSecurityKeySet jarg1_);
  public final static native void RsTlvSecurityKeySet_keys_set(long jarg1, RsTlvSecurityKeySet jarg1_, long jarg2);
  public final static native long RsTlvSecurityKeySet_keys_get(long jarg1, RsTlvSecurityKeySet jarg1_);
  public final static native long new_RsTlvKeySignature();
  public final static native void delete_RsTlvKeySignature(long jarg1);
  public final static native long RsTlvKeySignature_TlvSize(long jarg1, RsTlvKeySignature jarg1_);
  public final static native void RsTlvKeySignature_TlvClear(long jarg1, RsTlvKeySignature jarg1_);
  public final static native boolean RsTlvKeySignature_SetTlv(long jarg1, RsTlvKeySignature jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeySignature_GetTlv(long jarg1, RsTlvKeySignature jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeySignature_print(long jarg1, RsTlvKeySignature jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeySignature_ShallowClear(long jarg1, RsTlvKeySignature jarg1_);
  public final static native void RsTlvKeySignature_keyId_set(long jarg1, RsTlvKeySignature jarg1_, long jarg2);
  public final static native long RsTlvKeySignature_keyId_get(long jarg1, RsTlvKeySignature jarg1_);
  public final static native void RsTlvKeySignature_signData_set(long jarg1, RsTlvKeySignature jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsTlvKeySignature_signData_get(long jarg1, RsTlvKeySignature jarg1_);
  public final static native long new_RsTlvKeySignatureSet();
  public final static native void delete_RsTlvKeySignatureSet(long jarg1);
  public final static native long RsTlvKeySignatureSet_TlvSize(long jarg1, RsTlvKeySignatureSet jarg1_);
  public final static native void RsTlvKeySignatureSet_TlvClear(long jarg1, RsTlvKeySignatureSet jarg1_);
  public final static native boolean RsTlvKeySignatureSet_SetTlv(long jarg1, RsTlvKeySignatureSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeySignatureSet_GetTlv(long jarg1, RsTlvKeySignatureSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeySignatureSet_print(long jarg1, RsTlvKeySignatureSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeySignatureSet_keySignSet_set(long jarg1, RsTlvKeySignatureSet jarg1_, long jarg2);
  public final static native long RsTlvKeySignatureSet_keySignSet_get(long jarg1, RsTlvKeySignatureSet jarg1_);
  public final static native void delete_RsGxsGrpItem(long jarg1);
  public final static native void RsGxsGrpItem_meta_set(long jarg1, RsGxsGrpItem jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsGxsGrpItem_meta_get(long jarg1, RsGxsGrpItem jarg1_);
  public final static native void delete_RsGxsMsgItem(long jarg1);
  public final static native void RsGxsMsgItem_meta_set(long jarg1, RsGxsMsgItem jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsMsgItem_meta_get(long jarg1, RsGxsMsgItem jarg1_);
  public final static native long new_RsGxsGrpMetaData();
  public final static native boolean RsGxsGrpMetaData_deserialise(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsGrpMetaData_serialise(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2, long jarg3);
  public final static native long RsGxsGrpMetaData_serial_size(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_clear(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mGroupId_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mGroupId_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mOrigGrpId_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mOrigGrpId_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mGroupName_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mGroupName_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mGroupFlags_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mGroupFlags_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mPublishTs_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mPublishTs_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mSignFlags_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mSignFlags_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mAuthorId_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mAuthorId_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mCircleId_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mCircleId_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mCircleType_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mCircleType_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_signSet_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2, RsTlvKeySignatureSet jarg2_);
  public final static native long RsGxsGrpMetaData_signSet_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_keys_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2, RsTlvSecurityKeySet jarg2_);
  public final static native long RsGxsGrpMetaData_keys_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mServiceString_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mServiceString_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mAuthenFlags_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mAuthenFlags_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mSubscribeFlags_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mSubscribeFlags_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mPop_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mPop_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mMsgCount_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mMsgCount_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mLastPost_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mLastPost_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mGroupStatus_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mGroupStatus_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mOriginator_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mOriginator_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mInternalCircle_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mInternalCircle_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void RsGxsGrpMetaData_mHash_set(long jarg1, RsGxsGrpMetaData jarg1_, long jarg2);
  public final static native long RsGxsGrpMetaData_mHash_get(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void delete_RsGxsGrpMetaData(long jarg1);
  public final static native long new_RsGxsMsgMetaData();
  public final static native void delete_RsGxsMsgMetaData(long jarg1);
  public final static native boolean RsGxsMsgMetaData_deserialise(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsMsgMetaData_serialise(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2, long jarg3);
  public final static native long RsGxsMsgMetaData_serial_size(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_clear(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mGroupId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mGroupId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mMsgId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mMsgId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_refcount_set(int jarg1);
  public final static native int RsGxsMsgMetaData_refcount_get();
  public final static native void RsGxsMsgMetaData_mThreadId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mThreadId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mParentId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mParentId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mOrigMsgId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mOrigMsgId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mAuthorId_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mAuthorId_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_signSet_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2, RsTlvKeySignatureSet jarg2_);
  public final static native long RsGxsMsgMetaData_signSet_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mServiceString_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mServiceString_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mMsgName_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mMsgName_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mPublishTs_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mPublishTs_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mMsgFlags_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mMsgFlags_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mMsgStatus_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mMsgStatus_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mChildTs_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mChildTs_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_mHash_set(long jarg1, RsGxsMsgMetaData jarg1_, long jarg2);
  public final static native long RsGxsMsgMetaData_mHash_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void RsGxsMsgMetaData_validated_set(long jarg1, RsGxsMsgMetaData jarg1_, boolean jarg2);
  public final static native boolean RsGxsMsgMetaData_validated_get(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native short RS_PKT_SUBTYPE_NXS_SYNC_GRP_get();
  public final static native short RS_PKT_SUBTYPE_NXS_SYNC_GRP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_NXS_GRP_get();
  public final static native short RS_PKT_SUBTYPE_NXS_SYNC_MSG_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_NXS_SYNC_MSG_get();
  public final static native short RS_PKT_SUBTYPE_NXS_MSG_get();
  public final static native short RS_PKT_SUBTYPE_NXS_TRANS_get();
  public final static native short RS_PKT_SUBTYPE_NXS_EXTENDED_get();
  public final static native short RS_PKT_SUBTYPE_EXT_SEARCH_GRP_get();
  public final static native short RS_PKT_SUBTYPE_EXT_SEARCH_MSG_get();
  public final static native short RS_PKT_SUBTYPE_EXT_DELETE_GRP_get();
  public final static native short RS_PKT_SUBTYPE_EXT_DELETE_MSG_get();
  public final static native short RS_PKT_SUBTYPE_EXT_SEARCH_REQ_get();
  public final static native void delete_RsNxsItem(long jarg1);
  public final static native void RsNxsItem_clear(long jarg1, RsNxsItem jarg1_);
  public final static native long RsNxsItem_print__SWIG_0(long jarg1, RsNxsItem jarg1_, long jarg2, int jarg3);
  public final static native long RsNxsItem_print__SWIG_1(long jarg1, RsNxsItem jarg1_, long jarg2);
  public final static native void RsNxsItem_transactionNumber_set(long jarg1, RsNxsItem jarg1_, long jarg2);
  public final static native long RsNxsItem_transactionNumber_get(long jarg1, RsNxsItem jarg1_);
  public final static native short RsNxsSyncGrp_FLAG_USE_SYNC_HASH_get();
  public final static native short RsNxsSyncGrp_FLAG_ONLY_CURRENT_get();
  public final static native void RsNxsSyncGrp_clear(long jarg1, RsNxsSyncGrp jarg1_);
  public final static native long RsNxsSyncGrp_print(long jarg1, RsNxsSyncGrp jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSyncGrp_flag_set(long jarg1, RsNxsSyncGrp jarg1_, short jarg2);
  public final static native short RsNxsSyncGrp_flag_get(long jarg1, RsNxsSyncGrp jarg1_);
  public final static native void RsNxsSyncGrp_syncAge_set(long jarg1, RsNxsSyncGrp jarg1_, long jarg2);
  public final static native long RsNxsSyncGrp_syncAge_get(long jarg1, RsNxsSyncGrp jarg1_);
  public final static native void RsNxsSyncGrp_syncHash_set(long jarg1, RsNxsSyncGrp jarg1_, long jarg2);
  public final static native long RsNxsSyncGrp_syncHash_get(long jarg1, RsNxsSyncGrp jarg1_);
  public final static native void delete_RsNxsSyncGrp(long jarg1);
  public final static native int RsNxsTransac_FLAG_STATE_MASK_get();
  public final static native int RsNxsTransac_FLAG_TYPE_MASK_get();
  public final static native int RsNxsTransac_FLAG_BEGIN_P1_get();
  public final static native int RsNxsTransac_FLAG_BEGIN_P2_get();
  public final static native int RsNxsTransac_FLAG_END_SUCCESS_get();
  public final static native int RsNxsTransac_FLAG_CANCEL_get();
  public final static native int RsNxsTransac_FLAG_END_FAIL_NUM_get();
  public final static native int RsNxsTransac_FLAG_END_FAIL_TIMEOUT_get();
  public final static native int RsNxsTransac_FLAG_END_FAIL_FULL_get();
  public final static native int RsNxsTransac_FLAG_TYPE_GRP_LIST_RESP_get();
  public final static native int RsNxsTransac_FLAG_TYPE_MSG_LIST_RESP_get();
  public final static native int RsNxsTransac_FLAG_TYPE_GRP_LIST_REQ_get();
  public final static native int RsNxsTransac_FLAG_TYPE_MSG_LIST_REQ_get();
  public final static native int RsNxsTransac_FLAG_TYPE_GRPS_get();
  public final static native int RsNxsTransac_FLAG_TYPE_MSGS_get();
  public final static native void delete_RsNxsTransac(long jarg1);
  public final static native void RsNxsTransac_clear(long jarg1, RsNxsTransac jarg1_);
  public final static native long RsNxsTransac_print(long jarg1, RsNxsTransac jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsTransac_transactFlag_set(long jarg1, RsNxsTransac jarg1_, int jarg2);
  public final static native int RsNxsTransac_transactFlag_get(long jarg1, RsNxsTransac jarg1_);
  public final static native void RsNxsTransac_nItems_set(long jarg1, RsNxsTransac jarg1_, long jarg2);
  public final static native long RsNxsTransac_nItems_get(long jarg1, RsNxsTransac jarg1_);
  public final static native void RsNxsTransac_timestamp_set(long jarg1, RsNxsTransac jarg1_, long jarg2);
  public final static native long RsNxsTransac_timestamp_get(long jarg1, RsNxsTransac jarg1_);
  public final static native short RsNxsSyncGrpItem_FLAG_REQUEST_get();
  public final static native short RsNxsSyncGrpItem_FLAG_RESPONSE_get();
  public final static native short RsNxsSyncGrpItem_FLAG_USE_SYNC_HASH_get();
  public final static native void delete_RsNxsSyncGrpItem(long jarg1);
  public final static native void RsNxsSyncGrpItem_clear(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native long RsNxsSyncGrpItem_print(long jarg1, RsNxsSyncGrpItem jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSyncGrpItem_flag_set(long jarg1, RsNxsSyncGrpItem jarg1_, short jarg2);
  public final static native short RsNxsSyncGrpItem_flag_get(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native void RsNxsSyncGrpItem_publishTs_set(long jarg1, RsNxsSyncGrpItem jarg1_, long jarg2);
  public final static native long RsNxsSyncGrpItem_publishTs_get(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native void RsNxsSyncGrpItem_grpId_set(long jarg1, RsNxsSyncGrpItem jarg1_, long jarg2);
  public final static native long RsNxsSyncGrpItem_grpId_get(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native void RsNxsSyncGrpItem_authorId_set(long jarg1, RsNxsSyncGrpItem jarg1_, long jarg2);
  public final static native long RsNxsSyncGrpItem_authorId_get(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native void delete_RsNxsGrp(long jarg1);
  public final static native void RsNxsGrp_clear(long jarg1, RsNxsGrp jarg1_);
  public final static native long RsNxsGrp_print(long jarg1, RsNxsGrp jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsGrp_grpId_set(long jarg1, RsNxsGrp jarg1_, long jarg2);
  public final static native long RsNxsGrp_grpId_get(long jarg1, RsNxsGrp jarg1_);
  public final static native void RsNxsGrp_refcount_set(int jarg1);
  public final static native int RsNxsGrp_refcount_get();
  public final static native void RsNxsGrp_grp_set(long jarg1, RsNxsGrp jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsGrp_grp_get(long jarg1, RsNxsGrp jarg1_);
  public final static native void RsNxsGrp_pos_set(long jarg1, RsNxsGrp jarg1_, short jarg2);
  public final static native short RsNxsGrp_pos_get(long jarg1, RsNxsGrp jarg1_);
  public final static native void RsNxsGrp_count_set(long jarg1, RsNxsGrp jarg1_, short jarg2);
  public final static native short RsNxsGrp_count_get(long jarg1, RsNxsGrp jarg1_);
  public final static native void RsNxsGrp_meta_set(long jarg1, RsNxsGrp jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsGrp_meta_get(long jarg1, RsNxsGrp jarg1_);
  public final static native void RsNxsGrp_metaData_set(long jarg1, RsNxsGrp jarg1_, long jarg2, RsGxsGrpMetaData jarg2_);
  public final static native long RsNxsGrp_metaData_get(long jarg1, RsNxsGrp jarg1_);
  public final static native short RsNxsSyncMsg_FLAG_USE_SYNC_HASH_get();
  public final static native void RsNxsSyncMsg_clear(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native long RsNxsSyncMsg_print(long jarg1, RsNxsSyncMsg jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSyncMsg_grpId_set(long jarg1, RsNxsSyncMsg jarg1_, long jarg2);
  public final static native long RsNxsSyncMsg_grpId_get(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native void RsNxsSyncMsg_flag_set(long jarg1, RsNxsSyncMsg jarg1_, short jarg2);
  public final static native short RsNxsSyncMsg_flag_get(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native void RsNxsSyncMsg_syncAge_set(long jarg1, RsNxsSyncMsg jarg1_, long jarg2);
  public final static native long RsNxsSyncMsg_syncAge_get(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native void RsNxsSyncMsg_syncHash_set(long jarg1, RsNxsSyncMsg jarg1_, long jarg2);
  public final static native long RsNxsSyncMsg_syncHash_get(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native void delete_RsNxsSyncMsg(long jarg1);
  public final static native short RsNxsSyncMsgItem_FLAG_REQUEST_get();
  public final static native short RsNxsSyncMsgItem_FLAG_RESPONSE_get();
  public final static native short RsNxsSyncMsgItem_FLAG_USE_SYNC_HASH_get();
  public final static native void RsNxsSyncMsgItem_clear(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native long RsNxsSyncMsgItem_print(long jarg1, RsNxsSyncMsgItem jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSyncMsgItem_flag_set(long jarg1, RsNxsSyncMsgItem jarg1_, short jarg2);
  public final static native short RsNxsSyncMsgItem_flag_get(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native void RsNxsSyncMsgItem_grpId_set(long jarg1, RsNxsSyncMsgItem jarg1_, long jarg2);
  public final static native long RsNxsSyncMsgItem_grpId_get(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native void RsNxsSyncMsgItem_msgId_set(long jarg1, RsNxsSyncMsgItem jarg1_, long jarg2);
  public final static native long RsNxsSyncMsgItem_msgId_get(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native void RsNxsSyncMsgItem_authorId_set(long jarg1, RsNxsSyncMsgItem jarg1_, long jarg2);
  public final static native long RsNxsSyncMsgItem_authorId_get(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native void delete_RsNxsSyncMsgItem(long jarg1);
  public final static native void delete_RsNxsMsg(long jarg1);
  public final static native void RsNxsMsg_clear(long jarg1, RsNxsMsg jarg1_);
  public final static native long RsNxsMsg_print(long jarg1, RsNxsMsg jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsMsg_pos_set(long jarg1, RsNxsMsg jarg1_, short jarg2);
  public final static native short RsNxsMsg_pos_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_count_set(long jarg1, RsNxsMsg jarg1_, short jarg2);
  public final static native short RsNxsMsg_count_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_grpId_set(long jarg1, RsNxsMsg jarg1_, long jarg2);
  public final static native long RsNxsMsg_grpId_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_msgId_set(long jarg1, RsNxsMsg jarg1_, long jarg2);
  public final static native long RsNxsMsg_msgId_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_refcount_set(int jarg1);
  public final static native int RsNxsMsg_refcount_get();
  public final static native void RsNxsMsg_meta_set(long jarg1, RsNxsMsg jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsMsg_meta_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_msg_set(long jarg1, RsNxsMsg jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsMsg_msg_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void RsNxsMsg_metaData_set(long jarg1, RsNxsMsg jarg1_, long jarg2, RsGxsMsgMetaData jarg2_);
  public final static native long RsNxsMsg_metaData_get(long jarg1, RsNxsMsg jarg1_);
  public final static native void delete_RsNxsSearchReq(long jarg1);
  public final static native void RsNxsSearchReq_clear(long jarg1, RsNxsSearchReq jarg1_);
  public final static native long RsNxsSearchReq_print(long jarg1, RsNxsSearchReq jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSearchReq_nHops_set(long jarg1, RsNxsSearchReq jarg1_, short jarg2);
  public final static native short RsNxsSearchReq_nHops_get(long jarg1, RsNxsSearchReq jarg1_);
  public final static native void RsNxsSearchReq_token_set(long jarg1, RsNxsSearchReq jarg1_, long jarg2);
  public final static native long RsNxsSearchReq_token_get(long jarg1, RsNxsSearchReq jarg1_);
  public final static native void RsNxsSearchReq_serviceSearchItem_set(long jarg1, RsNxsSearchReq jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsSearchReq_serviceSearchItem_get(long jarg1, RsNxsSearchReq jarg1_);
  public final static native void RsNxsSearchReq_expiration_set(long jarg1, RsNxsSearchReq jarg1_, long jarg2);
  public final static native long RsNxsSearchReq_expiration_get(long jarg1, RsNxsSearchReq jarg1_);
  public final static native void delete_RsNxsExtended(long jarg1);
  public final static native void RsNxsExtended_clear(long jarg1, RsNxsExtended jarg1_);
  public final static native long RsNxsExtended_print(long jarg1, RsNxsExtended jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsExtended_extData_set(long jarg1, RsNxsExtended jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsExtended_extData_get(long jarg1, RsNxsExtended jarg1_);
  public final static native void RsNxsExtended_type_set(long jarg1, RsNxsExtended jarg1_, long jarg2);
  public final static native long RsNxsExtended_type_get(long jarg1, RsNxsExtended jarg1_);
  public final static native long new_RsNxsSearchResultMsg();
  public final static native void RsNxsSearchResultMsg_clear(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native long RsNxsSearchResultMsg_print(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSearchResultMsg_token_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2);
  public final static native long RsNxsSearchResultMsg_token_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void RsNxsSearchResultMsg_context_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsSearchResultMsg_context_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void RsNxsSearchResultMsg_msgId_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2);
  public final static native long RsNxsSearchResultMsg_msgId_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void RsNxsSearchResultMsg_grpId_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2);
  public final static native long RsNxsSearchResultMsg_grpId_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void RsNxsSearchResultMsg_idSign_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsNxsSearchResultMsg_idSign_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void RsNxsSearchResultMsg_expiration_set(long jarg1, RsNxsSearchResultMsg jarg1_, long jarg2);
  public final static native long RsNxsSearchResultMsg_expiration_get(long jarg1, RsNxsSearchResultMsg jarg1_);
  public final static native void delete_RsNxsSearchResultMsg(long jarg1);
  public final static native long new_RsNxsSearchResultGrp();
  public final static native void RsNxsSearchResultGrp_clear(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native long RsNxsSearchResultGrp_print(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2, int jarg3);
  public final static native void RsNxsSearchResultGrp_token_set(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2);
  public final static native long RsNxsSearchResultGrp_token_get(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native void RsNxsSearchResultGrp_context_set(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsNxsSearchResultGrp_context_get(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native void RsNxsSearchResultGrp_grpId_set(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2);
  public final static native long RsNxsSearchResultGrp_grpId_get(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native void RsNxsSearchResultGrp_adminSign_set(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsNxsSearchResultGrp_adminSign_get(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native void RsNxsSearchResultGrp_expiration_set(long jarg1, RsNxsSearchResultGrp jarg1_, long jarg2);
  public final static native long RsNxsSearchResultGrp_expiration_get(long jarg1, RsNxsSearchResultGrp jarg1_);
  public final static native void delete_RsNxsSearchResultGrp(long jarg1);
  public final static native long new_RsNxsDeleteMsg();
  public final static native void RsNxsDeleteMsg_msgId_set(long jarg1, RsNxsDeleteMsg jarg1_, long jarg2);
  public final static native long RsNxsDeleteMsg_msgId_get(long jarg1, RsNxsDeleteMsg jarg1_);
  public final static native void RsNxsDeleteMsg_grpId_set(long jarg1, RsNxsDeleteMsg jarg1_, long jarg2);
  public final static native long RsNxsDeleteMsg_grpId_get(long jarg1, RsNxsDeleteMsg jarg1_);
  public final static native void RsNxsDeleteMsg_deleteSign_set(long jarg1, RsNxsDeleteMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsNxsDeleteMsg_deleteSign_get(long jarg1, RsNxsDeleteMsg jarg1_);
  public final static native void delete_RsNxsDeleteMsg(long jarg1);
  public final static native long new_RsNxsDeleteGrp();
  public final static native void RsNxsDeleteGrp_grpId_set(long jarg1, RsNxsDeleteGrp jarg1_, long jarg2);
  public final static native long RsNxsDeleteGrp_grpId_get(long jarg1, RsNxsDeleteGrp jarg1_);
  public final static native void RsNxsDeleteGrp_idSign_set(long jarg1, RsNxsDeleteGrp jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsNxsDeleteGrp_idSign_get(long jarg1, RsNxsDeleteGrp jarg1_);
  public final static native void RsNxsDeleteGrp_deleteSign_set(long jarg1, RsNxsDeleteGrp jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsNxsDeleteGrp_deleteSign_get(long jarg1, RsNxsDeleteGrp jarg1_);
  public final static native void delete_RsNxsDeleteGrp(long jarg1);
  public final static native long new_RsNxsSerialiser(int jarg1);
  public final static native void delete_RsNxsSerialiser(long jarg1);
  public final static native long RsNxsSerialiser_size(long jarg1, RsNxsSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsNxsSerialiser_serialise(long jarg1, RsNxsSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsNxsSerialiser_deserialise(long jarg1, RsNxsSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short ContentValue_INT32_TYPE_get();
  public final static native short ContentValue_INT64_TYPE_get();
  public final static native short ContentValue_DOUBLE_TYPE_get();
  public final static native short ContentValue_STRING_TYPE_get();
  public final static native short ContentValue_DATA_TYPE_get();
  public final static native short ContentValue_BOOL_TYPE_get();
  public final static native long new_ContentValue__SWIG_0();
  public final static native long new_ContentValue__SWIG_1(long jarg1, ContentValue jarg1_);
  public final static native void delete_ContentValue(long jarg1);
  public final static native void ContentValue_put__SWIG_0(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native void ContentValue_put__SWIG_1(long jarg1, ContentValue jarg1_, long jarg2, boolean jarg3);
  public final static native void ContentValue_put__SWIG_2(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native void ContentValue_put__SWIG_3(long jarg1, ContentValue jarg1_, long jarg2, int jarg3);
  public final static native void ContentValue_put__SWIG_4(long jarg1, ContentValue jarg1_, long jarg2, double jarg3);
  public final static native void ContentValue_put__SWIG_5(long jarg1, ContentValue jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native boolean ContentValue_getAsInt32(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ContentValue_getAsInt64(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ContentValue_getAsBool(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ContentValue_getAsDouble(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ContentValue_getAsString(long jarg1, ContentValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ContentValue_getAsData(long jarg1, ContentValue jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native void ContentValue_getKeyTypeMap(long jarg1, ContentValue jarg1_, long jarg2);
  public final static native boolean ContentValue_removeKeyValue(long jarg1, ContentValue jarg1_, long jarg2);
  public final static native void ContentValue_clear(long jarg1, ContentValue jarg1_);
  public final static native void delete_RsGxsSearchModule(long jarg1);
  public final static native long new_RsGxsSearchModule();
  public final static native long new_MsgLocMetaData__SWIG_0(long jarg1, MsgLocMetaData jarg1_);
  public final static native long new_MsgLocMetaData__SWIG_1();
  public final static native void MsgLocMetaData_msgId_set(long jarg1, MsgLocMetaData jarg1_, long jarg2);
  public final static native long MsgLocMetaData_msgId_get(long jarg1, MsgLocMetaData jarg1_);
  public final static native void MsgLocMetaData_val_set(long jarg1, MsgLocMetaData jarg1_, long jarg2, ContentValue jarg2_);
  public final static native long MsgLocMetaData_val_get(long jarg1, MsgLocMetaData jarg1_);
  public final static native void delete_MsgLocMetaData(long jarg1);
  public final static native long new_GrpLocMetaData__SWIG_0(long jarg1, GrpLocMetaData jarg1_);
  public final static native long new_GrpLocMetaData__SWIG_1();
  public final static native void GrpLocMetaData_grpId_set(long jarg1, GrpLocMetaData jarg1_, long jarg2);
  public final static native long GrpLocMetaData_grpId_get(long jarg1, GrpLocMetaData jarg1_);
  public final static native void GrpLocMetaData_val_set(long jarg1, GrpLocMetaData jarg1_, long jarg2, ContentValue jarg2_);
  public final static native long GrpLocMetaData_val_get(long jarg1, GrpLocMetaData jarg1_);
  public final static native void delete_GrpLocMetaData(long jarg1);
  public final static native long RsGeneralDataService_GXS_MAX_ITEM_SIZE_get();
  public final static native long RsGeneralDataService_MSG_META_SERV_STRING_get();
  public final static native long RsGeneralDataService_MSG_META_STATUS_get();
  public final static native long RsGeneralDataService_GRP_META_SUBSCRIBE_FLAG_get();
  public final static native long RsGeneralDataService_GRP_META_STATUS_get();
  public final static native long RsGeneralDataService_GRP_META_SERV_STRING_get();
  public final static native void delete_RsGeneralDataService(long jarg1);
  public final static native int RsGeneralDataService_retrieveNxsMsgs__SWIG_0(long jarg1, RsGeneralDataService jarg1_, long jarg2, long jarg3, boolean jarg4, boolean jarg5);
  public final static native int RsGeneralDataService_retrieveNxsMsgs__SWIG_1(long jarg1, RsGeneralDataService jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native int RsGeneralDataService_retrieveNxsGrps(long jarg1, RsGeneralDataService jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native int RsGeneralDataService_retrieveGxsGrpMetaData(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native int RsGeneralDataService_retrieveGxsMsgMetaData(long jarg1, RsGeneralDataService jarg1_, long jarg2, long jarg3);
  public final static native int RsGeneralDataService_removeMsgs(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native int RsGeneralDataService_removeGroups(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native long RsGeneralDataService_cacheSize(long jarg1, RsGeneralDataService jarg1_);
  public final static native int RsGeneralDataService_setCacheSize(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native int RsGeneralDataService_storeMessage(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native int RsGeneralDataService_storeGroup(long jarg1, RsGeneralDataService jarg1_, long jarg2);
  public final static native int RsGeneralDataService_updateMessageMetaData(long jarg1, RsGeneralDataService jarg1_, long jarg2, MsgLocMetaData jarg2_);
  public final static native int RsGeneralDataService_updateGroupMetaData(long jarg1, RsGeneralDataService jarg1_, long jarg2, GrpLocMetaData jarg2_);
  public final static native int RsGeneralDataService_resetDataStore(long jarg1, RsGeneralDataService jarg1_);
  public final static native boolean RsGeneralDataService_validSize__SWIG_0(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNxsMsg jarg2_);
  public final static native boolean RsGeneralDataService_validSize__SWIG_1(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNxsGrp jarg2_);
  public final static native short RS_PKT_TYPE_FILE_get();
  public final static native short RS_PKT_TYPE_CACHE_get();
  public final static native short RS_PKT_SUBTYPE_FI_REQUEST_get();
  public final static native short RS_PKT_SUBTYPE_FI_DATA_get();
  public final static native short RS_PKT_SUBTYPE_FI_TRANSFER_get();
  public final static native short RS_PKT_SUBTYPE_FI_CHUNK_MAP_REQUEST_get();
  public final static native short RS_PKT_SUBTYPE_FI_CHUNK_MAP_get();
  public final static native short RS_PKT_SUBTYPE_FI_CRC32_MAP_REQUEST_get();
  public final static native short RS_PKT_SUBTYPE_FI_CRC32_MAP_get();
  public final static native short RS_PKT_SUBTYPE_FI_CHUNK_CRC_REQUEST_get();
  public final static native short RS_PKT_SUBTYPE_FI_CHUNK_CRC_get();
  public final static native short RS_PKT_SUBTYPE_CACHE_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_CACHE_REQUEST_get();
  public final static native long new_RsFileRequest();
  public final static native void delete_RsFileRequest(long jarg1);
  public final static native void RsFileRequest_clear(long jarg1, RsFileRequest jarg1_);
  public final static native long RsFileRequest_print__SWIG_0(long jarg1, RsFileRequest jarg1_, long jarg2, int jarg3);
  public final static native long RsFileRequest_print__SWIG_1(long jarg1, RsFileRequest jarg1_, long jarg2);
  public final static native void RsFileRequest_fileoffset_set(long jarg1, RsFileRequest jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsFileRequest_fileoffset_get(long jarg1, RsFileRequest jarg1_);
  public final static native void RsFileRequest_chunksize_set(long jarg1, RsFileRequest jarg1_, long jarg2);
  public final static native long RsFileRequest_chunksize_get(long jarg1, RsFileRequest jarg1_);
  public final static native void RsFileRequest_file_set(long jarg1, RsFileRequest jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsFileRequest_file_get(long jarg1, RsFileRequest jarg1_);
  public final static native long new_RsFileData();
  public final static native void delete_RsFileData(long jarg1);
  public final static native void RsFileData_clear(long jarg1, RsFileData jarg1_);
  public final static native long RsFileData_print__SWIG_0(long jarg1, RsFileData jarg1_, long jarg2, int jarg3);
  public final static native long RsFileData_print__SWIG_1(long jarg1, RsFileData jarg1_, long jarg2);
  public final static native void RsFileData_fd_set(long jarg1, RsFileData jarg1_, long jarg2, RsTlvFileData jarg2_);
  public final static native long RsFileData_fd_get(long jarg1, RsFileData jarg1_);
  public final static native long new_RsFileChunkMapRequest();
  public final static native void delete_RsFileChunkMapRequest(long jarg1);
  public final static native void RsFileChunkMapRequest_clear(long jarg1, RsFileChunkMapRequest jarg1_);
  public final static native void RsFileChunkMapRequest_is_client_set(long jarg1, RsFileChunkMapRequest jarg1_, boolean jarg2);
  public final static native boolean RsFileChunkMapRequest_is_client_get(long jarg1, RsFileChunkMapRequest jarg1_);
  public final static native void RsFileChunkMapRequest_hash_set(long jarg1, RsFileChunkMapRequest jarg1_, long jarg2);
  public final static native long RsFileChunkMapRequest_hash_get(long jarg1, RsFileChunkMapRequest jarg1_);
  public final static native long RsFileChunkMapRequest_print__SWIG_0(long jarg1, RsFileChunkMapRequest jarg1_, long jarg2, int jarg3);
  public final static native long RsFileChunkMapRequest_print__SWIG_1(long jarg1, RsFileChunkMapRequest jarg1_, long jarg2);
  public final static native long new_RsFileChunkMap();
  public final static native void delete_RsFileChunkMap(long jarg1);
  public final static native void RsFileChunkMap_clear(long jarg1, RsFileChunkMap jarg1_);
  public final static native void RsFileChunkMap_is_client_set(long jarg1, RsFileChunkMap jarg1_, boolean jarg2);
  public final static native boolean RsFileChunkMap_is_client_get(long jarg1, RsFileChunkMap jarg1_);
  public final static native void RsFileChunkMap_hash_set(long jarg1, RsFileChunkMap jarg1_, long jarg2);
  public final static native long RsFileChunkMap_hash_get(long jarg1, RsFileChunkMap jarg1_);
  public final static native void RsFileChunkMap_compressed_map_set(long jarg1, RsFileChunkMap jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native long RsFileChunkMap_compressed_map_get(long jarg1, RsFileChunkMap jarg1_);
  public final static native long RsFileChunkMap_print__SWIG_0(long jarg1, RsFileChunkMap jarg1_, long jarg2, int jarg3);
  public final static native long RsFileChunkMap_print__SWIG_1(long jarg1, RsFileChunkMap jarg1_, long jarg2);
  public final static native long new_RsFileCRC32MapRequest();
  public final static native void delete_RsFileCRC32MapRequest(long jarg1);
  public final static native void RsFileCRC32MapRequest_clear(long jarg1, RsFileCRC32MapRequest jarg1_);
  public final static native void RsFileCRC32MapRequest_hash_set(long jarg1, RsFileCRC32MapRequest jarg1_, long jarg2);
  public final static native long RsFileCRC32MapRequest_hash_get(long jarg1, RsFileCRC32MapRequest jarg1_);
  public final static native long RsFileCRC32MapRequest_print__SWIG_0(long jarg1, RsFileCRC32MapRequest jarg1_, long jarg2, int jarg3);
  public final static native long RsFileCRC32MapRequest_print__SWIG_1(long jarg1, RsFileCRC32MapRequest jarg1_, long jarg2);
  public final static native long new_RsFileSingleChunkCrcRequest();
  public final static native void delete_RsFileSingleChunkCrcRequest(long jarg1);
  public final static native void RsFileSingleChunkCrcRequest_clear(long jarg1, RsFileSingleChunkCrcRequest jarg1_);
  public final static native void RsFileSingleChunkCrcRequest_hash_set(long jarg1, RsFileSingleChunkCrcRequest jarg1_, long jarg2);
  public final static native long RsFileSingleChunkCrcRequest_hash_get(long jarg1, RsFileSingleChunkCrcRequest jarg1_);
  public final static native void RsFileSingleChunkCrcRequest_chunk_number_set(long jarg1, RsFileSingleChunkCrcRequest jarg1_, long jarg2);
  public final static native long RsFileSingleChunkCrcRequest_chunk_number_get(long jarg1, RsFileSingleChunkCrcRequest jarg1_);
  public final static native long RsFileSingleChunkCrcRequest_print__SWIG_0(long jarg1, RsFileSingleChunkCrcRequest jarg1_, long jarg2, int jarg3);
  public final static native long RsFileSingleChunkCrcRequest_print__SWIG_1(long jarg1, RsFileSingleChunkCrcRequest jarg1_, long jarg2);
  public final static native long new_RsFileCRC32Map();
  public final static native void delete_RsFileCRC32Map(long jarg1);
  public final static native void RsFileCRC32Map_clear(long jarg1, RsFileCRC32Map jarg1_);
  public final static native void RsFileCRC32Map_hash_set(long jarg1, RsFileCRC32Map jarg1_, long jarg2);
  public final static native long RsFileCRC32Map_hash_get(long jarg1, RsFileCRC32Map jarg1_);
  public final static native void RsFileCRC32Map_crc_map_set(long jarg1, RsFileCRC32Map jarg1_, long jarg2);
  public final static native long RsFileCRC32Map_crc_map_get(long jarg1, RsFileCRC32Map jarg1_);
  public final static native long RsFileCRC32Map_print__SWIG_0(long jarg1, RsFileCRC32Map jarg1_, long jarg2, int jarg3);
  public final static native long RsFileCRC32Map_print__SWIG_1(long jarg1, RsFileCRC32Map jarg1_, long jarg2);
  public final static native long new_RsFileSingleChunkCrc();
  public final static native void delete_RsFileSingleChunkCrc(long jarg1);
  public final static native void RsFileSingleChunkCrc_clear(long jarg1, RsFileSingleChunkCrc jarg1_);
  public final static native void RsFileSingleChunkCrc_hash_set(long jarg1, RsFileSingleChunkCrc jarg1_, long jarg2);
  public final static native long RsFileSingleChunkCrc_hash_get(long jarg1, RsFileSingleChunkCrc jarg1_);
  public final static native void RsFileSingleChunkCrc_chunk_number_set(long jarg1, RsFileSingleChunkCrc jarg1_, long jarg2);
  public final static native long RsFileSingleChunkCrc_chunk_number_get(long jarg1, RsFileSingleChunkCrc jarg1_);
  public final static native void RsFileSingleChunkCrc_check_sum_set(long jarg1, RsFileSingleChunkCrc jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long RsFileSingleChunkCrc_check_sum_get(long jarg1, RsFileSingleChunkCrc jarg1_);
  public final static native long RsFileSingleChunkCrc_print__SWIG_0(long jarg1, RsFileSingleChunkCrc jarg1_, long jarg2, int jarg3);
  public final static native long RsFileSingleChunkCrc_print__SWIG_1(long jarg1, RsFileSingleChunkCrc jarg1_, long jarg2);
  public final static native long new_RsFileItemSerialiser();
  public final static native void delete_RsFileItemSerialiser(long jarg1);
  public final static native long RsFileItemSerialiser_size(long jarg1, RsFileItemSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsFileItemSerialiser_serialise(long jarg1, RsFileItemSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsFileItemSerialiser_deserialise(long jarg1, RsFileItemSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsCacheRequest();
  public final static native void delete_RsCacheRequest(long jarg1);
  public final static native void RsCacheRequest_clear(long jarg1, RsCacheRequest jarg1_);
  public final static native long RsCacheRequest_print__SWIG_0(long jarg1, RsCacheRequest jarg1_, long jarg2, int jarg3);
  public final static native long RsCacheRequest_print__SWIG_1(long jarg1, RsCacheRequest jarg1_, long jarg2);
  public final static native void RsCacheRequest_cacheType_set(long jarg1, RsCacheRequest jarg1_, int jarg2);
  public final static native int RsCacheRequest_cacheType_get(long jarg1, RsCacheRequest jarg1_);
  public final static native void RsCacheRequest_cacheSubId_set(long jarg1, RsCacheRequest jarg1_, int jarg2);
  public final static native int RsCacheRequest_cacheSubId_get(long jarg1, RsCacheRequest jarg1_);
  public final static native void RsCacheRequest_file_set(long jarg1, RsCacheRequest jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsCacheRequest_file_get(long jarg1, RsCacheRequest jarg1_);
  public final static native long new_RsCacheItem();
  public final static native void delete_RsCacheItem(long jarg1);
  public final static native void RsCacheItem_clear(long jarg1, RsCacheItem jarg1_);
  public final static native long RsCacheItem_print__SWIG_0(long jarg1, RsCacheItem jarg1_, long jarg2, int jarg3);
  public final static native long RsCacheItem_print__SWIG_1(long jarg1, RsCacheItem jarg1_, long jarg2);
  public final static native void RsCacheItem_cacheType_set(long jarg1, RsCacheItem jarg1_, int jarg2);
  public final static native int RsCacheItem_cacheType_get(long jarg1, RsCacheItem jarg1_);
  public final static native void RsCacheItem_cacheSubId_set(long jarg1, RsCacheItem jarg1_, int jarg2);
  public final static native int RsCacheItem_cacheSubId_get(long jarg1, RsCacheItem jarg1_);
  public final static native void RsCacheItem_file_set(long jarg1, RsCacheItem jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsCacheItem_file_get(long jarg1, RsCacheItem jarg1_);
  public final static native long new_RsCacheItemSerialiser();
  public final static native void delete_RsCacheItemSerialiser(long jarg1);
  public final static native long RsCacheItemSerialiser_size(long jarg1, RsCacheItemSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsCacheItemSerialiser_serialise(long jarg1, RsCacheItemSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsCacheItemSerialiser_deserialise(long jarg1, RsCacheItemSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsServiceSerialiser();
  public final static native void delete_RsServiceSerialiser(long jarg1);
  public final static native long RsServiceSerialiser_size(long jarg1, RsServiceSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsServiceSerialiser_serialise(long jarg1, RsServiceSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsServiceSerialiser_deserialise(long jarg1, RsServiceSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void delete_SearchInterface(long jarg1);
  public final static native int SearchInterface_SearchSpecific(long jarg1, SearchInterface jarg1_, long jarg2, RsCacheRequest jarg2_);
  public final static native long SearchInterface_RequestedSearch(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendSearchResult(long jarg1, SearchInterface jarg1_, long jarg2, RsCacheItem jarg2_);
  public final static native long SearchInterface_GetSearchResult(long jarg1, SearchInterface jarg1_);
  public final static native long SearchInterface_GetFileRequest(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileRequest(long jarg1, SearchInterface jarg1_, long jarg2, RsFileRequest jarg2_);
  public final static native long SearchInterface_GetFileData(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileData(long jarg1, SearchInterface jarg1_, long jarg2, RsFileData jarg2_);
  public final static native long SearchInterface_GetFileChunkMapRequest(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileChunkMapRequest(long jarg1, SearchInterface jarg1_, long jarg2, RsFileChunkMapRequest jarg2_);
  public final static native long SearchInterface_GetFileChunkMap(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileChunkMap(long jarg1, SearchInterface jarg1_, long jarg2, RsFileChunkMap jarg2_);
  public final static native long SearchInterface_GetFileCRC32MapRequest(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileCRC32MapRequest(long jarg1, SearchInterface jarg1_, long jarg2, RsFileCRC32MapRequest jarg2_);
  public final static native long SearchInterface_GetFileCRC32Map(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileCRC32Map(long jarg1, SearchInterface jarg1_, long jarg2, RsFileCRC32Map jarg2_);
  public final static native long SearchInterface_GetFileSingleChunkCrcRequest(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileSingleChunkCrcRequest(long jarg1, SearchInterface jarg1_, long jarg2, RsFileSingleChunkCrcRequest jarg2_);
  public final static native long SearchInterface_GetFileSingleChunkCrc(long jarg1, SearchInterface jarg1_);
  public final static native int SearchInterface_SendFileSingleChunkCrc(long jarg1, SearchInterface jarg1_, long jarg2, RsFileSingleChunkCrc jarg2_);
  public final static native void delete_P3Interface(long jarg1);
  public final static native int P3Interface_tick(long jarg1, P3Interface jarg1_);
  public final static native int P3Interface_status(long jarg1, P3Interface jarg1_);
  public final static native int P3Interface_SendRsRawItem(long jarg1, P3Interface jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long P3Interface_GetRsRawItem(long jarg1, P3Interface jarg1_);
  public final static native int pqiService_receive(long jarg1, pqiService jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long pqiService_send(long jarg1, pqiService jarg1_);
  public final static native long pqiService_getType(long jarg1, pqiService jarg1_);
  public final static native int pqiService_tick(long jarg1, pqiService jarg1_);
  public final static native long new_p3ServiceServer();
  public final static native int p3ServiceServer_addService(long jarg1, p3ServiceServer jarg1_, long jarg2, pqiService jarg2_);
  public final static native int p3ServiceServer_incoming(long jarg1, p3ServiceServer jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long p3ServiceServer_outgoing(long jarg1, p3ServiceServer jarg1_);
  public final static native int p3ServiceServer_tick(long jarg1, p3ServiceServer jarg1_);
  public final static native void delete_p3ServiceServer(long jarg1);
  public final static native long generateRandomServiceId();
  public final static native void delete_p3Service(long jarg1);
  public final static native int p3Service_sendItem(long jarg1, p3Service jarg1_, long jarg2, RsItem jarg2_);
  public final static native long p3Service_recvItem(long jarg1, p3Service jarg1_);
  public final static native boolean p3Service_receivedItems(long jarg1, p3Service jarg1_);
  public final static native int p3Service_tick(long jarg1, p3Service jarg1_);
  public final static native int p3Service_receive(long jarg1, p3Service jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long p3Service_send(long jarg1, p3Service jarg1_);
  public final static native int nullService_receive(long jarg1, nullService jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long nullService_send(long jarg1, nullService jarg1_);
  public final static native void delete_nullService(long jarg1);
  public final static native void delete_p3ThreadedService(long jarg1);
  public final static native void RsNetworkExchangeService_setSyncAge(long jarg1, RsNetworkExchangeService jarg1_, long jarg2);
  public final static native void RsNetworkExchangeService_requestGroupsOfPeer(long jarg1, RsNetworkExchangeService jarg1_, long jarg2);
  public final static native void RsNetworkExchangeService_requestMessagesOfPeer(long jarg1, RsNetworkExchangeService jarg1_, long jarg2, long jarg3);
  public final static native void RsNetworkExchangeService_pauseSynchronisation(long jarg1, RsNetworkExchangeService jarg1_, boolean jarg2);
  public final static native int RsNetworkExchangeService_requestMsg(long jarg1, RsNetworkExchangeService jarg1_, long jarg2, short jarg3);
  public final static native int RsNetworkExchangeService_requestGrp(long jarg1, RsNetworkExchangeService jarg1_, long jarg2, short jarg3);
  public final static native void delete_RsNetworkExchangeService(long jarg1);
  public final static native int GXS_REQUEST_TYPE_GROUP_DATA_get();
  public final static native int GXS_REQUEST_TYPE_GROUP_META_get();
  public final static native int GXS_REQUEST_TYPE_GROUP_IDS_get();
  public final static native int GXS_REQUEST_TYPE_MSG_DATA_get();
  public final static native int GXS_REQUEST_TYPE_MSG_META_get();
  public final static native int GXS_REQUEST_TYPE_MSG_IDS_get();
  public final static native int GXS_REQUEST_TYPE_MSG_RELATED_DATA_get();
  public final static native int GXS_REQUEST_TYPE_MSG_RELATED_META_get();
  public final static native int GXS_REQUEST_TYPE_MSG_RELATED_IDS_get();
  public final static native int RS_TOKREQOPT_MSG_VERSIONS_get();
  public final static native int RS_TOKREQOPT_MSG_ORIGMSG_get();
  public final static native int RS_TOKREQOPT_MSG_LATEST_get();
  public final static native int RS_TOKREQOPT_MSG_THREAD_get();
  public final static native int RS_TOKREQOPT_MSG_PARENT_get();
  public final static native int RS_TOKREQOPT_MSG_AUTHOR_get();
  public final static native int RS_TOKREQOPT_READ_get();
  public final static native int RS_TOKREQOPT_UNREAD_get();
  public final static native int RS_TOKREQ_ANSTYPE_LIST_get();
  public final static native int RS_TOKREQ_ANSTYPE_SUMMARY_get();
  public final static native int RS_TOKREQ_ANSTYPE_DATA_get();
  public final static native int RS_TOKREQ_ANSTYPE_ACK_get();
  public final static native long new_RsTokReqOptions();
  public final static native void RsTokReqOptions_mOptions_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mOptions_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mStatusFilter_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mStatusFilter_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mStatusMask_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mStatusMask_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mMsgFlagMask_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mMsgFlagMask_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mMsgFlagFilter_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mMsgFlagFilter_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mReqType_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mReqType_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mSubscribeFilter_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mSubscribeFilter_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mSubscribeMask_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mSubscribeMask_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mBefore_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mBefore_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void RsTokReqOptions_mAfter_set(long jarg1, RsTokReqOptions jarg1_, long jarg2);
  public final static native long RsTokReqOptions_mAfter_get(long jarg1, RsTokReqOptions jarg1_);
  public final static native void delete_RsTokReqOptions(long jarg1);
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_FAILED_get();
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_PENDING_get();
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_PARTIAL_get();
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_FINISHED_INCOMPLETE_get();
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_COMPLETE_get();
  public final static native short RsTokenService_GXS_REQUEST_V2_STATUS_DONE_get();
  public final static native void delete_RsTokenService(long jarg1);
  public final static native boolean RsTokenService_requestGroupInfo__SWIG_0(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsTokenService_requestGroupInfo__SWIG_1(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_);
  public final static native boolean RsTokenService_requestMsgInfo__SWIG_0(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsTokenService_requestMsgInfo__SWIG_1(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsTokenService_requestMsgRelatedInfo(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native long RsTokenService_requestStatus(long jarg1, RsTokenService jarg1_, long jarg2);
  public final static native void RsTokenService_requestServiceStatistic(long jarg1, RsTokenService jarg1_, long jarg2);
  public final static native void RsTokenService_requestGroupStatistic(long jarg1, RsTokenService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsTokenService_cancelRequest(long jarg1, RsTokenService jarg1_, long jarg2);
  public final static native void delete_RsGxsNotify(long jarg1);
  public final static native int RsGxsNotify_getType(long jarg1, RsGxsNotify jarg1_);
  public final static native long new_RsGxsGroupChange(int jarg1);
  public final static native void RsGxsGroupChange_mGrpIdList_set(long jarg1, RsGxsGroupChange jarg1_, long jarg2);
  public final static native long RsGxsGroupChange_mGrpIdList_get(long jarg1, RsGxsGroupChange jarg1_);
  public final static native int RsGxsGroupChange_getType(long jarg1, RsGxsGroupChange jarg1_);
  public final static native void delete_RsGxsGroupChange(long jarg1);
  public final static native long new_RsGxsMsgChange(int jarg1);
  public final static native void RsGxsMsgChange_msgChangeMap_set(long jarg1, RsGxsMsgChange jarg1_, long jarg2);
  public final static native long RsGxsMsgChange_msgChangeMap_get(long jarg1, RsGxsMsgChange jarg1_);
  public final static native int RsGxsMsgChange_getType(long jarg1, RsGxsMsgChange jarg1_);
  public final static native void delete_RsGxsMsgChange(long jarg1);
  public final static native void delete_RsGxsIface(long jarg1);
  public final static native void RsGxsIface_receiveChanges(long jarg1, RsGxsIface jarg1_, long jarg2);
  public final static native boolean RsGxsIface_updated__SWIG_0(long jarg1, RsGxsIface jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean RsGxsIface_updated__SWIG_1(long jarg1, RsGxsIface jarg1_, boolean jarg2);
  public final static native boolean RsGxsIface_updated__SWIG_2(long jarg1, RsGxsIface jarg1_);
  public final static native void RsGxsIface_groupsChanged(long jarg1, RsGxsIface jarg1_, long jarg2);
  public final static native void RsGxsIface_msgsChanged(long jarg1, RsGxsIface jarg1_, long jarg2);
  public final static native long RsGxsIface_getTokenService(long jarg1, RsGxsIface jarg1_);
  public final static native boolean RsGxsIface_getGroupList(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getMsgList(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getMsgRelatedList(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getGroupMeta(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getMsgMeta(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getMsgRelatedMeta(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_subscribeToGroup(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGxsIface_acknowledgeTokenMsg(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_acknowledgeTokenGrp(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIface_getServiceStatistic(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3, GxsServiceStatistic jarg3_);
  public final static native boolean RsGxsIface_getGroupStatistic(long jarg1, RsGxsIface jarg1_, long jarg2, long jarg3, GxsGroupStatistic jarg3_);
  public final static native void delete_GxsRequest(long jarg1);
  public final static native void GxsRequest_token_set(long jarg1, GxsRequest jarg1_, long jarg2);
  public final static native long GxsRequest_token_get(long jarg1, GxsRequest jarg1_);
  public final static native void GxsRequest_reqTime_set(long jarg1, GxsRequest jarg1_, long jarg2);
  public final static native long GxsRequest_reqTime_get(long jarg1, GxsRequest jarg1_);
  public final static native void GxsRequest_ansType_set(long jarg1, GxsRequest jarg1_, long jarg2);
  public final static native long GxsRequest_ansType_get(long jarg1, GxsRequest jarg1_);
  public final static native void GxsRequest_reqType_set(long jarg1, GxsRequest jarg1_, long jarg2);
  public final static native long GxsRequest_reqType_get(long jarg1, GxsRequest jarg1_);
  public final static native void GxsRequest_Options_set(long jarg1, GxsRequest jarg1_, long jarg2, RsTokReqOptions jarg2_);
  public final static native long GxsRequest_Options_get(long jarg1, GxsRequest jarg1_);
  public final static native void GxsRequest_status_set(long jarg1, GxsRequest jarg1_, long jarg2);
  public final static native long GxsRequest_status_get(long jarg1, GxsRequest jarg1_);
  public final static native long new_GxsRequest();
  public final static native void GroupMetaReq_mGroupIds_set(long jarg1, GroupMetaReq jarg1_, long jarg2);
  public final static native long GroupMetaReq_mGroupIds_get(long jarg1, GroupMetaReq jarg1_);
  public final static native void GroupMetaReq_mGroupMetaData_set(long jarg1, GroupMetaReq jarg1_, long jarg2);
  public final static native long GroupMetaReq_mGroupMetaData_get(long jarg1, GroupMetaReq jarg1_);
  public final static native long new_GroupMetaReq();
  public final static native void delete_GroupMetaReq(long jarg1);
  public final static native void GroupIdReq_mGroupIds_set(long jarg1, GroupIdReq jarg1_, long jarg2);
  public final static native long GroupIdReq_mGroupIds_get(long jarg1, GroupIdReq jarg1_);
  public final static native void GroupIdReq_mGroupIdResult_set(long jarg1, GroupIdReq jarg1_, long jarg2);
  public final static native long GroupIdReq_mGroupIdResult_get(long jarg1, GroupIdReq jarg1_);
  public final static native long new_GroupIdReq();
  public final static native void delete_GroupIdReq(long jarg1);
  public final static native void GroupDataReq_mGroupIds_set(long jarg1, GroupDataReq jarg1_, long jarg2);
  public final static native long GroupDataReq_mGroupIds_get(long jarg1, GroupDataReq jarg1_);
  public final static native void GroupDataReq_mGroupData_set(long jarg1, GroupDataReq jarg1_, long jarg2);
  public final static native long GroupDataReq_mGroupData_get(long jarg1, GroupDataReq jarg1_);
  public final static native long new_GroupDataReq();
  public final static native void delete_GroupDataReq(long jarg1);
  public final static native void MsgIdReq_mMsgIds_set(long jarg1, MsgIdReq jarg1_, long jarg2);
  public final static native long MsgIdReq_mMsgIds_get(long jarg1, MsgIdReq jarg1_);
  public final static native void MsgIdReq_mMsgIdResult_set(long jarg1, MsgIdReq jarg1_, long jarg2);
  public final static native long MsgIdReq_mMsgIdResult_get(long jarg1, MsgIdReq jarg1_);
  public final static native long new_MsgIdReq();
  public final static native void delete_MsgIdReq(long jarg1);
  public final static native void MsgMetaReq_mMsgIds_set(long jarg1, MsgMetaReq jarg1_, long jarg2);
  public final static native long MsgMetaReq_mMsgIds_get(long jarg1, MsgMetaReq jarg1_);
  public final static native void MsgMetaReq_mMsgMetaData_set(long jarg1, MsgMetaReq jarg1_, long jarg2);
  public final static native long MsgMetaReq_mMsgMetaData_get(long jarg1, MsgMetaReq jarg1_);
  public final static native long new_MsgMetaReq();
  public final static native void delete_MsgMetaReq(long jarg1);
  public final static native void MsgDataReq_mMsgIds_set(long jarg1, MsgDataReq jarg1_, long jarg2);
  public final static native long MsgDataReq_mMsgIds_get(long jarg1, MsgDataReq jarg1_);
  public final static native void MsgDataReq_mMsgData_set(long jarg1, MsgDataReq jarg1_, long jarg2);
  public final static native long MsgDataReq_mMsgData_get(long jarg1, MsgDataReq jarg1_);
  public final static native long new_MsgDataReq();
  public final static native void delete_MsgDataReq(long jarg1);
  public final static native void MsgRelatedInfoReq_mMsgIds_set(long jarg1, MsgRelatedInfoReq jarg1_, long jarg2);
  public final static native long MsgRelatedInfoReq_mMsgIds_get(long jarg1, MsgRelatedInfoReq jarg1_);
  public final static native void MsgRelatedInfoReq_mMsgIdResult_set(long jarg1, MsgRelatedInfoReq jarg1_, long jarg2);
  public final static native long MsgRelatedInfoReq_mMsgIdResult_get(long jarg1, MsgRelatedInfoReq jarg1_);
  public final static native void MsgRelatedInfoReq_mMsgMetaResult_set(long jarg1, MsgRelatedInfoReq jarg1_, long jarg2);
  public final static native long MsgRelatedInfoReq_mMsgMetaResult_get(long jarg1, MsgRelatedInfoReq jarg1_);
  public final static native void MsgRelatedInfoReq_mMsgDataResult_set(long jarg1, MsgRelatedInfoReq jarg1_, long jarg2);
  public final static native long MsgRelatedInfoReq_mMsgDataResult_get(long jarg1, MsgRelatedInfoReq jarg1_);
  public final static native long new_MsgRelatedInfoReq();
  public final static native void delete_MsgRelatedInfoReq(long jarg1);
  public final static native void GroupSetFlagReq_FLAG_SUBSCRIBE_set(long jarg1);
  public final static native long GroupSetFlagReq_FLAG_SUBSCRIBE_get();
  public final static native void GroupSetFlagReq_FLAG_STATUS_set(long jarg1);
  public final static native long GroupSetFlagReq_FLAG_STATUS_get();
  public final static native void GroupSetFlagReq_type_set(long jarg1, GroupSetFlagReq jarg1_, short jarg2);
  public final static native short GroupSetFlagReq_type_get(long jarg1, GroupSetFlagReq jarg1_);
  public final static native void GroupSetFlagReq_flag_set(long jarg1, GroupSetFlagReq jarg1_, long jarg2);
  public final static native long GroupSetFlagReq_flag_get(long jarg1, GroupSetFlagReq jarg1_);
  public final static native void GroupSetFlagReq_flagMask_set(long jarg1, GroupSetFlagReq jarg1_, long jarg2);
  public final static native long GroupSetFlagReq_flagMask_get(long jarg1, GroupSetFlagReq jarg1_);
  public final static native void GroupSetFlagReq_grpId_set(long jarg1, GroupSetFlagReq jarg1_, long jarg2);
  public final static native long GroupSetFlagReq_grpId_get(long jarg1, GroupSetFlagReq jarg1_);
  public final static native long new_GroupSetFlagReq();
  public final static native void delete_GroupSetFlagReq(long jarg1);
  public final static native void MessageSetFlagReq_FLAG_STATUS_set(long jarg1);
  public final static native long MessageSetFlagReq_FLAG_STATUS_get();
  public final static native void MessageSetFlagReq_type_set(long jarg1, MessageSetFlagReq jarg1_, short jarg2);
  public final static native short MessageSetFlagReq_type_get(long jarg1, MessageSetFlagReq jarg1_);
  public final static native void MessageSetFlagReq_flag_set(long jarg1, MessageSetFlagReq jarg1_, long jarg2);
  public final static native long MessageSetFlagReq_flag_get(long jarg1, MessageSetFlagReq jarg1_);
  public final static native void MessageSetFlagReq_flagMask_set(long jarg1, MessageSetFlagReq jarg1_, long jarg2);
  public final static native long MessageSetFlagReq_flagMask_get(long jarg1, MessageSetFlagReq jarg1_);
  public final static native void MessageSetFlagReq_msgId_set(long jarg1, MessageSetFlagReq jarg1_, long jarg2);
  public final static native long MessageSetFlagReq_msgId_get(long jarg1, MessageSetFlagReq jarg1_);
  public final static native long new_MessageSetFlagReq();
  public final static native void delete_MessageSetFlagReq(long jarg1);
  public final static native long new_RsGxsDataAccess(long jarg1, RsGeneralDataService jarg1_);
  public final static native void delete_RsGxsDataAccess(long jarg1);
  public final static native boolean RsGxsDataAccess_requestGroupInfo__SWIG_0(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsGxsDataAccess_requestGroupInfo__SWIG_1(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_);
  public final static native boolean RsGxsDataAccess_requestMsgInfo__SWIG_0(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsGxsDataAccess_requestMsgInfo__SWIG_1(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native boolean RsGxsDataAccess_requestMsgRelatedInfo(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3, long jarg4, RsTokReqOptions jarg4_, long jarg5);
  public final static native void RsGxsDataAccess_requestServiceStatistic(long jarg1, RsGxsDataAccess jarg1_, long jarg2);
  public final static native void RsGxsDataAccess_requestGroupStatistic(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native long RsGxsDataAccess_requestStatus(long jarg1, RsGxsDataAccess jarg1_, long jarg2);
  public final static native boolean RsGxsDataAccess_cancelRequest(long jarg1, RsGxsDataAccess jarg1_, long jarg2);
  public final static native boolean RsGxsDataAccess_addGroupData(long jarg1, RsGxsDataAccess jarg1_, long jarg2, RsNxsGrp jarg2_);
  public final static native boolean RsGxsDataAccess_addMsgData(long jarg1, RsGxsDataAccess jarg1_, long jarg2, RsNxsMsg jarg2_);
  public final static native void RsGxsDataAccess_processRequests(long jarg1, RsGxsDataAccess jarg1_);
  public final static native boolean RsGxsDataAccess_getGroupList(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgList(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgRelatedList(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getGroupSummary(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgSummary(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgRelatedSummary(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getGroupData(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgData(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_getMsgRelatedData(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native long RsGxsDataAccess_generatePublicToken(long jarg1, RsGxsDataAccess jarg1_);
  public final static native boolean RsGxsDataAccess_updatePublicRequestStatus(long jarg1, RsGxsDataAccess jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsDataAccess_disposeOfPublicToken(long jarg1, RsGxsDataAccess jarg1_, long jarg2);
  public final static native void RsNxsObserver_notifyNewMessages(long jarg1, RsNxsObserver jarg1_, long jarg2);
  public final static native void RsNxsObserver_notifyNewGroups(long jarg1, RsNxsObserver jarg1_, long jarg2);
  public final static native void delete_RsNxsObserver(long jarg1);
  public final static native long getMsgIdPair__SWIG_0(long jarg1, RsNxsMsg jarg1_);
  public final static native long getMsgIdPair__SWIG_1(long jarg1, RsGxsMsgItem jarg1_);
  public final static native long new_RsGxsMessageCleanUp(long jarg1, RsGeneralDataService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsMessageCleanUp_clean(long jarg1, RsGxsMessageCleanUp jarg1_);
  public final static native void RsGxsMessageCleanUp_run(long jarg1, RsGxsMessageCleanUp jarg1_);
  public final static native void delete_RsGxsMessageCleanUp(long jarg1);
  public final static native long new_RsGxsIntegrityCheck(long jarg1, RsGeneralDataService jarg1_);
  public final static native boolean RsGxsIntegrityCheck_check(long jarg1, RsGxsIntegrityCheck jarg1_);
  public final static native boolean RsGxsIntegrityCheck_isDone(long jarg1, RsGxsIntegrityCheck jarg1_);
  public final static native void RsGxsIntegrityCheck_run(long jarg1, RsGxsIntegrityCheck jarg1_);
  public final static native void delete_RsGxsIntegrityCheck(long jarg1);
  public final static native int DEFAULT_MSG_STORE_PERIOD_get();
  public final static native long new_GxsGrpPendingSign(long jarg1, RsGxsGrpItem jarg1_, long jarg2);
  public final static native void GxsGrpPendingSign_mLastAttemptTS_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2);
  public final static native long GxsGrpPendingSign_mLastAttemptTS_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mStartTS_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2);
  public final static native long GxsGrpPendingSign_mStartTS_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mToken_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2);
  public final static native long GxsGrpPendingSign_mToken_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mItem_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2, RsGxsGrpItem jarg2_);
  public final static native long GxsGrpPendingSign_mItem_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mHaveKeys_set(long jarg1, GxsGrpPendingSign jarg1_, boolean jarg2);
  public final static native boolean GxsGrpPendingSign_mHaveKeys_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mPrivateKeys_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2, RsTlvSecurityKeySet jarg2_);
  public final static native long GxsGrpPendingSign_mPrivateKeys_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void GxsGrpPendingSign_mPublicKeys_set(long jarg1, GxsGrpPendingSign jarg1_, long jarg2, RsTlvSecurityKeySet jarg2_);
  public final static native long GxsGrpPendingSign_mPublicKeys_get(long jarg1, GxsGrpPendingSign jarg1_);
  public final static native void delete_GxsGrpPendingSign(long jarg1);
  public final static native void delete_RsGenExchange(long jarg1);
  public final static native void RsGenExchange_notifyNewMessages(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native void RsGenExchange_notifyNewGroups(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native void RsGenExchange_tick(long jarg1, RsGenExchange jarg1_);
  public final static native void RsGenExchange_service_tick(long jarg1, RsGenExchange jarg1_);
  public final static native long RsGenExchange_getTokenService(long jarg1, RsGenExchange jarg1_);
  public final static native void RsGenExchange_run(long jarg1, RsGenExchange jarg1_);
  public final static native boolean RsGenExchange_setAuthenPolicyFlag(short jarg1, long jarg2, int jarg3);
  public final static native boolean RsGenExchange_getGroupList(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getMsgList(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getMsgRelatedList(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getGroupMeta(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getMsgMeta(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getMsgRelatedMeta(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native void RsGenExchange_receiveChanges(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native boolean RsGenExchange_updated__SWIG_0(long jarg1, RsGenExchange jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean RsGenExchange_updated__SWIG_1(long jarg1, RsGenExchange jarg1_, boolean jarg2);
  public final static native boolean RsGenExchange_updated__SWIG_2(long jarg1, RsGenExchange jarg1_);
  public final static native void RsGenExchange_groupsChanged(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native void RsGenExchange_msgsChanged(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native boolean RsGenExchange_subscribeToGroup(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGenExchange_getServiceStatistic(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, GxsServiceStatistic jarg3_);
  public final static native boolean RsGenExchange_getGroupStatistic(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, GxsGroupStatistic jarg3_);
  public final static native boolean RsGenExchange_getMsgData(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_getMsgRelatedData(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native long RsGenExchange_generatePublicToken(long jarg1, RsGenExchange jarg1_);
  public final static native boolean RsGenExchange_updatePublicRequestStatus(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_disposeOfPublicToken(long jarg1, RsGenExchange jarg1_, long jarg2);
  public final static native boolean RsGenExchange_acknowledgeTokenMsg(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGenExchange_acknowledgeTokenGrp(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3);
  public final static native void RsGenExchange_publishMsg(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, RsGxsMsgItem jarg3_);
  public final static native void RsGenExchange_setGroupSubscribeFlags(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void RsGenExchange_setGroupStatusFlags(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void RsGenExchange_setGroupServiceString(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RsGenExchange_setMsgStatusFlags(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void RsGenExchange_setMsgServiceString(long jarg1, RsGenExchange jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long FLAG_PRIVACY_MASK_get();
  public final static native long FLAG_PRIVACY_PRIVATE_get();
  public final static native long FLAG_PRIVACY_RESTRICTED_get();
  public final static native long FLAG_PRIVACY_PUBLIC_get();
  public final static native long FLAG_AUTHEN_MASK_get();
  public final static native long FLAG_AUTHEN_IDENTITY_get();
  public final static native long FLAG_AUTHEN_PUBLISH_get();
  public final static native long FLAG_AUTHEN_ADMIN_get();
  public final static native long FLAG_AUTHEN_PGP_IDENTITY_get();
  public final static native short MSG_AUTHEN_MASK_get();
  public final static native short MSG_AUTHEN_ROOT_PUBLISH_SIGN_get();
  public final static native short MSG_AUTHEN_CHILD_PUBLISH_SIGN_get();
  public final static native short MSG_AUTHEN_ROOT_AUTHOR_SIGN_get();
  public final static native short MSG_AUTHEN_CHILD_AUTHOR_SIGN_get();
  public final static native short GRP_OPTION_AUTHEN_AUTHOR_SIGN_get();
  public final static native long GROUP_SUBSCRIBE_ADMIN_get();
  public final static native long GROUP_SUBSCRIBE_PUBLISH_get();
  public final static native long GROUP_SUBSCRIBE_SUBSCRIBED_get();
  public final static native long GROUP_SUBSCRIBE_NOT_SUBSCRIBED_get();
  public final static native long GROUP_SUBSCRIBE_MASK_get();
  public final static native long GXS_MSG_STATUS_GEN_MASK_get();
  public final static native long GXS_MSG_STATUS_UNPROCESSED_get();
  public final static native long GXS_MSG_STATUS_UNREAD_get();
  public final static native long GXS_MSG_STATUS_READ_get();
  public final static native long GXS_MSG_STATUS_KEEP_get();
  public final static native long GXS_MSG_STATUS_DELETE_get();
  public final static native long GXS_GRP_STATUS_UNPROCESSED_get();
  public final static native long GXS_GRP_STATUS_UNREAD_get();
  public final static native long new_RsGxsIfaceHelper(long jarg1, RsGxsIface jarg1_);
  public final static native void delete_RsGxsIfaceHelper(long jarg1);
  public final static native void RsGxsIfaceHelper_receiveChanges(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2);
  public final static native boolean RsGxsIfaceHelper_updated__SWIG_0(long jarg1, RsGxsIfaceHelper jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean RsGxsIfaceHelper_updated__SWIG_1(long jarg1, RsGxsIfaceHelper jarg1_, boolean jarg2);
  public final static native boolean RsGxsIfaceHelper_updated__SWIG_2(long jarg1, RsGxsIfaceHelper jarg1_);
  public final static native void RsGxsIfaceHelper_groupsChanged(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2);
  public final static native void RsGxsIfaceHelper_msgsChanged(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2);
  public final static native long RsGxsIfaceHelper_getTokenService(long jarg1, RsGxsIfaceHelper jarg1_);
  public final static native boolean RsGxsIfaceHelper_getGroupList(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getMsgList(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getMsgRelatedList(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getGroupSummary(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getMsgSummary(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getMsgrelatedSummary(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_subscribeToGroup(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGxsIfaceHelper_acknowledgeMsg(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_acknowledgeGrp(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsIfaceHelper_getServiceStatistic(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3, GxsServiceStatistic jarg3_);
  public final static native boolean RsGxsIfaceHelper_getGroupStatistic(long jarg1, RsGxsIfaceHelper jarg1_, long jarg2, long jarg3, GxsGroupStatistic jarg3_);
  public final static native void rsIdentity_set(long jarg1, RsIdentity jarg1_);
  public final static native long rsIdentity_get();
  public final static native int RSGXSID_GROUPFLAG_REALID_get();
  public final static native int RSID_TYPE_MASK_get();
  public final static native int RSID_RELATION_MASK_get();
  public final static native int RSID_TYPE_REALID_get();
  public final static native int RSID_TYPE_PSEUDONYM_get();
  public final static native int RSID_RELATION_YOURSELF_get();
  public final static native int RSID_RELATION_FRIEND_get();
  public final static native int RSID_RELATION_FOF_get();
  public final static native int RSID_RELATION_OTHER_get();
  public final static native int RSID_RELATION_UNKNOWN_get();
  public final static native long rsIdTypeToString(long jarg1);
  public final static native long new_RsGxsIdGroup();
  public final static native void RsGxsIdGroup_mMeta_set(long jarg1, RsGxsIdGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsGxsIdGroup_mMeta_get(long jarg1, RsGxsIdGroup jarg1_);
  public final static native void RsGxsIdGroup_mPgpIdHash_set(long jarg1, RsGxsIdGroup jarg1_, long jarg2);
  public final static native long RsGxsIdGroup_mPgpIdHash_get(long jarg1, RsGxsIdGroup jarg1_);
  public final static native void RsGxsIdGroup_mPgpIdSign_set(long jarg1, RsGxsIdGroup jarg1_, long jarg2);
  public final static native long RsGxsIdGroup_mPgpIdSign_get(long jarg1, RsGxsIdGroup jarg1_);
  public final static native void RsGxsIdGroup_mPgpKnown_set(long jarg1, RsGxsIdGroup jarg1_, boolean jarg2);
  public final static native boolean RsGxsIdGroup_mPgpKnown_get(long jarg1, RsGxsIdGroup jarg1_);
  public final static native void RsGxsIdGroup_mPgpId_set(long jarg1, RsGxsIdGroup jarg1_, long jarg2);
  public final static native long RsGxsIdGroup_mPgpId_get(long jarg1, RsGxsIdGroup jarg1_);
  public final static native void delete_RsGxsIdGroup(long jarg1);
  public final static native void RsGxsIdOpinion_mMeta_set(long jarg1, RsGxsIdOpinion jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsIdOpinion_mMeta_get(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native void RsGxsIdOpinion_mOpinion_set(long jarg1, RsGxsIdOpinion jarg1_, long jarg2);
  public final static native long RsGxsIdOpinion_mOpinion_get(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native void RsGxsIdOpinion_mComment_set(long jarg1, RsGxsIdOpinion jarg1_, long jarg2);
  public final static native long RsGxsIdOpinion_mComment_get(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native void RsGxsIdOpinion_mReputation_set(long jarg1, RsGxsIdOpinion jarg1_, long jarg2);
  public final static native long RsGxsIdOpinion_mReputation_get(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native int RsGxsIdOpinion_getOpinion(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native int RsGxsIdOpinion_getReputation(long jarg1, RsGxsIdOpinion jarg1_);
  public final static native int RsGxsIdOpinion_setOpinion(long jarg1, RsGxsIdOpinion jarg1_, int jarg2);
  public final static native int RsGxsIdOpinion_setReputation(long jarg1, RsGxsIdOpinion jarg1_, int jarg2);
  public final static native long new_RsGxsIdOpinion();
  public final static native void delete_RsGxsIdOpinion(long jarg1);
  public final static native void RsGxsIdComment_mMeta_set(long jarg1, RsGxsIdComment jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsIdComment_mMeta_get(long jarg1, RsGxsIdComment jarg1_);
  public final static native void RsGxsIdComment_mComment_set(long jarg1, RsGxsIdComment jarg1_, long jarg2);
  public final static native long RsGxsIdComment_mComment_get(long jarg1, RsGxsIdComment jarg1_);
  public final static native long new_RsGxsIdComment();
  public final static native void delete_RsGxsIdComment(long jarg1);
  public final static native long new_RsIdentityDetails();
  public final static native void RsIdentityDetails_mId_set(long jarg1, RsIdentityDetails jarg1_, long jarg2);
  public final static native long RsIdentityDetails_mId_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mNickname_set(long jarg1, RsIdentityDetails jarg1_, long jarg2);
  public final static native long RsIdentityDetails_mNickname_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mIsOwnId_set(long jarg1, RsIdentityDetails jarg1_, boolean jarg2);
  public final static native boolean RsIdentityDetails_mIsOwnId_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mPgpLinked_set(long jarg1, RsIdentityDetails jarg1_, boolean jarg2);
  public final static native boolean RsIdentityDetails_mPgpLinked_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mPgpKnown_set(long jarg1, RsIdentityDetails jarg1_, boolean jarg2);
  public final static native boolean RsIdentityDetails_mPgpKnown_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mPgpId_set(long jarg1, RsIdentityDetails jarg1_, long jarg2);
  public final static native long RsIdentityDetails_mPgpId_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mOpinion_set(long jarg1, RsIdentityDetails jarg1_, double jarg2);
  public final static native double RsIdentityDetails_mOpinion_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void RsIdentityDetails_mReputation_set(long jarg1, RsIdentityDetails jarg1_, double jarg2);
  public final static native double RsIdentityDetails_mReputation_get(long jarg1, RsIdentityDetails jarg1_);
  public final static native void delete_RsIdentityDetails(long jarg1);
  public final static native void RsIdOpinion_id_set(long jarg1, RsIdOpinion jarg1_, long jarg2);
  public final static native long RsIdOpinion_id_get(long jarg1, RsIdOpinion jarg1_);
  public final static native void RsIdOpinion_rating_set(long jarg1, RsIdOpinion jarg1_, int jarg2);
  public final static native int RsIdOpinion_rating_get(long jarg1, RsIdOpinion jarg1_);
  public final static native long new_RsIdOpinion();
  public final static native void delete_RsIdOpinion(long jarg1);
  public final static native long new_RsIdentityParameters();
  public final static native void RsIdentityParameters_isPgpLinked_set(long jarg1, RsIdentityParameters jarg1_, boolean jarg2);
  public final static native boolean RsIdentityParameters_isPgpLinked_get(long jarg1, RsIdentityParameters jarg1_);
  public final static native void RsIdentityParameters_nickname_set(long jarg1, RsIdentityParameters jarg1_, long jarg2);
  public final static native long RsIdentityParameters_nickname_get(long jarg1, RsIdentityParameters jarg1_);
  public final static native void delete_RsIdentityParameters(long jarg1);
  public final static native void delete_RsIdentity(long jarg1);
  public final static native boolean RsIdentity_getIdDetails(long jarg1, RsIdentity jarg1_, long jarg2, long jarg3, RsIdentityDetails jarg3_);
  public final static native boolean RsIdentity_getOwnIds(long jarg1, RsIdentity jarg1_, long jarg2);
  public final static native boolean RsIdentity_submitOpinion(long jarg1, RsIdentity jarg1_, long jarg2, long jarg3, RsIdOpinion jarg3_);
  public final static native boolean RsIdentity_createIdentity(long jarg1, RsIdentity jarg1_, long jarg2, long jarg3, RsIdentityParameters jarg3_);
  public final static native boolean RsIdentity_getGroupData(long jarg1, RsIdentity jarg1_, long jarg2, long jarg3);
  public final static native boolean RsIdentity_getMsgData(long jarg1, RsIdentity jarg1_, long jarg2, long jarg3);
  public final static native void rsGxsCircles_set(long jarg1, RsGxsCircles jarg1_);
  public final static native long rsGxsCircles_get();
  public final static native int GXS_CIRCLE_TYPE_PUBLIC_get();
  public final static native int GXS_CIRCLE_TYPE_EXTERNAL_get();
  public final static native int GXS_CIRCLE_TYPE_YOUREYESONLY_get();
  public final static native int GXS_CIRCLE_TYPE_LOCAL_get();
  public final static native int GXS_CIRCLE_TYPE_EXT_SELF_get();
  public final static native void GxsPermissions_mCircleType_set(long jarg1, GxsPermissions jarg1_, long jarg2);
  public final static native long GxsPermissions_mCircleType_get(long jarg1, GxsPermissions jarg1_);
  public final static native void GxsPermissions_mCircleId_set(long jarg1, GxsPermissions jarg1_, long jarg2);
  public final static native long GxsPermissions_mCircleId_get(long jarg1, GxsPermissions jarg1_);
  public final static native void GxsPermissions_mOriginator_set(long jarg1, GxsPermissions jarg1_, long jarg2);
  public final static native long GxsPermissions_mOriginator_get(long jarg1, GxsPermissions jarg1_);
  public final static native void GxsPermissions_mInternalCircle_set(long jarg1, GxsPermissions jarg1_, long jarg2);
  public final static native long GxsPermissions_mInternalCircle_get(long jarg1, GxsPermissions jarg1_);
  public final static native long new_GxsPermissions();
  public final static native void delete_GxsPermissions(long jarg1);
  public final static native void RsGxsCircleGroup_mMeta_set(long jarg1, RsGxsCircleGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsGxsCircleGroup_mMeta_get(long jarg1, RsGxsCircleGroup jarg1_);
  public final static native void RsGxsCircleGroup_mLocalFriends_set(long jarg1, RsGxsCircleGroup jarg1_, long jarg2);
  public final static native long RsGxsCircleGroup_mLocalFriends_get(long jarg1, RsGxsCircleGroup jarg1_);
  public final static native void RsGxsCircleGroup_mInvitedMembers_set(long jarg1, RsGxsCircleGroup jarg1_, long jarg2);
  public final static native long RsGxsCircleGroup_mInvitedMembers_get(long jarg1, RsGxsCircleGroup jarg1_);
  public final static native void RsGxsCircleGroup_mSubCircles_set(long jarg1, RsGxsCircleGroup jarg1_, long jarg2);
  public final static native long RsGxsCircleGroup_mSubCircles_get(long jarg1, RsGxsCircleGroup jarg1_);
  public final static native long new_RsGxsCircleGroup();
  public final static native void delete_RsGxsCircleGroup(long jarg1);
  public final static native void RsGxsCircleMsg_mMeta_set(long jarg1, RsGxsCircleMsg jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsCircleMsg_mMeta_get(long jarg1, RsGxsCircleMsg jarg1_);
  public final static native void RsGxsCircleMsg_stuff_set(long jarg1, RsGxsCircleMsg jarg1_, long jarg2);
  public final static native long RsGxsCircleMsg_stuff_get(long jarg1, RsGxsCircleMsg jarg1_);
  public final static native long new_RsGxsCircleMsg();
  public final static native void delete_RsGxsCircleMsg(long jarg1);
  public final static native void RsGxsCircleDetails_mCircleId_set(long jarg1, RsGxsCircleDetails jarg1_, long jarg2);
  public final static native long RsGxsCircleDetails_mCircleId_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native void RsGxsCircleDetails_mCircleName_set(long jarg1, RsGxsCircleDetails jarg1_, long jarg2);
  public final static native long RsGxsCircleDetails_mCircleName_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native void RsGxsCircleDetails_mCircleType_set(long jarg1, RsGxsCircleDetails jarg1_, long jarg2);
  public final static native long RsGxsCircleDetails_mCircleType_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native void RsGxsCircleDetails_mIsExternal_set(long jarg1, RsGxsCircleDetails jarg1_, boolean jarg2);
  public final static native boolean RsGxsCircleDetails_mIsExternal_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native void RsGxsCircleDetails_mUnknownPeers_set(long jarg1, RsGxsCircleDetails jarg1_, long jarg2);
  public final static native long RsGxsCircleDetails_mUnknownPeers_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native void RsGxsCircleDetails_mAllowedPeers_set(long jarg1, RsGxsCircleDetails jarg1_, long jarg2);
  public final static native long RsGxsCircleDetails_mAllowedPeers_get(long jarg1, RsGxsCircleDetails jarg1_);
  public final static native long new_RsGxsCircleDetails();
  public final static native void delete_RsGxsCircleDetails(long jarg1);
  public final static native void delete_RsGxsCircles(long jarg1);
  public final static native boolean RsGxsCircles_getCircleDetails(long jarg1, RsGxsCircles jarg1_, long jarg2, long jarg3, RsGxsCircleDetails jarg3_);
  public final static native boolean RsGxsCircles_getCircleExternalIdList(long jarg1, RsGxsCircles jarg1_, long jarg2);
  public final static native boolean RsGxsCircles_getCirclePersonalIdList(long jarg1, RsGxsCircles jarg1_, long jarg2);
  public final static native boolean RsGxsCircles_getGroupData(long jarg1, RsGxsCircles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsCircles_createGroup(long jarg1, RsGxsCircles jarg1_, long jarg2, long jarg3, RsGxsCircleGroup jarg3_);
  public final static native boolean RsGixs_haveKey(long jarg1, RsGixs jarg1_, long jarg2);
  public final static native boolean RsGixs_havePrivateKey(long jarg1, RsGixs jarg1_, long jarg2);
  public final static native boolean RsGixs_requestKey(long jarg1, RsGixs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGixs_requestPrivateKey(long jarg1, RsGixs jarg1_, long jarg2);
  public final static native int RsGixs_getKey(long jarg1, RsGixs jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native int RsGixs_getPrivateKey(long jarg1, RsGixs jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native void delete_RsGixs(long jarg1);
  public final static native long new_GixsReputation();
  public final static native void GixsReputation_id_set(long jarg1, GixsReputation jarg1_, long jarg2);
  public final static native long GixsReputation_id_get(long jarg1, GixsReputation jarg1_);
  public final static native void GixsReputation_score_set(long jarg1, GixsReputation jarg1_, int jarg2);
  public final static native int GixsReputation_score_get(long jarg1, GixsReputation jarg1_);
  public final static native void delete_GixsReputation(long jarg1);
  public final static native boolean RsGixsReputation_haveReputation(long jarg1, RsGixsReputation jarg1_, long jarg2);
  public final static native boolean RsGixsReputation_loadReputation(long jarg1, RsGixsReputation jarg1_, long jarg2);
  public final static native boolean RsGixsReputation_getReputation(long jarg1, RsGixsReputation jarg1_, long jarg2, long jarg3, GixsReputation jarg3_);
  public final static native void delete_RsGixsReputation(long jarg1);
  public final static native void delete_RsGxsIdExchange(long jarg1);
  public final static native boolean RsGcxs_isLoaded(long jarg1, RsGcxs jarg1_, long jarg2);
  public final static native boolean RsGcxs_loadCircle(long jarg1, RsGcxs jarg1_, long jarg2);
  public final static native int RsGcxs_canSend(long jarg1, RsGcxs jarg1_, long jarg2, long jarg3);
  public final static native int RsGcxs_canReceive(long jarg1, RsGcxs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGcxs_recipients(long jarg1, RsGcxs jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsGcxs(long jarg1);
  public final static native void delete_RsGxsCircleExchange(long jarg1);
  public final static native short NxsTransaction_FLAG_STATE_STARTING_get();
  public final static native short NxsTransaction_FLAG_STATE_RECEIVING_get();
  public final static native short NxsTransaction_FLAG_STATE_SENDING_get();
  public final static native short NxsTransaction_FLAG_STATE_COMPLETED_get();
  public final static native short NxsTransaction_FLAG_STATE_FAILED_get();
  public final static native short NxsTransaction_FLAG_STATE_WAITING_CONFIRM_get();
  public final static native long new_NxsTransaction();
  public final static native void delete_NxsTransaction(long jarg1);
  public final static native void NxsTransaction_mFlag_set(long jarg1, NxsTransaction jarg1_, long jarg2);
  public final static native long NxsTransaction_mFlag_get(long jarg1, NxsTransaction jarg1_);
  public final static native void NxsTransaction_mTimeOut_set(long jarg1, NxsTransaction jarg1_, long jarg2);
  public final static native long NxsTransaction_mTimeOut_get(long jarg1, NxsTransaction jarg1_);
  public final static native void NxsTransaction_mTransaction_set(long jarg1, NxsTransaction jarg1_, long jarg2, RsNxsTransac jarg2_);
  public final static native long NxsTransaction_mTransaction_get(long jarg1, NxsTransaction jarg1_);
  public final static native void NxsTransaction_mItems_set(long jarg1, NxsTransaction jarg1_, long jarg2);
  public final static native long NxsTransaction_mItems_get(long jarg1, NxsTransaction jarg1_);
  public final static native void delete_RsNxsNetMgr(long jarg1);
  public final static native long RsNxsNetMgr_getOwnId(long jarg1, RsNxsNetMgr jarg1_);
  public final static native void RsNxsNetMgr_getOnlineList(long jarg1, RsNxsNetMgr jarg1_, long jarg2);
  public final static native long new_RsNxsNetMgrImpl(long jarg1, p3LinkMgr jarg1_);
  public final static native void delete_RsNxsNetMgrImpl(long jarg1);
  public final static native long RsNxsNetMgrImpl_getOwnId(long jarg1, RsNxsNetMgrImpl jarg1_);
  public final static native void RsNxsNetMgrImpl_getOnlineList(long jarg1, RsNxsNetMgrImpl jarg1_, long jarg2);
  public final static native int AuthorPending_MSG_PEND_get();
  public final static native int AuthorPending_GRP_PEND_get();
  public final static native long AuthorPending_EXPIRY_PERIOD_OFFSET_get();
  public final static native void delete_AuthorPending(long jarg1);
  public final static native int AuthorPending_getType(long jarg1, AuthorPending jarg1_);
  public final static native boolean AuthorPending_accepted(long jarg1, AuthorPending jarg1_);
  public final static native boolean AuthorPending_expired(long jarg1, AuthorPending jarg1_);
  public final static native long new_MsgAuthEntry();
  public final static native void MsgAuthEntry_mMsgId_set(long jarg1, MsgAuthEntry jarg1_, long jarg2);
  public final static native long MsgAuthEntry_mMsgId_get(long jarg1, MsgAuthEntry jarg1_);
  public final static native void MsgAuthEntry_mGrpId_set(long jarg1, MsgAuthEntry jarg1_, long jarg2);
  public final static native long MsgAuthEntry_mGrpId_get(long jarg1, MsgAuthEntry jarg1_);
  public final static native void MsgAuthEntry_mAuthorId_set(long jarg1, MsgAuthEntry jarg1_, long jarg2);
  public final static native long MsgAuthEntry_mAuthorId_get(long jarg1, MsgAuthEntry jarg1_);
  public final static native void MsgAuthEntry_mPassedVetting_set(long jarg1, MsgAuthEntry jarg1_, boolean jarg2);
  public final static native boolean MsgAuthEntry_mPassedVetting_get(long jarg1, MsgAuthEntry jarg1_);
  public final static native void delete_MsgAuthEntry(long jarg1);
  public final static native long new_GrpAuthEntry();
  public final static native void GrpAuthEntry_mGrpId_set(long jarg1, GrpAuthEntry jarg1_, long jarg2);
  public final static native long GrpAuthEntry_mGrpId_get(long jarg1, GrpAuthEntry jarg1_);
  public final static native void GrpAuthEntry_mAuthorId_set(long jarg1, GrpAuthEntry jarg1_, long jarg2);
  public final static native long GrpAuthEntry_mAuthorId_get(long jarg1, GrpAuthEntry jarg1_);
  public final static native void GrpAuthEntry_mPassedVetting_set(long jarg1, GrpAuthEntry jarg1_, boolean jarg2);
  public final static native boolean GrpAuthEntry_mPassedVetting_get(long jarg1, GrpAuthEntry jarg1_);
  public final static native void delete_GrpAuthEntry(long jarg1);
  public final static native long new_MsgRespPending__SWIG_0(long jarg1, RsGixsReputation jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_MsgRespPending__SWIG_1(long jarg1, RsGixsReputation jarg1_, long jarg2, long jarg3);
  public final static native int MsgRespPending_getType(long jarg1, MsgRespPending jarg1_);
  public final static native boolean MsgRespPending_accepted(long jarg1, MsgRespPending jarg1_);
  public final static native void MsgRespPending_mPeerId_set(long jarg1, MsgRespPending jarg1_, long jarg2);
  public final static native long MsgRespPending_mPeerId_get(long jarg1, MsgRespPending jarg1_);
  public final static native void MsgRespPending_mMsgAuthV_set(long jarg1, MsgRespPending jarg1_, long jarg2);
  public final static native long MsgRespPending_mMsgAuthV_get(long jarg1, MsgRespPending jarg1_);
  public final static native void MsgRespPending_mCutOff_set(long jarg1, MsgRespPending jarg1_, int jarg2);
  public final static native int MsgRespPending_mCutOff_get(long jarg1, MsgRespPending jarg1_);
  public final static native void delete_MsgRespPending(long jarg1);
  public final static native long new_GrpRespPending__SWIG_0(long jarg1, RsGixsReputation jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_GrpRespPending__SWIG_1(long jarg1, RsGixsReputation jarg1_, long jarg2, long jarg3);
  public final static native int GrpRespPending_getType(long jarg1, GrpRespPending jarg1_);
  public final static native boolean GrpRespPending_accepted(long jarg1, GrpRespPending jarg1_);
  public final static native void GrpRespPending_mPeerId_set(long jarg1, GrpRespPending jarg1_, long jarg2);
  public final static native long GrpRespPending_mPeerId_get(long jarg1, GrpRespPending jarg1_);
  public final static native void GrpRespPending_mGrpAuthV_set(long jarg1, GrpRespPending jarg1_, long jarg2);
  public final static native long GrpRespPending_mGrpAuthV_get(long jarg1, GrpRespPending jarg1_);
  public final static native void GrpRespPending_mCutOff_set(long jarg1, GrpRespPending jarg1_, int jarg2);
  public final static native int GrpRespPending_mCutOff_get(long jarg1, GrpRespPending jarg1_);
  public final static native void delete_GrpRespPending(long jarg1);
  public final static native long new_GrpIdCircleVet(long jarg1, long jarg2);
  public final static native void GrpIdCircleVet_mGroupId_set(long jarg1, GrpIdCircleVet jarg1_, long jarg2);
  public final static native long GrpIdCircleVet_mGroupId_get(long jarg1, GrpIdCircleVet jarg1_);
  public final static native void GrpIdCircleVet_mCircleId_set(long jarg1, GrpIdCircleVet jarg1_, long jarg2);
  public final static native long GrpIdCircleVet_mCircleId_get(long jarg1, GrpIdCircleVet jarg1_);
  public final static native void GrpIdCircleVet_mCleared_set(long jarg1, GrpIdCircleVet jarg1_, boolean jarg2);
  public final static native boolean GrpIdCircleVet_mCleared_get(long jarg1, GrpIdCircleVet jarg1_);
  public final static native void delete_GrpIdCircleVet(long jarg1);
  public final static native long new_MsgIdCircleVet(long jarg1, long jarg2);
  public final static native void MsgIdCircleVet_mMsgId_set(long jarg1, MsgIdCircleVet jarg1_, long jarg2);
  public final static native long MsgIdCircleVet_mMsgId_get(long jarg1, MsgIdCircleVet jarg1_);
  public final static native void MsgIdCircleVet_mAuthorId_set(long jarg1, MsgIdCircleVet jarg1_, long jarg2);
  public final static native long MsgIdCircleVet_mAuthorId_get(long jarg1, MsgIdCircleVet jarg1_);
  public final static native void delete_MsgIdCircleVet(long jarg1);
  public final static native void GrpItemCircleVet_grpItem_set(long jarg1, GrpItemCircleVet jarg1_, long jarg2, RsNxsGrp jarg2_);
  public final static native long GrpItemCircleVet_grpItem_get(long jarg1, GrpItemCircleVet jarg1_);
  public final static native void GrpItemCircleVet_mCircleId_set(long jarg1, GrpItemCircleVet jarg1_, long jarg2);
  public final static native long GrpItemCircleVet_mCircleId_get(long jarg1, GrpItemCircleVet jarg1_);
  public final static native void GrpItemCircleVet_mCleared_set(long jarg1, GrpItemCircleVet jarg1_, boolean jarg2);
  public final static native boolean GrpItemCircleVet_mCleared_get(long jarg1, GrpItemCircleVet jarg1_);
  public final static native long new_GrpItemCircleVet();
  public final static native void delete_GrpItemCircleVet(long jarg1);
  public final static native long GrpCircleVetting_EXPIRY_PERIOD_OFFSET_get();
  public final static native int GrpCircleVetting_GRP_ID_PEND_get();
  public final static native int GrpCircleVetting_GRP_ITEM_PEND_get();
  public final static native int GrpCircleVetting_MSG_ID_SEND_PEND_get();
  public final static native int GrpCircleVetting_MSG_ID_RECV_PEND_get();
  public final static native void delete_GrpCircleVetting(long jarg1);
  public final static native boolean GrpCircleVetting_expired(long jarg1, GrpCircleVetting jarg1_);
  public final static native int GrpCircleVetting_getType(long jarg1, GrpCircleVetting jarg1_);
  public final static native boolean GrpCircleVetting_cleared(long jarg1, GrpCircleVetting jarg1_);
  public final static native long new_GrpCircleIdRequestVetting(long jarg1, RsGcxs jarg1_, long jarg2, long jarg3);
  public final static native boolean GrpCircleIdRequestVetting_cleared(long jarg1, GrpCircleIdRequestVetting jarg1_);
  public final static native int GrpCircleIdRequestVetting_getType(long jarg1, GrpCircleIdRequestVetting jarg1_);
  public final static native void GrpCircleIdRequestVetting_mGrpCircleV_set(long jarg1, GrpCircleIdRequestVetting jarg1_, long jarg2);
  public final static native long GrpCircleIdRequestVetting_mGrpCircleV_get(long jarg1, GrpCircleIdRequestVetting jarg1_);
  public final static native void GrpCircleIdRequestVetting_mPeerId_set(long jarg1, GrpCircleIdRequestVetting jarg1_, long jarg2);
  public final static native long GrpCircleIdRequestVetting_mPeerId_get(long jarg1, GrpCircleIdRequestVetting jarg1_);
  public final static native void delete_GrpCircleIdRequestVetting(long jarg1);
  public final static native long new_MsgCircleIdsRequestVetting(long jarg1, RsGcxs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean MsgCircleIdsRequestVetting_cleared(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native int MsgCircleIdsRequestVetting_getType(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native void MsgCircleIdsRequestVetting_mMsgs_set(long jarg1, MsgCircleIdsRequestVetting jarg1_, long jarg2);
  public final static native long MsgCircleIdsRequestVetting_mMsgs_get(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native void MsgCircleIdsRequestVetting_mGrpId_set(long jarg1, MsgCircleIdsRequestVetting jarg1_, long jarg2);
  public final static native long MsgCircleIdsRequestVetting_mGrpId_get(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native void MsgCircleIdsRequestVetting_mPeerId_set(long jarg1, MsgCircleIdsRequestVetting jarg1_, long jarg2);
  public final static native long MsgCircleIdsRequestVetting_mPeerId_get(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native void MsgCircleIdsRequestVetting_mCircleId_set(long jarg1, MsgCircleIdsRequestVetting jarg1_, long jarg2);
  public final static native long MsgCircleIdsRequestVetting_mCircleId_get(long jarg1, MsgCircleIdsRequestVetting jarg1_);
  public final static native void delete_MsgCircleIdsRequestVetting(long jarg1);
  public final static native void RsPeerGroupInfo_group_id_set(long jarg1, RsPeerGroupInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsPeerGroupInfo_group_id_get(long jarg1, RsPeerGroupInfo jarg1_);
  public final static native void RsPeerGroupInfo_group_name_set(long jarg1, RsPeerGroupInfo jarg1_, long jarg2);
  public final static native long RsPeerGroupInfo_group_name_get(long jarg1, RsPeerGroupInfo jarg1_);
  public final static native void RsPeerGroupInfo_elements_set(long jarg1, RsPeerGroupInfo jarg1_, long jarg2);
  public final static native long RsPeerGroupInfo_elements_get(long jarg1, RsPeerGroupInfo jarg1_);
  public final static native long new_RsPeerGroupInfo();
  public final static native void delete_RsPeerGroupInfo(long jarg1);
  public final static native long GroupFlagsMatrix_GROUP_MATRIX_FLAG_DISCOVERY_get();
  public final static native long GroupFlagsMatrix_GROUP_MATRIX_FLAG_TURTLE_get();
  public final static native long GroupFlagsMatrix_GROUP_MATRIX_FLAG_PUBLIC_LOBBY_get();
  public final static native long GroupFlagsMatrix_GROUP_MATRIX_FLAG_RELAY_get();
  public final static native long GroupFlagsMatrix_getGroupFlags(long jarg1, GroupFlagsMatrix jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3);
  public final static native void GroupFlagsMatrix_setGroupFlags(long jarg1, GroupFlagsMatrix jarg1_, long jarg2, java.math.BigInteger jarg3, java.math.BigInteger jarg4);
  public final static native boolean GroupFlagsMatrix_groupPermission(long jarg1, GroupFlagsMatrix jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long new_GroupFlagsMatrix();
  public final static native void delete_GroupFlagsMatrix(long jarg1);
  public final static native boolean RsGroupManagement_getGroupInfo(long jarg1, RsGroupManagement jarg1_, java.math.BigInteger jarg2, long jarg3, RsPeerGroupInfo jarg3_);
  public final static native boolean RsGroupManagement_allow_TwoPeers_TurtleTraffic(long jarg1, RsGroupManagement jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGroupManagement_allow_TwoPeers_Discovery(long jarg1, RsGroupManagement jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGroupManagement_allow_TwoPeers_LobbyAdvertisement(long jarg1, RsGroupManagement jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGroupManagement_allow_TwoPeers_GeneralExchangeService(long jarg1, RsGroupManagement jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsGroupManagement(long jarg1);
  public final static native void delete_p3GroupManagement(long jarg1);
  public final static native void rsGroups_set(long jarg1, RsGroupManagement jarg1_);
  public final static native long rsGroups_get();
  public final static native long RsGxsNetService_FRAGMENT_SIZE_get();
  public final static native long new_RsGxsNetService__SWIG_0(int jarg1, long jarg2, RsGeneralDataService jarg2_, long jarg3, RsNxsNetMgr jarg3_, long jarg4, RsNxsObserver jarg4_, long jarg5, RsGixsReputation jarg5_, long jarg6, RsGcxs jarg6_);
  public final static native long new_RsGxsNetService__SWIG_1(int jarg1, long jarg2, RsGeneralDataService jarg2_, long jarg3, RsNxsNetMgr jarg3_, long jarg4, RsNxsObserver jarg4_, long jarg5, RsGixsReputation jarg5_);
  public final static native long new_RsGxsNetService__SWIG_2(int jarg1, long jarg2, RsGeneralDataService jarg2_, long jarg3, RsNxsNetMgr jarg3_, long jarg4, RsNxsObserver jarg4_);
  public final static native long new_RsGxsNetService__SWIG_3(int jarg1, long jarg2, RsGeneralDataService jarg2_, long jarg3, RsNxsNetMgr jarg3_);
  public final static native void delete_RsGxsNetService(long jarg1);
  public final static native void RsGxsNetService_setSyncAge(long jarg1, RsGxsNetService jarg1_, long jarg2);
  public final static native void RsGxsNetService_requestGroupsOfPeer(long jarg1, RsGxsNetService jarg1_, long jarg2);
  public final static native void RsGxsNetService_requestMessagesOfPeer(long jarg1, RsGxsNetService jarg1_, long jarg2, long jarg3);
  public final static native void RsGxsNetService_pauseSynchronisation(long jarg1, RsGxsNetService jarg1_, boolean jarg2);
  public final static native int RsGxsNetService_requestMsg(long jarg1, RsGxsNetService jarg1_, long jarg2, short jarg3);
  public final static native int RsGxsNetService_requestGrp(long jarg1, RsGxsNetService jarg1_, long jarg2, short jarg3);
  public final static native boolean RsGxsNetService_loadList(long jarg1, RsGxsNetService jarg1_, long jarg2);
  public final static native boolean RsGxsNetService_saveList(long jarg1, RsGxsNetService jarg1_, long jarg2, long jarg3);
  public final static native long RsGxsNetService_setupSerialiser(long jarg1, RsGxsNetService jarg1_);
  public final static native int RsGxsNetService_tick(long jarg1, RsGxsNetService jarg1_);
  public final static native void RsGxsNetService_run(long jarg1, RsGxsNetService jarg1_);
  public final static native int RetroBind_BLOB_get();
  public final static native boolean RetroBind_bind(long jarg1, RetroBind jarg1_, long jarg2);
  public final static native int RetroBind_getType(long jarg1, RetroBind jarg1_);
  public final static native int RetroBind_getIndex(long jarg1, RetroBind jarg1_);
  public final static native void delete_RetroBind(long jarg1);
  public final static native long new_RsDoubleBind(double jarg1, int jarg2);
  public final static native boolean RsDoubleBind_bind(long jarg1, RsDoubleBind jarg1_, long jarg2);
  public final static native void RsDoubleBind_mValue_set(long jarg1, RsDoubleBind jarg1_, double jarg2);
  public final static native double RsDoubleBind_mValue_get(long jarg1, RsDoubleBind jarg1_);
  public final static native void delete_RsDoubleBind(long jarg1);
  public final static native long new_RsStringBind(long jarg1, int jarg2);
  public final static native boolean RsStringBind_bind(long jarg1, RsStringBind jarg1_, long jarg2);
  public final static native void RsStringBind_mValue_set(long jarg1, RsStringBind jarg1_, long jarg2);
  public final static native long RsStringBind_mValue_get(long jarg1, RsStringBind jarg1_);
  public final static native void delete_RsStringBind(long jarg1);
  public final static native long new_RsInt32Bind(int jarg1, int jarg2);
  public final static native boolean RsInt32Bind_bind(long jarg1, RsInt32Bind jarg1_, long jarg2);
  public final static native void RsInt32Bind_mValue_set(long jarg1, RsInt32Bind jarg1_, int jarg2);
  public final static native int RsInt32Bind_mValue_get(long jarg1, RsInt32Bind jarg1_);
  public final static native void delete_RsInt32Bind(long jarg1);
  public final static native long new_RsInt64bind(long jarg1, int jarg2);
  public final static native boolean RsInt64bind_bind(long jarg1, RsInt64bind jarg1_, long jarg2);
  public final static native void RsInt64bind_mValue_set(long jarg1, RsInt64bind jarg1_, long jarg2);
  public final static native long RsInt64bind_mValue_get(long jarg1, RsInt64bind jarg1_);
  public final static native void delete_RsInt64bind(long jarg1);
  public final static native long new_RsBoolBind(boolean jarg1, int jarg2);
  public final static native boolean RsBoolBind_bind(long jarg1, RsBoolBind jarg1_, long jarg2);
  public final static native void RsBoolBind_mValue_set(long jarg1, RsBoolBind jarg1_, boolean jarg2);
  public final static native boolean RsBoolBind_mValue_get(long jarg1, RsBoolBind jarg1_);
  public final static native void delete_RsBoolBind(long jarg1);
  public final static native long new_RsBlobBind(String jarg1, long jarg2, int jarg3);
  public final static native boolean RsBlobBind_bind(long jarg1, RsBlobBind jarg1_, long jarg2);
  public final static native void RsBlobBind_mData_set(long jarg1, RsBlobBind jarg1_, String jarg2);
  public final static native String RsBlobBind_mData_get(long jarg1, RsBlobBind jarg1_);
  public final static native void RsBlobBind_mDataLen_set(long jarg1, RsBlobBind jarg1_, long jarg2);
  public final static native long RsBlobBind_mDataLen_get(long jarg1, RsBlobBind jarg1_);
  public final static native void delete_RsBlobBind(long jarg1);
  public final static native long new_RetroDb__SWIG_0(long jarg1, int jarg2, long jarg3);
  public final static native long new_RetroDb__SWIG_1(long jarg1, int jarg2);
  public final static native void delete_RetroDb(long jarg1);
  public final static native long RetroDb_getKey(long jarg1, RetroDb jarg1_);
  public final static native boolean RetroDb_openDb__SWIG_0(long jarg1, RetroDb jarg1_, long jarg2, int jarg3);
  public final static native boolean RetroDb_openDb__SWIG_1(long jarg1, RetroDb jarg1_, long jarg2);
  public final static native void RetroDb_closeDb(long jarg1, RetroDb jarg1_);
  public final static native boolean RetroDb_isOpen(long jarg1, RetroDb jarg1_);
  public final static native boolean RetroDb_execSQL(long jarg1, RetroDb jarg1_, long jarg2);
  public final static native boolean RetroDb_sqlInsert(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, long jarg4, ContentValue jarg4_);
  public final static native boolean RetroDb_sqlUpdate(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, long jarg4, ContentValue jarg4_);
  public final static native long RetroDb_sqlQuery(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RetroDb_sqlDelete(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RetroDb_vacuum(long jarg1, RetroDb jarg1_);
  public final static native void RetroDb_buildInsertQueryValue(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, ContentValue jarg3_, long jarg4, long jarg5);
  public final static native void RetroDb_buildUpdateQueryValue(long jarg1, RetroDb jarg1_, long jarg2, long jarg3, ContentValue jarg3_, long jarg4, long jarg5);
  public final static native int RetroDb_OPEN_READONLY_get();
  public final static native int RetroDb_OPEN_READWRITE_get();
  public final static native int RetroDb_OPEN_READWRITE_CREATE_get();
  public final static native long new_RetroCursor(long jarg1);
  public final static native void delete_RetroCursor(long jarg1);
  public final static native boolean RetroCursor_moveToFirst(long jarg1, RetroCursor jarg1_);
  public final static native boolean RetroCursor_moveToNext(long jarg1, RetroCursor jarg1_);
  public final static native boolean RetroCursor_moveToLast(long jarg1, RetroCursor jarg1_);
  public final static native int RetroCursor_getPosition(long jarg1, RetroCursor jarg1_);
  public final static native boolean RetroCursor_isOpen(long jarg1, RetroCursor jarg1_);
  public final static native boolean RetroCursor_close(long jarg1, RetroCursor jarg1_);
  public final static native int RetroCursor_getResultCount(long jarg1, RetroCursor jarg1_);
  public final static native boolean RetroCursor_open(long jarg1, RetroCursor jarg1_, long jarg2);
  public final static native int RetroCursor_getInt32(long jarg1, RetroCursor jarg1_, int jarg2);
  public final static native long RetroCursor_getInt64(long jarg1, RetroCursor jarg1_, int jarg2);
  public final static native double RetroCursor_getDouble(long jarg1, RetroCursor jarg1_, int jarg2);
  public final static native boolean RetroCursor_getBool(long jarg1, RetroCursor jarg1_, int jarg2);
  public final static native void RetroCursor_getString(long jarg1, RetroCursor jarg1_, int jarg2, long jarg3);
  public final static native long RetroCursor_getData(long jarg1, RetroCursor jarg1_, int jarg2, long jarg3);
  public final static native long new_MsgOffset();
  public final static native void MsgOffset_msgId_set(long jarg1, MsgOffset jarg1_, long jarg2);
  public final static native long MsgOffset_msgId_get(long jarg1, MsgOffset jarg1_);
  public final static native void MsgOffset_msgOffset_set(long jarg1, MsgOffset jarg1_, long jarg2);
  public final static native long MsgOffset_msgOffset_get(long jarg1, MsgOffset jarg1_);
  public final static native void MsgOffset_msgLen_set(long jarg1, MsgOffset jarg1_, long jarg2);
  public final static native long MsgOffset_msgLen_get(long jarg1, MsgOffset jarg1_);
  public final static native void delete_MsgOffset(long jarg1);
  public final static native void MsgUpdate_msgId_set(long jarg1, MsgUpdate jarg1_, long jarg2);
  public final static native long MsgUpdate_msgId_get(long jarg1, MsgUpdate jarg1_);
  public final static native void MsgUpdate_cv_set(long jarg1, MsgUpdate jarg1_, long jarg2, ContentValue jarg2_);
  public final static native long MsgUpdate_cv_get(long jarg1, MsgUpdate jarg1_);
  public final static native long new_MsgUpdate();
  public final static native void delete_MsgUpdate(long jarg1);
  public final static native long new_RsDataService__SWIG_0(long jarg1, long jarg2, int jarg3, long jarg4, RsGxsSearchModule jarg4_, long jarg5);
  public final static native long new_RsDataService__SWIG_1(long jarg1, long jarg2, int jarg3, long jarg4, RsGxsSearchModule jarg4_);
  public final static native long new_RsDataService__SWIG_2(long jarg1, long jarg2, int jarg3);
  public final static native void delete_RsDataService(long jarg1);
  public final static native int RsDataService_retrieveNxsMsgs__SWIG_0(long jarg1, RsDataService jarg1_, long jarg2, long jarg3, boolean jarg4, boolean jarg5);
  public final static native int RsDataService_retrieveNxsMsgs__SWIG_1(long jarg1, RsDataService jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native int RsDataService_retrieveNxsGrps(long jarg1, RsDataService jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native int RsDataService_retrieveGxsGrpMetaData(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native int RsDataService_retrieveGxsMsgMetaData(long jarg1, RsDataService jarg1_, long jarg2, long jarg3);
  public final static native int RsDataService_removeMsgs(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native int RsDataService_removeGroups(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native long RsDataService_cacheSize(long jarg1, RsDataService jarg1_);
  public final static native int RsDataService_setCacheSize(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native int RsDataService_storeMessage(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native int RsDataService_storeGroup(long jarg1, RsDataService jarg1_, long jarg2);
  public final static native int RsDataService_updateMessageMetaData(long jarg1, RsDataService jarg1_, long jarg2, MsgLocMetaData jarg2_);
  public final static native int RsDataService_updateGroupMetaData(long jarg1, RsDataService jarg1_, long jarg2, GrpLocMetaData jarg2_);
  public final static native int RsDataService_resetDataStore(long jarg1, RsDataService jarg1_);
  public final static native boolean RsDataService_validSize__SWIG_0(long jarg1, RsDataService jarg1_, long jarg2, RsNxsMsg jarg2_);
  public final static native boolean RsDataService_validSize__SWIG_1(long jarg1, RsDataService jarg1_, long jarg2, RsNxsGrp jarg2_);
  public final static native long new_GxsSecurity();
  public final static native void delete_GxsSecurity(long jarg1);
  public final static native long GxsSecurity_extractPublicKey(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native long GxsSecurity_extractPrivateKey(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void GxsSecurity_setRSAPublicKey(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native void GxsSecurity_setRSAPrivateKey(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long GxsSecurity_getRsaKeySign(long jarg1);
  public final static native long GxsSecurity_getBinDataSign(long jarg1, int jarg2);
  public final static native boolean GxsSecurity_encrypt(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GxsSecurity_decrypt(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean GxsSecurity_validateNxsGrp(long jarg1, RsNxsGrp jarg1_, long jarg2, RsTlvKeySignature jarg2_, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native boolean GxsSecurity_validateNxsMsg(long jarg1, RsNxsMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native boolean GxsSecurity_getSignature(String jarg1, long jarg2, long jarg3, RsTlvSecurityKey jarg3_, long jarg4, RsTlvKeySignature jarg4_);
  public final static native long new_GxsTokenQueueItem__SWIG_0(long jarg1, long jarg2);
  public final static native long new_GxsTokenQueueItem__SWIG_1();
  public final static native void GxsTokenQueueItem_mToken_set(long jarg1, GxsTokenQueueItem jarg1_, long jarg2);
  public final static native long GxsTokenQueueItem_mToken_get(long jarg1, GxsTokenQueueItem jarg1_);
  public final static native void GxsTokenQueueItem_mReqType_set(long jarg1, GxsTokenQueueItem jarg1_, long jarg2);
  public final static native long GxsTokenQueueItem_mReqType_get(long jarg1, GxsTokenQueueItem jarg1_);
  public final static native void delete_GxsTokenQueueItem(long jarg1);
  public final static native long new_GxsTokenQueue(long jarg1, RsGenExchange jarg1_);
  public final static native boolean GxsTokenQueue_queueRequest(long jarg1, GxsTokenQueue jarg1_, long jarg2, long jarg3);
  public final static native void GxsTokenQueue_checkRequests(long jarg1, GxsTokenQueue jarg1_);
  public final static native void delete_GxsTokenQueue(long jarg1);
  public final static native long new_pqistore(long jarg1, RsSerialiser jarg1_, long jarg2, long jarg3, BinInterface jarg3_, int jarg4);
  public final static native void delete_pqistore(long jarg1);
  public final static native int pqistore_SendItem(long jarg1, pqistore jarg1_, long jarg2, RsItem jarg2_);
  public final static native long pqistore_GetItem(long jarg1, pqistore jarg1_);
  public final static native int pqistore_tick(long jarg1, pqistore jarg1_);
  public final static native int pqistore_status(long jarg1, pqistore jarg1_);
  public final static native long pqistore_gethash(long jarg1, pqistore jarg1_);
  public final static native long new_pqiSSLstore(long jarg1, RsSerialiser jarg1_, long jarg2, long jarg3, BinEncryptedFileInterface jarg3_, int jarg4);
  public final static native void delete_pqiSSLstore(long jarg1);
  public final static native boolean pqiSSLstore_encryptedSendItems(long jarg1, pqiSSLstore jarg1_, long jarg2);
  public final static native boolean pqiSSLstore_getEncryptedItems(long jarg1, pqiSSLstore jarg1_, long jarg2);
  public final static native long new_CacheId__SWIG_0();
  public final static native long new_CacheId__SWIG_1(int jarg1, int jarg2);
  public final static native void CacheId_type_set(long jarg1, CacheId jarg1_, int jarg2);
  public final static native int CacheId_type_get(long jarg1, CacheId jarg1_);
  public final static native void CacheId_subid_set(long jarg1, CacheId jarg1_, int jarg2);
  public final static native int CacheId_subid_get(long jarg1, CacheId jarg1_);
  public final static native void delete_CacheId(long jarg1);
  public final static native void RsCacheData_pid_set(long jarg1, RsCacheData jarg1_, long jarg2);
  public final static native long RsCacheData_pid_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_cid_set(long jarg1, RsCacheData jarg1_, long jarg2, CacheId jarg2_);
  public final static native long RsCacheData_cid_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_path_set(long jarg1, RsCacheData jarg1_, long jarg2);
  public final static native long RsCacheData_path_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_name_set(long jarg1, RsCacheData jarg1_, long jarg2);
  public final static native long RsCacheData_name_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_hash_set(long jarg1, RsCacheData jarg1_, long jarg2);
  public final static native long RsCacheData_hash_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_size_set(long jarg1, RsCacheData jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsCacheData_size_get(long jarg1, RsCacheData jarg1_);
  public final static native void RsCacheData_recvd_set(long jarg1, RsCacheData jarg1_, long jarg2);
  public final static native long RsCacheData_recvd_get(long jarg1, RsCacheData jarg1_);
  public final static native long new_RsCacheData();
  public final static native void delete_RsCacheData(long jarg1);
  public final static native long new_CacheTransfer(long jarg1, CacheStrapper jarg1_);
  public final static native void delete_CacheTransfer(long jarg1);
  public final static native boolean CacheTransfer_FindCacheFile(long jarg1, CacheTransfer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean CacheTransfer_RequestCache(long jarg1, CacheTransfer jarg1_, long jarg2, RsCacheData jarg2_, long jarg3, CacheStore jarg3_);
  public final static native long new_CacheSource(int jarg1, boolean jarg2, long jarg3, CacheStrapper jarg3_, long jarg4);
  public final static native void delete_CacheSource(long jarg1);
  public final static native boolean CacheSource_cachesAvailable(long jarg1, CacheSource jarg1_, long jarg2, long jarg3);
  public final static native boolean CacheSource_loadLocalCache(long jarg1, CacheSource jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean CacheSource_refreshCache__SWIG_0(long jarg1, CacheSource jarg1_, long jarg2, RsCacheData jarg2_, long jarg3);
  public final static native boolean CacheSource_refreshCache__SWIG_1(long jarg1, CacheSource jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean CacheSource_clearCache(long jarg1, CacheSource jarg1_, long jarg2, CacheId jarg2_);
  public final static native boolean CacheSource_isPeerAcceptedAsCacheReceiver(long jarg1, CacheSource jarg1_, long jarg2);
  public final static native long CacheSource_getCacheDir(long jarg1, CacheSource jarg1_);
  public final static native boolean CacheSource_isMultiCache(long jarg1, CacheSource jarg1_);
  public final static native int CacheSource_getCacheType(long jarg1, CacheSource jarg1_);
  public final static native void CacheSource_listCaches(long jarg1, CacheSource jarg1_, long jarg2);
  public final static native boolean CacheSource_findCache(long jarg1, CacheSource jarg1_, long jarg2, long jarg3, RsCacheData jarg3_);
  public final static native long new_CacheStore(int jarg1, boolean jarg2, long jarg3, CacheStrapper jarg3_, long jarg4, CacheTransfer jarg4_, long jarg5);
  public final static native void delete_CacheStore(long jarg1);
  public final static native boolean CacheStore_getStoredCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean CacheStore_getAllStoredCaches(long jarg1, CacheStore jarg1_, long jarg2);
  public final static native void CacheStore_availableCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native void CacheStore_downloadedCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native void CacheStore_failedCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean CacheStore_isPeerAcceptedAsCacheProvider(long jarg1, CacheStore jarg1_, long jarg2);
  public final static native boolean CacheStore_fetchCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native int CacheStore_nameCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native int CacheStore_loadCache(long jarg1, CacheStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native long CacheStore_getCacheDir(long jarg1, CacheStore jarg1_);
  public final static native boolean CacheStore_isMultiCache(long jarg1, CacheStore jarg1_);
  public final static native int CacheStore_getCacheType(long jarg1, CacheStore jarg1_);
  public final static native void CacheStore_listCaches(long jarg1, CacheStore jarg1_, long jarg2);
  public final static native long new_CachePair__SWIG_0();
  public final static native long new_CachePair__SWIG_1(long jarg1, CacheSource jarg1_, long jarg2, CacheStore jarg2_, long jarg3, CacheId jarg3_);
  public final static native void CachePair_source_set(long jarg1, CachePair jarg1_, long jarg2, CacheSource jarg2_);
  public final static native long CachePair_source_get(long jarg1, CachePair jarg1_);
  public final static native void CachePair_store_set(long jarg1, CachePair jarg1_, long jarg2, CacheStore jarg2_);
  public final static native long CachePair_store_get(long jarg1, CachePair jarg1_);
  public final static native void CachePair_id_set(long jarg1, CachePair jarg1_, long jarg2, CacheId jarg2_);
  public final static native long CachePair_id_get(long jarg1, CachePair jarg1_);
  public final static native void delete_CachePair(long jarg1);
  public final static native long new_CacheStrapper(long jarg1, p3LinkMgr jarg1_);
  public final static native void delete_CacheStrapper(long jarg1);
  public final static native void CacheStrapper_statusChange(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native void CacheStrapper_refreshCache__SWIG_0(long jarg1, CacheStrapper jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native void CacheStrapper_refreshCache__SWIG_1(long jarg1, CacheStrapper jarg1_, long jarg2, RsCacheData jarg2_, long jarg3);
  public final static native void CacheStrapper_refreshCacheStore(long jarg1, CacheStrapper jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean CacheStrapper_getCacheUpdates(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native void CacheStrapper_addCachePair(long jarg1, CacheStrapper jarg1_, long jarg2, CachePair jarg2_);
  public final static native void CacheStrapper_recvCacheResponse(long jarg1, CacheStrapper jarg1_, long jarg2, RsCacheData jarg2_, long jarg3);
  public final static native void CacheStrapper_handleCacheQuery(long jarg1, CacheStrapper jarg1_, long jarg2, long jarg3);
  public final static native boolean CacheStrapper_findCache(long jarg1, CacheStrapper jarg1_, long jarg2, long jarg3, RsCacheData jarg3_);
  public final static native void CacheStrapper_listCaches(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native void CacheStrapper_listPeerStatus(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native boolean CacheStrapper_CacheExist(long jarg1, CacheStrapper jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native short RS_PKT_SUBTYPE_DISTRIB_GRP_get();
  public final static native short RS_PKT_SUBTYPE_DISTRIB_GRP_KEY_get();
  public final static native short RS_PKT_SUBTYPE_DISTRIB_SIGNED_MSG_get();
  public final static native short RS_PKT_SUBTYPE_DISTRIB_CONFIG_DATA_get();
  public final static native long new_RsDistribChildConfig(int jarg1, short jarg2);
  public final static native void delete_RsDistribChildConfig(long jarg1);
  public final static native void RsDistribChildConfig_clear(long jarg1, RsDistribChildConfig jarg1_);
  public final static native long RsDistribChildConfig_print__SWIG_0(long jarg1, RsDistribChildConfig jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribChildConfig_print__SWIG_1(long jarg1, RsDistribChildConfig jarg1_, long jarg2);
  public final static native void RsDistribChildConfig_save_type_set(long jarg1, RsDistribChildConfig jarg1_, long jarg2);
  public final static native long RsDistribChildConfig_save_type_get(long jarg1, RsDistribChildConfig jarg1_);
  public final static native long new_RsDistribConfigData();
  public final static native void delete_RsDistribConfigData(long jarg1);
  public final static native void RsDistribConfigData_clear(long jarg1, RsDistribConfigData jarg1_);
  public final static native long RsDistribConfigData_print__SWIG_0(long jarg1, RsDistribConfigData jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribConfigData_print__SWIG_1(long jarg1, RsDistribConfigData jarg1_, long jarg2);
  public final static native void RsDistribConfigData_service_data_set(long jarg1, RsDistribConfigData jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsDistribConfigData_service_data_get(long jarg1, RsDistribConfigData jarg1_);
  public final static native long new_RsDistribMsg(int jarg1, short jarg2);
  public final static native void delete_RsDistribMsg(long jarg1);
  public final static native void RsDistribMsg_clear(long jarg1, RsDistribMsg jarg1_);
  public final static native long RsDistribMsg_print__SWIG_0(long jarg1, RsDistribMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribMsg_print__SWIG_1(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native void RsDistribMsg_grpId_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_grpId_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_parentId_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_parentId_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_threadId_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_threadId_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_timestamp_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_timestamp_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_msgId_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_msgId_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_childTS_set(long jarg1, RsDistribMsg jarg1_, long jarg2);
  public final static native long RsDistribMsg_childTS_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_publishSignature_set(long jarg1, RsDistribMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsDistribMsg_publishSignature_get(long jarg1, RsDistribMsg jarg1_);
  public final static native void RsDistribMsg_personalSignature_set(long jarg1, RsDistribMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsDistribMsg_personalSignature_get(long jarg1, RsDistribMsg jarg1_);
  public final static native long new_RsDistribSignedMsg();
  public final static native void delete_RsDistribSignedMsg(long jarg1);
  public final static native void RsDistribSignedMsg_clear(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native long RsDistribSignedMsg_print__SWIG_0(long jarg1, RsDistribSignedMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribSignedMsg_print__SWIG_1(long jarg1, RsDistribSignedMsg jarg1_, long jarg2);
  public final static native void RsDistribSignedMsg_grpId_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2);
  public final static native long RsDistribSignedMsg_grpId_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_msgId_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2);
  public final static native long RsDistribSignedMsg_msgId_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_flags_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2);
  public final static native long RsDistribSignedMsg_flags_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_timestamp_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2);
  public final static native long RsDistribSignedMsg_timestamp_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_packet_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsDistribSignedMsg_packet_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_publishSignature_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsDistribSignedMsg_publishSignature_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native void RsDistribSignedMsg_personalSignature_set(long jarg1, RsDistribSignedMsg jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsDistribSignedMsg_personalSignature_get(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native long new_RsDistribGrp();
  public final static native void delete_RsDistribGrp(long jarg1);
  public final static native void RsDistribGrp_clear(long jarg1, RsDistribGrp jarg1_);
  public final static native long RsDistribGrp_print__SWIG_0(long jarg1, RsDistribGrp jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribGrp_print__SWIG_1(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native void RsDistribGrp_grpId_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpId_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_timestamp_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_timestamp_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpFlags_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpFlags_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpName_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpName_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpDesc_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpDesc_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpCategory_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpCategory_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpPixmap_set(long jarg1, RsDistribGrp jarg1_, long jarg2, RsTlvImage jarg2_);
  public final static native long RsDistribGrp_grpPixmap_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpControlFlags_set(long jarg1, RsDistribGrp jarg1_, long jarg2);
  public final static native long RsDistribGrp_grpControlFlags_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_grpControlList_set(long jarg1, RsDistribGrp jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsDistribGrp_grpControlList_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_adminKey_set(long jarg1, RsDistribGrp jarg1_, long jarg2, RsTlvSecurityKey jarg2_);
  public final static native long RsDistribGrp_adminKey_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_publishKeys_set(long jarg1, RsDistribGrp jarg1_, long jarg2, RsTlvSecurityKeySet jarg2_);
  public final static native long RsDistribGrp_publishKeys_get(long jarg1, RsDistribGrp jarg1_);
  public final static native void RsDistribGrp_adminSignature_set(long jarg1, RsDistribGrp jarg1_, long jarg2, RsTlvKeySignature jarg2_);
  public final static native long RsDistribGrp_adminSignature_get(long jarg1, RsDistribGrp jarg1_);
  public final static native long new_RsDistribGrpKey__SWIG_0(int jarg1);
  public final static native long new_RsDistribGrpKey__SWIG_1();
  public final static native void delete_RsDistribGrpKey(long jarg1);
  public final static native void RsDistribGrpKey_clear(long jarg1, RsDistribGrpKey jarg1_);
  public final static native long RsDistribGrpKey_print__SWIG_0(long jarg1, RsDistribGrpKey jarg1_, long jarg2, int jarg3);
  public final static native long RsDistribGrpKey_print__SWIG_1(long jarg1, RsDistribGrpKey jarg1_, long jarg2);
  public final static native void RsDistribGrpKey_grpId_set(long jarg1, RsDistribGrpKey jarg1_, long jarg2);
  public final static native long RsDistribGrpKey_grpId_get(long jarg1, RsDistribGrpKey jarg1_);
  public final static native void RsDistribGrpKey_key_set(long jarg1, RsDistribGrpKey jarg1_, long jarg2, RsTlvSecurityKey jarg2_);
  public final static native long RsDistribGrpKey_key_get(long jarg1, RsDistribGrpKey jarg1_);
  public final static native long new_RsDistribSerialiser__SWIG_0(int jarg1);
  public final static native long new_RsDistribSerialiser__SWIG_1();
  public final static native void delete_RsDistribSerialiser(long jarg1);
  public final static native long RsDistribSerialiser_size(long jarg1, RsDistribSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsDistribSerialiser_serialise(long jarg1, RsDistribSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsDistribSerialiser_deserialise(long jarg1, RsDistribSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long GROUP_MAX_FWD_OFFSET_get();
  public final static native long new_RsDistribDummyMsg__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long new_RsDistribDummyMsg__SWIG_1();
  public final static native void RsDistribDummyMsg_threadId_set(long jarg1, RsDistribDummyMsg jarg1_, long jarg2);
  public final static native long RsDistribDummyMsg_threadId_get(long jarg1, RsDistribDummyMsg jarg1_);
  public final static native void RsDistribDummyMsg_parentId_set(long jarg1, RsDistribDummyMsg jarg1_, long jarg2);
  public final static native long RsDistribDummyMsg_parentId_get(long jarg1, RsDistribDummyMsg jarg1_);
  public final static native void RsDistribDummyMsg_msgId_set(long jarg1, RsDistribDummyMsg jarg1_, long jarg2);
  public final static native long RsDistribDummyMsg_msgId_get(long jarg1, RsDistribDummyMsg jarg1_);
  public final static native void RsDistribDummyMsg_timestamp_set(long jarg1, RsDistribDummyMsg jarg1_, long jarg2);
  public final static native long RsDistribDummyMsg_timestamp_get(long jarg1, RsDistribDummyMsg jarg1_);
  public final static native void RsDistribDummyMsg_childTS_set(long jarg1, RsDistribDummyMsg jarg1_, long jarg2);
  public final static native long RsDistribDummyMsg_childTS_get(long jarg1, RsDistribDummyMsg jarg1_);
  public final static native void delete_RsDistribDummyMsg(long jarg1);
  public final static native long new_GroupKey();
  public final static native void GroupKey_type_set(long jarg1, GroupKey jarg1_, long jarg2);
  public final static native long GroupKey_type_get(long jarg1, GroupKey jarg1_);
  public final static native void GroupKey_keyId_set(long jarg1, GroupKey jarg1_, long jarg2);
  public final static native long GroupKey_keyId_get(long jarg1, GroupKey jarg1_);
  public final static native void GroupKey_startTS_set(long jarg1, GroupKey jarg1_, long jarg2);
  public final static native long GroupKey_startTS_get(long jarg1, GroupKey jarg1_);
  public final static native void GroupKey_endTS_set(long jarg1, GroupKey jarg1_, long jarg2);
  public final static native long GroupKey_endTS_get(long jarg1, GroupKey jarg1_);
  public final static native void GroupKey_key_set(long jarg1, GroupKey jarg1_, long jarg2);
  public final static native long GroupKey_key_get(long jarg1, GroupKey jarg1_);
  public final static native void delete_GroupKey(long jarg1);
  public final static native long new_GroupIcon();
  public final static native void delete_GroupIcon(long jarg1);
  public final static native void GroupIcon_pngImageData_set(long jarg1, GroupIcon jarg1_, long jarg2);
  public final static native long GroupIcon_pngImageData_get(long jarg1, GroupIcon jarg1_);
  public final static native void GroupIcon_imageSize_set(long jarg1, GroupIcon jarg1_, int jarg2);
  public final static native int GroupIcon_imageSize_get(long jarg1, GroupIcon jarg1_);
  public final static native long new_GroupInfo();
  public final static native void delete_GroupInfo(long jarg1);
  public final static native void GroupInfo_grpId_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_grpId_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_distribGroup_set(long jarg1, GroupInfo jarg1_, long jarg2, RsDistribGrp jarg2_);
  public final static native long GroupInfo_distribGroup_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_sources_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_sources_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_msgs_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_msgs_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_dummyMsgs_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_dummyMsgs_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpName_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_grpName_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpDesc_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_grpDesc_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpCategory_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_grpCategory_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpFlags_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_grpFlags_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_pop_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_pop_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_lastPost_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_lastPost_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_flags_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_flags_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_publishKeyId_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_publishKeyId_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_publishKeys_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_publishKeys_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_adminKey_set(long jarg1, GroupInfo jarg1_, long jarg2, GroupKey jarg2_);
  public final static native long GroupInfo_adminKey_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpIcon_set(long jarg1, GroupInfo jarg1_, long jarg2, GroupIcon jarg2_);
  public final static native long GroupInfo_grpIcon_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_decrypted_msg_cache_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_decrypted_msg_cache_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_publisher_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_publisher_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_allowAnon_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_allowAnon_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_allowUnknown_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_allowUnknown_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_subscribed_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_subscribed_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_listener_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_listener_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_type_set(long jarg1, GroupInfo jarg1_, long jarg2);
  public final static native long GroupInfo_type_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupInfo_grpChanged_set(long jarg1, GroupInfo jarg1_, boolean jarg2);
  public final static native boolean GroupInfo_grpChanged_get(long jarg1, GroupInfo jarg1_);
  public final static native void GroupCache_filename_set(long jarg1, GroupCache jarg1_, long jarg2);
  public final static native long GroupCache_filename_get(long jarg1, GroupCache jarg1_);
  public final static native void GroupCache_start_set(long jarg1, GroupCache jarg1_, long jarg2);
  public final static native long GroupCache_start_get(long jarg1, GroupCache jarg1_);
  public final static native void GroupCache_end_set(long jarg1, GroupCache jarg1_, long jarg2);
  public final static native long GroupCache_end_get(long jarg1, GroupCache jarg1_);
  public final static native void GroupCache_cacheSubId_set(long jarg1, GroupCache jarg1_, int jarg2);
  public final static native int GroupCache_cacheSubId_get(long jarg1, GroupCache jarg1_);
  public final static native long new_GroupCache();
  public final static native void delete_GroupCache(long jarg1);
  public final static native long GRP_NEW_UPDATE_get();
  public final static native long GRP_UPDATE_get();
  public final static native long GRP_LOAD_KEY_get();
  public final static native long GRP_NEW_MSG_get();
  public final static native long GRP_SUBSCRIBED_get();
  public final static native long GRP_UNSUBSCRIBED_get();
  public final static native long new_CacheDataPending(long jarg1, RsCacheData jarg1_, boolean jarg2, boolean jarg3);
  public final static native void CacheDataPending_mData_set(long jarg1, CacheDataPending jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native long CacheDataPending_mData_get(long jarg1, CacheDataPending jarg1_);
  public final static native void CacheDataPending_mLocal_set(long jarg1, CacheDataPending jarg1_, boolean jarg2);
  public final static native boolean CacheDataPending_mLocal_get(long jarg1, CacheDataPending jarg1_);
  public final static native void CacheDataPending_mHistorical_set(long jarg1, CacheDataPending jarg1_, boolean jarg2);
  public final static native boolean CacheDataPending_mHistorical_get(long jarg1, CacheDataPending jarg1_);
  public final static native void delete_CacheDataPending(long jarg1);
  public final static native void delete_p3GroupDistrib(long jarg1);
  public final static native boolean p3GroupDistrib_loadLocalCache(long jarg1, p3GroupDistrib jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native int p3GroupDistrib_loadCache(long jarg1, p3GroupDistrib jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native void p3GroupDistrib_run(long jarg1, p3GroupDistrib jarg1_);
  public final static native void p3GroupDistrib_HistoricalCachesDone(long jarg1, p3GroupDistrib jarg1_);
  public final static native long p3GroupDistrib_createGroup(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long p3GroupDistrib_publishMsg(long jarg1, p3GroupDistrib jarg1_, long jarg2, RsDistribMsg jarg2_, boolean jarg3);
  public final static native boolean p3GroupDistrib_subscribeToGroup(long jarg1, p3GroupDistrib jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3GroupDistrib_getAllGroupList(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native boolean p3GroupDistrib_getSubscribedGroupList(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native boolean p3GroupDistrib_getPublishGroupList(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native void p3GroupDistrib_getPopularGroupList(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3GroupDistrib_getAllMsgList(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GroupDistrib_getParentMsgList(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3GroupDistrib_getTimePeriodMsgList(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long p3GroupDistrib_locked_getGroupInfo(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native long p3GroupDistrib_locked_getGroupMsg(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3);
  public final static native void p3GroupDistrib_getGrpListPubKeyAvailable(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native int p3GroupDistrib_tick(long jarg1, p3GroupDistrib jarg1_);
  public final static native void p3GroupDistrib_printGroups(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native boolean p3GroupDistrib_groupsChanged(long jarg1, p3GroupDistrib jarg1_, long jarg2);
  public final static native boolean p3GroupDistrib_locked_CheckNewMsgDummies(long jarg1, p3GroupDistrib jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, RsDistribMsg jarg3_, long jarg4, boolean jarg5);
  public final static native boolean p3GroupDistrib_locked_addDummyMsg(long jarg1, p3GroupDistrib jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3GroupDistrib_locked_clearDummyMsg(long jarg1, p3GroupDistrib jarg1_, long jarg2, GroupInfo jarg2_, long jarg3);
  public final static native boolean p3GroupDistrib_locked_updateDummyChildTS(long jarg1, p3GroupDistrib jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, long jarg4);
  public final static native boolean p3GroupDistrib_locked_printAllDummyMsgs(long jarg1, p3GroupDistrib jarg1_);
  public final static native boolean p3GroupDistrib_locked_printDummyMsgs(long jarg1, p3GroupDistrib jarg1_, long jarg2, GroupInfo jarg2_);
  public final static native boolean p3GroupDistrib_getDummyParentMsgList(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long p3GroupDistrib_locked_getGroupDummyMsg(long jarg1, p3GroupDistrib jarg1_, long jarg2, long jarg3);
  public final static native long new_p3DistribSecurity();
  public final static native void delete_p3DistribSecurity(long jarg1);
  public final static native long p3DistribSecurity_extractPublicKey(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native long p3DistribSecurity_extractPrivateKey(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void p3DistribSecurity_setRSAPublicKey(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native void p3DistribSecurity_setRSAPrivateKey(long jarg1, RsTlvSecurityKey jarg1_, long jarg2);
  public final static native long p3DistribSecurity_getRsaKeySign(long jarg1);
  public final static native long p3DistribSecurity_getBinDataSign(long jarg1, int jarg2);
  public final static native boolean p3DistribSecurity_encrypt(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean p3DistribSecurity_decrypt(long jarg1, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native boolean p3DistribSecurity_validateDistribGrp(long jarg1, RsDistribGrp jarg1_);
  public final static native boolean p3DistribSecurity_validateDistribSignedMsg(long jarg1, GroupInfo jarg1_, long jarg2, RsDistribSignedMsg jarg2_);
  public final static native long new_p3PortService(long jarg1);
  public final static native boolean p3PortService_enablePortForwarding(long jarg1, p3PortService jarg1_, long jarg2, long jarg3);
  public final static native int p3PortService_tick(long jarg1, p3PortService jarg1_);
  public final static native void delete_p3PortService(long jarg1);
  public final static native long RSRandom_random_u32();
  public final static native java.math.BigInteger RSRandom_random_u64();
  public final static native float RSRandom_random_f32();
  public final static native double RSRandom_random_f64();
  public final static native boolean RSRandom_seed(long jarg1);
  public final static native long RSRandom_random_alphaNumericString(long jarg1);
  public final static native void RSRandom_random_bytes(long jarg1, long jarg2);
  public final static native long new_RSRandom();
  public final static native void delete_RSRandom(long jarg1);
  public final static native int KEY_ID_SIZE_get();
  public final static native int KEY_FINGERPRINT_SIZE_get();
  public final static native long new_PGPCertificateInfo();
  public final static native void PGPCertificateInfo__name_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__name_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__email_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__email_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__comment_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__comment_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo_signers_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo_signers_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__trustLvl_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__trustLvl_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__validLvl_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__validLvl_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__flags_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__flags_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__type_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__type_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__time_stamp_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__time_stamp_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__fpr_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__fpr_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native void PGPCertificateInfo__key_index_set(long jarg1, PGPCertificateInfo jarg1_, long jarg2);
  public final static native long PGPCertificateInfo__key_index_get(long jarg1, PGPCertificateInfo jarg1_);
  public final static native long PGPCertificateInfo_PGP_CERTIFICATE_FLAG_ACCEPT_CONNEXION_get();
  public final static native long PGPCertificateInfo_PGP_CERTIFICATE_FLAG_HAS_OWN_SIGNATURE_get();
  public final static native long PGPCertificateInfo_PGP_CERTIFICATE_FLAG_HAS_SIGNED_ME_get();
  public final static native long PGPCertificateInfo_PGP_CERTIFICATE_FLAG_UNSUPPORTED_ALGORITHM_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TRUST_UNDEFINED_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TRUST_NEVER_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TRUST_MARGINALLY_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TRUST_FULLY_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TRUST_ULTIMATE_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TYPE_UNKNOWN_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TYPE_DSA_get();
  public final static native short PGPCertificateInfo_PGP_CERTIFICATE_TYPE_RSA_get();
  public final static native void delete_PGPCertificateInfo(long jarg1);
  public final static native long new_PGPHandler(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void delete_PGPHandler(long jarg1);
  public final static native boolean PGPHandler_getGPGFilteredList__SWIG_0(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3);
  public final static native boolean PGPHandler_getGPGFilteredList__SWIG_1(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_haveSecretKey(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_importGPGKeyPair(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean PGPHandler_exportGPGKeyPair(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3);
  public final static native boolean PGPHandler_availableGPGCertificatesWithPrivateKeys(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_GeneratePGPCertificate(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_LoadCertificateFromString(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long PGPHandler_SaveCertificateToString(long jarg1, PGPHandler jarg1_, long jarg2, boolean jarg3);
  public final static native boolean PGPHandler_exportPublicKey(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, boolean jarg5, boolean jarg6);
  public final static native boolean PGPHandler_SignDataBin__SWIG_0(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, boolean jarg7);
  public final static native boolean PGPHandler_SignDataBin__SWIG_1(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_VerifySignBin(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_privateSignCertificate(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3);
  public final static native boolean PGPHandler_encryptDataBin(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_decryptDataBin(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_encryptTextToFile(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean PGPHandler_decryptTextFromFile(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean PGPHandler_getKeyFingerprint(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3);
  public final static native void PGPHandler_setAcceptConnexion(long jarg1, PGPHandler jarg1_, long jarg2, boolean jarg3);
  public final static native void PGPHandler_updateOwnSignatureFlag__SWIG_0(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native void PGPHandler_updateOwnSignatureFlag__SWIG_1(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3);
  public final static native void PGPHandler_locked_updateOwnSignatureFlag(long jarg1, PGPHandler jarg1_, long jarg2, PGPCertificateInfo jarg2_, long jarg3, long jarg4, PGPCertificateInfo jarg4_, long jarg5);
  public final static native boolean PGPHandler_removeKeysFromPGPKeyring(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean PGPHandler_privateTrustCertificate(long jarg1, PGPHandler jarg1_, long jarg2, int jarg3);
  public final static native long PGPHandler_getCertificateInfo(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_isGPGId(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_isGPGSigned(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native boolean PGPHandler_isGPGAccepted(long jarg1, PGPHandler jarg1_, long jarg2);
  public final static native void PGPHandler_setPassphraseCallback(long jarg1);
  public final static native long PGPHandler_passphraseCallback();
  public final static native boolean PGPHandler_getGPGDetailsFromBinaryBlock(long jarg1, PGPHandler jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean PGPHandler_printKeys(long jarg1, PGPHandler jarg1_);
  public final static native boolean PGPHandler_syncDatabase(long jarg1, PGPHandler jarg1_);
  public final static native boolean PGPKeyManagement_createMinimalKey(long jarg1, long jarg2);
  public final static native void PGPKeyManagement_findLengthOfMinimalKey(long jarg1, long jarg2, long jarg3);
  public final static native long PGPKeyManagement_makeArmouredKey(long jarg1, long jarg2, long jarg3);
  public final static native long PGPKeyManagement_compute24bitsCRC(long jarg1, long jarg2);
  public final static native long new_PGPKeyManagement();
  public final static native void delete_PGPKeyManagement(long jarg1);
  public final static native short PGPKeyParser_PGP_PACKET_TAG_PUBLIC_KEY_get();
  public final static native short PGPKeyParser_PGP_PACKET_TAG_USER_ID_get();
  public final static native short PGPKeyParser_PGP_PACKET_TAG_SIGNATURE_get();
  public final static native java.math.BigInteger PGPKeyParser_read_KeyID(long jarg1);
  public final static native long PGPKeyParser_read_125Size(long jarg1);
  public final static native long PGPKeyParser_read_partialBodyLength(long jarg1);
  public final static native void PGPKeyParser_read_packetHeader(long jarg1, long jarg2, long jarg3);
  public final static native long PGPKeyParser_write_125Size(long jarg1, long jarg2);
  public final static native long PGPKeyParser_extractRadixPartFromArmouredKey(long jarg1, long jarg2);
  public final static native long new_PGPKeyParser();
  public final static native void delete_PGPKeyParser(long jarg1);
  public final static native int SSL_ID_SIZE_get();
  public final static native long new_RsCertificate__SWIG_0(long jarg1);
  public final static native long new_RsCertificate__SWIG_1(long jarg1, RsPeerDetails jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsCertificate(long jarg1);
  public final static native long RsCertificate_toStdString_oldFormat(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_toStdString(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_ext_ip_string(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_loc_ip_string(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_location_name_string(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_dns_string(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_sslid_string(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_armouredPGPKey(long jarg1, RsCertificate jarg1_);
  public final static native int RsCertificate_ext_port_us(long jarg1, RsCertificate jarg1_);
  public final static native int RsCertificate_loc_port_us(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_pgp_key(long jarg1, RsCertificate jarg1_);
  public final static native long RsCertificate_pgp_key_size(long jarg1, RsCertificate jarg1_);
  public final static native boolean RsCertificate_cleanCertificate(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void rsDht_set(long jarg1, RsDht jarg1_);
  public final static native long rsDht_get();
  public final static native int RSDHT_NETSTART_NETWORKMODE_get();
  public final static native int RSDHT_NETSTART_NATTYPE_get();
  public final static native int RSDHT_NETSTART_NATHOLE_get();
  public final static native int RSDHT_NETSTART_CONNECTMODES_get();
  public final static native int RSDHT_NETSTART_NETSTATE_get();
  public final static native int RSDHT_PEERTYPE_ANY_get();
  public final static native int RSDHT_PEERTYPE_OTHER_get();
  public final static native int RSDHT_PEERTYPE_FOF_get();
  public final static native int RSDHT_PEERTYPE_FRIEND_get();
  public final static native int RSDHT_PEERDHT_NOT_ACTIVE_get();
  public final static native int RSDHT_PEERDHT_SEARCHING_get();
  public final static native int RSDHT_PEERDHT_FAILURE_get();
  public final static native int RSDHT_PEERDHT_OFFLINE_get();
  public final static native int RSDHT_PEERDHT_UNREACHABLE_get();
  public final static native int RSDHT_PEERDHT_ONLINE_get();
  public final static native int RSDHT_PEERCONN_DISCONNECTED_get();
  public final static native int RSDHT_PEERCONN_UDP_STARTED_get();
  public final static native int RSDHT_PEERCONN_CONNECTED_get();
  public final static native int RSDHT_PEERREQ_STOPPED_get();
  public final static native int RSDHT_PEERREQ_RUNNING_get();
  public final static native int RSDHT_TOU_MODE_NONE_get();
  public final static native int RSDHT_TOU_MODE_DIRECT_get();
  public final static native int RSDHT_TOU_MODE_PROXY_get();
  public final static native int RSDHT_TOU_MODE_RELAY_get();
  public final static native int RSDHT_RELAY_NUM_CLASS_get();
  public final static native int RSDHT_RELAY_CLASS_ALL_get();
  public final static native int RSDHT_RELAY_CLASS_GENERAL_get();
  public final static native int RSDHT_RELAY_CLASS_FOF_get();
  public final static native int RSDHT_RELAY_CLASS_FRIENDS_get();
  public final static native int RSDHT_RELAY_MODE_MASK_get();
  public final static native int RSDHT_RELAY_ENABLED_get();
  public final static native int RSDHT_RELAY_MODE_OFF_get();
  public final static native int RSDHT_RELAY_MODE_ON_get();
  public final static native int RSDHT_RELAY_MODE_SERVER_get();
  public final static native long new_RsDhtPeer();
  public final static native void RsDhtPeer_mBucket_set(long jarg1, RsDhtPeer jarg1_, int jarg2);
  public final static native int RsDhtPeer_mBucket_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mDhtId_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mDhtId_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mAddr_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mAddr_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mLastSendTime_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mLastSendTime_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mLastRecvTime_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mLastRecvTime_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mFoundTime_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mFoundTime_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mPeerFlags_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mPeerFlags_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void RsDhtPeer_mExtraFlags_set(long jarg1, RsDhtPeer jarg1_, long jarg2);
  public final static native long RsDhtPeer_mExtraFlags_get(long jarg1, RsDhtPeer jarg1_);
  public final static native void delete_RsDhtPeer(long jarg1);
  public final static native long new_RsDhtNetPeer();
  public final static native void RsDhtNetPeer_mDhtId_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mDhtId_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mRsId_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mRsId_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mPeerType_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mPeerType_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mDhtState_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mDhtState_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mConnectState_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mConnectState_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mPeerConnectState_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mPeerConnectState_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mPeerConnectMode_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mPeerConnectMode_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mExclusiveProxyLock_set(long jarg1, RsDhtNetPeer jarg1_, boolean jarg2);
  public final static native boolean RsDhtNetPeer_mExclusiveProxyLock_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mPeerConnectProxyId_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mPeerConnectProxyId_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mPeerReqState_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mPeerReqState_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void RsDhtNetPeer_mCbPeerMsg_set(long jarg1, RsDhtNetPeer jarg1_, long jarg2);
  public final static native long RsDhtNetPeer_mCbPeerMsg_get(long jarg1, RsDhtNetPeer jarg1_);
  public final static native void delete_RsDhtNetPeer(long jarg1);
  public final static native long new_RsDhtRelayEnd();
  public final static native void RsDhtRelayEnd_mLocalAddr_set(long jarg1, RsDhtRelayEnd jarg1_, long jarg2);
  public final static native long RsDhtRelayEnd_mLocalAddr_get(long jarg1, RsDhtRelayEnd jarg1_);
  public final static native void RsDhtRelayEnd_mProxyAddr_set(long jarg1, RsDhtRelayEnd jarg1_, long jarg2);
  public final static native long RsDhtRelayEnd_mProxyAddr_get(long jarg1, RsDhtRelayEnd jarg1_);
  public final static native void RsDhtRelayEnd_mRemoteAddr_set(long jarg1, RsDhtRelayEnd jarg1_, long jarg2);
  public final static native long RsDhtRelayEnd_mRemoteAddr_get(long jarg1, RsDhtRelayEnd jarg1_);
  public final static native void RsDhtRelayEnd_mCreateTS_set(long jarg1, RsDhtRelayEnd jarg1_, long jarg2);
  public final static native long RsDhtRelayEnd_mCreateTS_get(long jarg1, RsDhtRelayEnd jarg1_);
  public final static native void delete_RsDhtRelayEnd(long jarg1);
  public final static native long new_RsDhtRelayProxy();
  public final static native void RsDhtRelayProxy_mSrcAddr_set(long jarg1, RsDhtRelayProxy jarg1_, long jarg2);
  public final static native long RsDhtRelayProxy_mSrcAddr_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void RsDhtRelayProxy_mDestAddr_set(long jarg1, RsDhtRelayProxy jarg1_, long jarg2);
  public final static native long RsDhtRelayProxy_mDestAddr_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void RsDhtRelayProxy_mBandwidth_set(long jarg1, RsDhtRelayProxy jarg1_, double jarg2);
  public final static native double RsDhtRelayProxy_mBandwidth_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void RsDhtRelayProxy_mRelayClass_set(long jarg1, RsDhtRelayProxy jarg1_, int jarg2);
  public final static native int RsDhtRelayProxy_mRelayClass_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void RsDhtRelayProxy_mLastTS_set(long jarg1, RsDhtRelayProxy jarg1_, long jarg2);
  public final static native long RsDhtRelayProxy_mLastTS_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void RsDhtRelayProxy_mCreateTS_set(long jarg1, RsDhtRelayProxy jarg1_, long jarg2);
  public final static native long RsDhtRelayProxy_mCreateTS_get(long jarg1, RsDhtRelayProxy jarg1_);
  public final static native void delete_RsDhtRelayProxy(long jarg1);
  public final static native void delete_RsDht(long jarg1);
  public final static native long RsDht_getNetState(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_getDhtPeers(long jarg1, RsDht jarg1_, int jarg2, long jarg3);
  public final static native int RsDht_getNetPeerList(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_getNetPeerStatus(long jarg1, RsDht jarg1_, long jarg2, long jarg3, RsDhtNetPeer jarg3_);
  public final static native int RsDht_getRelayEnds(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_getRelayProxies(long jarg1, RsDht jarg1_, long jarg2);
  public final static native long RsDht_getUdpAddressString(long jarg1, RsDht jarg1_);
  public final static native void RsDht_getDhtRates(long jarg1, RsDht jarg1_, long jarg2, long jarg3);
  public final static native void RsDht_getRelayRates(long jarg1, RsDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int RsDht_getRelayServerList(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_addRelayServer(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_removeRelayServer(long jarg1, RsDht jarg1_, long jarg2);
  public final static native long RsDht_getRelayMode(long jarg1, RsDht jarg1_);
  public final static native int RsDht_setRelayMode(long jarg1, RsDht jarg1_, long jarg2);
  public final static native int RsDht_getRelayAllowance(long jarg1, RsDht jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native int RsDht_setRelayAllowance(long jarg1, RsDht jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native boolean RsDht_getOwnDhtId(long jarg1, RsDht jarg1_, long jarg2);
  public final static native void rsFiles_set(long jarg1, RsFiles jarg1_);
  public final static native long rsFiles_get();
  public final static native long RS_FILE_CTRL_PAUSE_get();
  public final static native long RS_FILE_CTRL_START_get();
  public final static native long RS_FILE_CTRL_FORCE_CHECK_get();
  public final static native long RS_FILE_RATE_TRICKLE_get();
  public final static native long RS_FILE_RATE_SLOW_get();
  public final static native long RS_FILE_RATE_STANDARD_get();
  public final static native long RS_FILE_RATE_FAST_get();
  public final static native long RS_FILE_RATE_STREAM_AUDIO_get();
  public final static native long RS_FILE_RATE_STREAM_VIDEO_get();
  public final static native long RS_FILE_PEER_ONLINE_get();
  public final static native long RS_FILE_PEER_OFFLINE_get();
  public final static native void SharedDirInfo_filename_set(long jarg1, SharedDirInfo jarg1_, long jarg2);
  public final static native long SharedDirInfo_filename_get(long jarg1, SharedDirInfo jarg1_);
  public final static native void SharedDirInfo_virtualname_set(long jarg1, SharedDirInfo jarg1_, long jarg2);
  public final static native long SharedDirInfo_virtualname_get(long jarg1, SharedDirInfo jarg1_);
  public final static native void SharedDirInfo_shareflags_set(long jarg1, SharedDirInfo jarg1_, long jarg2);
  public final static native long SharedDirInfo_shareflags_get(long jarg1, SharedDirInfo jarg1_);
  public final static native void SharedDirInfo_parent_groups_set(long jarg1, SharedDirInfo jarg1_, long jarg2);
  public final static native long SharedDirInfo_parent_groups_get(long jarg1, SharedDirInfo jarg1_);
  public final static native long new_SharedDirInfo();
  public final static native void delete_SharedDirInfo(long jarg1);
  public final static native void delete_RsFiles(long jarg1);
  public final static native boolean RsFiles_alreadyHaveFile(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean RsFiles_FileRequest(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean RsFiles_FileCancel(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_setDestinationDirectory(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsFiles_setDestinationName(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsFiles_setChunkStrategy(long jarg1, RsFiles jarg1_, long jarg2, int jarg3);
  public final static native void RsFiles_setDefaultChunkStrategy(long jarg1, RsFiles jarg1_, int jarg2);
  public final static native int RsFiles_defaultChunkStrategy(long jarg1, RsFiles jarg1_);
  public final static native long RsFiles_freeDiskSpaceLimit(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_setFreeDiskSpaceLimit(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_FileControl(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsFiles_FileClearCompleted(long jarg1, RsFiles jarg1_);
  public final static native long RsFiles_getMinPrioritizedTransfers(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_setMinPrioritizedTransfers(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native long RsFiles_getQueueSize(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_setQueueSize(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_changeQueuePosition(long jarg1, RsFiles jarg1_, long jarg2, int jarg3);
  public final static native boolean RsFiles_changeDownloadSpeed(long jarg1, RsFiles jarg1_, long jarg2, int jarg3);
  public final static native boolean RsFiles_getDownloadSpeed(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsFiles_clearDownload(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_FileDownloads(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_FileUploads(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_FileDetails(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native boolean RsFiles_FileDownloadChunksDetails(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, FileChunksInfo jarg3_);
  public final static native boolean RsFiles_FileUploadChunksDetails(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_);
  public final static native boolean RsFiles_ExtraFileRemove(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native boolean RsFiles_ExtraFileHash(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsFiles_ExtraFileStatus(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean RsFiles_ExtraFileMove(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5);
  public final static native int RsFiles_RequestDirDetails__SWIG_0(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4, DirDetails jarg4_);
  public final static native int RsFiles_RequestDirDetails__SWIG_1(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, DirDetails jarg3_, long jarg4);
  public final static native long RsFiles_getType(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native int RsFiles_SearchKeywords__SWIG_0(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int RsFiles_SearchKeywords__SWIG_1(long jarg1, RsFiles jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int RsFiles_SearchBoolExp__SWIG_0(long jarg1, RsFiles jarg1_, long jarg2, Expression jarg2_, long jarg3, long jarg4);
  public final static native int RsFiles_SearchBoolExp__SWIG_1(long jarg1, RsFiles jarg1_, long jarg2, Expression jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsFiles_ConvertSharedFilePath(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native void RsFiles_ForceDirectoryCheck(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_updateSinceGroupPermissionsChanged(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_InDirectoryCheck(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_copyFile(long jarg1, RsFiles jarg1_, long jarg2, long jarg3);
  public final static native void RsFiles_setDownloadDirectory(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native void RsFiles_setPartialsDirectory(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native long RsFiles_getDownloadDirectory(long jarg1, RsFiles jarg1_);
  public final static native long RsFiles_getPartialsDirectory(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_getSharedDirectories(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native boolean RsFiles_addSharedDirectory(long jarg1, RsFiles jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native boolean RsFiles_updateShareFlags(long jarg1, RsFiles jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native boolean RsFiles_removeSharedDirectory(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native void RsFiles_setRememberHashFilesDuration(long jarg1, RsFiles jarg1_, long jarg2);
  public final static native long RsFiles_rememberHashFilesDuration(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_clearHashCache(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_rememberHashFiles(long jarg1, RsFiles jarg1_);
  public final static native void RsFiles_setRememberHashFiles(long jarg1, RsFiles jarg1_, boolean jarg2);
  public final static native void RsFiles_setWatchPeriod(long jarg1, RsFiles jarg1_, int jarg2);
  public final static native int RsFiles_watchPeriod(long jarg1, RsFiles jarg1_);
  public final static native long RsFiles_getCacheStrapper(long jarg1, RsFiles jarg1_);
  public final static native long RsFiles_getCacheTransfer(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_getShareDownloadDirectory(long jarg1, RsFiles jarg1_);
  public final static native boolean RsFiles_shareDownloadDirectory(long jarg1, RsFiles jarg1_, boolean jarg2);
  public final static native void rsPeers_set(long jarg1, RsPeers jarg1_);
  public final static native long rsPeers_get();
  public final static native long RS_TRUST_LVL_UNDEFINED_get();
  public final static native long RS_TRUST_LVL_UNKNOWN_get();
  public final static native long RS_TRUST_LVL_NEVER_get();
  public final static native long RS_TRUST_LVL_MARGINAL_get();
  public final static native long RS_TRUST_LVL_FULL_get();
  public final static native long RS_TRUST_LVL_ULTIMATE_get();
  public final static native long RS_NETMODE_UDP_get();
  public final static native long RS_NETMODE_UPNP_get();
  public final static native long RS_NETMODE_EXT_get();
  public final static native long RS_NETMODE_UNREACHABLE_get();
  public final static native long RS_VS_DHT_ON_get();
  public final static native long RS_VS_DISC_ON_get();
  public final static native long RS_PEER_STATE_FRIEND_get();
  public final static native long RS_PEER_STATE_ONLINE_get();
  public final static native long RS_PEER_STATE_CONNECTED_get();
  public final static native long RS_PEER_STATE_UNREACHABLE_get();
  public final static native long RS_PEER_CONNECTSTATE_OFFLINE_get();
  public final static native long RS_PEER_CONNECTSTATE_TRYING_TUNNEL_get();
  public final static native long RS_PEER_CONNECTSTATE_TRYING_TCP_get();
  public final static native long RS_PEER_CONNECTSTATE_TRYING_UDP_get();
  public final static native long RS_PEER_CONNECTSTATE_CONNECTED_TCP_get();
  public final static native long RS_PEER_CONNECTSTATE_CONNECTED_UDP_get();
  public final static native long RS_PEER_CONNECTSTATE_CONNECTED_TUNNEL_get();
  public final static native long RS_PEER_CONNECTSTATE_CONNECTED_UNKNOWN_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_NO_ERROR_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_UNKOWN_ERROR_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_NO_BEGIN_TAG_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_NO_END_TAG_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_NO_CHECKSUM_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_WRONG_NUMBER_get();
  public final static native int RS_PEER_CERT_CLEANING_CODE_WRONG_RADIX_CHAR_get();
  public final static native long CERTIFICATE_PARSING_ERROR_NO_ERROR_get();
  public final static native long CERTIFICATE_PARSING_ERROR_SIZE_ERROR_get();
  public final static native long CERTIFICATE_PARSING_ERROR_INVALID_LOCATION_ID_get();
  public final static native long CERTIFICATE_PARSING_ERROR_INVALID_EXTERNAL_IP_get();
  public final static native long CERTIFICATE_PARSING_ERROR_INVALID_LOCAL_IP_get();
  public final static native long CERTIFICATE_PARSING_ERROR_INVALID_CHECKSUM_SECTION_get();
  public final static native long CERTIFICATE_PARSING_ERROR_CHECKSUM_ERROR_get();
  public final static native long CERTIFICATE_PARSING_ERROR_UNKNOWN_SECTION_PTAG_get();
  public final static native long CERTIFICATE_PARSING_ERROR_MISSING_CHECKSUM_get();
  public final static native long PGP_KEYRING_REMOVAL_ERROR_NO_ERROR_get();
  public final static native long PGP_KEYRING_REMOVAL_ERROR_CANT_REMOVE_SECRET_KEYS_get();
  public final static native long PGP_KEYRING_REMOVAL_ERROR_CANNOT_CREATE_BACKUP_get();
  public final static native long PGP_KEYRING_REMOVAL_ERROR_CANNOT_WRITE_BACKUP_get();
  public final static native long PGP_KEYRING_REMOVAL_ERROR_DATA_INCONSISTENCY_get();
  public final static native long RS_NET_CONN_TRANS_MASK_get();
  public final static native long RS_NET_CONN_TRANS_TCP_MASK_get();
  public final static native long RS_NET_CONN_TRANS_TCP_UNKNOWN_get();
  public final static native long RS_NET_CONN_TRANS_TCP_LOCAL_get();
  public final static native long RS_NET_CONN_TRANS_TCP_EXTERNAL_get();
  public final static native long RS_NET_CONN_TRANS_UDP_MASK_get();
  public final static native long RS_NET_CONN_TRANS_UDP_UNKNOWN_get();
  public final static native long RS_NET_CONN_TRANS_UDP_DIRECT_get();
  public final static native long RS_NET_CONN_TRANS_UDP_PROXY_get();
  public final static native long RS_NET_CONN_TRANS_UDP_RELAY_get();
  public final static native long RS_NET_CONN_TRANS_OTHER_MASK_get();
  public final static native long RS_NET_CONN_TRANS_TUNNEL_get();
  public final static native long RS_NET_CONN_TRANS_UNKNOWN_get();
  public final static native long RS_NET_CONN_SPEED_MASK_get();
  public final static native long RS_NET_CONN_SPEED_UNKNOWN_get();
  public final static native long RS_NET_CONN_SPEED_TRICKLE_get();
  public final static native long RS_NET_CONN_SPEED_LOW_get();
  public final static native long RS_NET_CONN_SPEED_NORMAL_get();
  public final static native long RS_NET_CONN_SPEED_HIGH_get();
  public final static native long RS_NET_CONN_QUALITY_MASK_get();
  public final static native long RS_NET_CONN_QUALITY_UNKNOWN_get();
  public final static native long RS_NET_CONN_TYPE_MASK_get();
  public final static native long RS_NET_CONN_TYPE_UNKNOWN_get();
  public final static native long RS_NET_CONN_TYPE_ACQUAINTANCE_get();
  public final static native long RS_NET_CONN_TYPE_FRIEND_get();
  public final static native long RS_NET_CONN_TYPE_SERVER_get();
  public final static native long RS_NET_CONN_TYPE_CLIENT_get();
  public final static native String RS_GROUP_ID_FRIENDS_get();
  public final static native String RS_GROUP_ID_FAMILY_get();
  public final static native String RS_GROUP_ID_COWORKERS_get();
  public final static native String RS_GROUP_ID_OTHERS_get();
  public final static native String RS_GROUP_ID_FAVORITES_get();
  public final static native long RS_GROUP_FLAG_STANDARD_get();
  public final static native long RsPeerTrustString(long jarg1);
  public final static native long RsPeerNetModeString(long jarg1);
  public final static native long RsPeerLastConnectString(long jarg1);
  public final static native long new_RsPeerDetails();
  public final static native void RsPeerDetails_isOnlyGPGdetail_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_isOnlyGPGdetail_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_id_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_id_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_gpg_id_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_gpg_id_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_name_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_name_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_email_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_email_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_location_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_location_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_org_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_org_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_issuer_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_issuer_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_fpr_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_fpr_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_authcode_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_authcode_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_gpgSigners_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_gpgSigners_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_trustLvl_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_trustLvl_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_validLvl_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_validLvl_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_ownsign_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_ownsign_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_hasSignedMe_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_hasSignedMe_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_accept_connection_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_accept_connection_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_service_perm_flags_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_service_perm_flags_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_state_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_state_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_localAddr_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_localAddr_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_localPort_set(long jarg1, RsPeerDetails jarg1_, int jarg2);
  public final static native int RsPeerDetails_localPort_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_extAddr_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_extAddr_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_extPort_set(long jarg1, RsPeerDetails jarg1_, int jarg2);
  public final static native int RsPeerDetails_extPort_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_dyndns_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_dyndns_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_ipAddressList_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_ipAddressList_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_netMode_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_netMode_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_visState_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_visState_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_lastConnect_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_lastConnect_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_lastUsed_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_lastUsed_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_connectState_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_connectState_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_connectStateString_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_connectStateString_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_connectPeriod_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_connectPeriod_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_foundDHT_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_foundDHT_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_wasDeniedConnection_set(long jarg1, RsPeerDetails jarg1_, boolean jarg2);
  public final static native boolean RsPeerDetails_wasDeniedConnection_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_deniedTS_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_deniedTS_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void RsPeerDetails_linkType_set(long jarg1, RsPeerDetails jarg1_, long jarg2);
  public final static native long RsPeerDetails_linkType_get(long jarg1, RsPeerDetails jarg1_);
  public final static native void delete_RsPeerDetails(long jarg1);
  public final static native void RsPeerCryptoParams_connexion_state_set(long jarg1, RsPeerCryptoParams jarg1_, int jarg2);
  public final static native int RsPeerCryptoParams_connexion_state_get(long jarg1, RsPeerCryptoParams jarg1_);
  public final static native void RsPeerCryptoParams_cipher_name_set(long jarg1, RsPeerCryptoParams jarg1_, long jarg2);
  public final static native long RsPeerCryptoParams_cipher_name_get(long jarg1, RsPeerCryptoParams jarg1_);
  public final static native void RsPeerCryptoParams_cipher_bits_1_set(long jarg1, RsPeerCryptoParams jarg1_, int jarg2);
  public final static native int RsPeerCryptoParams_cipher_bits_1_get(long jarg1, RsPeerCryptoParams jarg1_);
  public final static native void RsPeerCryptoParams_cipher_bits_2_set(long jarg1, RsPeerCryptoParams jarg1_, int jarg2);
  public final static native int RsPeerCryptoParams_cipher_bits_2_get(long jarg1, RsPeerCryptoParams jarg1_);
  public final static native void RsPeerCryptoParams_cipher_version_set(long jarg1, RsPeerCryptoParams jarg1_, long jarg2);
  public final static native long RsPeerCryptoParams_cipher_version_get(long jarg1, RsPeerCryptoParams jarg1_);
  public final static native long new_RsPeerCryptoParams();
  public final static native void delete_RsPeerCryptoParams(long jarg1);
  public final static native long new_RsGroupInfo();
  public final static native void RsGroupInfo_id_set(long jarg1, RsGroupInfo jarg1_, long jarg2);
  public final static native long RsGroupInfo_id_get(long jarg1, RsGroupInfo jarg1_);
  public final static native void RsGroupInfo_name_set(long jarg1, RsGroupInfo jarg1_, long jarg2);
  public final static native long RsGroupInfo_name_get(long jarg1, RsGroupInfo jarg1_);
  public final static native void RsGroupInfo_flag_set(long jarg1, RsGroupInfo jarg1_, long jarg2);
  public final static native long RsGroupInfo_flag_get(long jarg1, RsGroupInfo jarg1_);
  public final static native void RsGroupInfo_peerIds_set(long jarg1, RsGroupInfo jarg1_, long jarg2);
  public final static native long RsGroupInfo_peerIds_get(long jarg1, RsGroupInfo jarg1_);
  public final static native void delete_RsGroupInfo(long jarg1);
  public final static native void delete_RsPeers(long jarg1);
  public final static native boolean RsPeers_FriendsChanged(long jarg1, RsPeers jarg1_);
  public final static native boolean RsPeers_OthersChanged(long jarg1, RsPeers jarg1_);
  public final static native long RsPeers_getOwnId(long jarg1, RsPeers jarg1_);
  public final static native boolean RsPeers_haveSecretKey(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getOnlineList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getFriendList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getPeerCount(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsPeers_isOnline(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_isFriend(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_isGPGAccepted(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native long RsPeers_getPeerName(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native long RsPeers_getGPGName(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getPeerDetails(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native long RsPeers_getGPGOwnId(long jarg1, RsPeers jarg1_);
  public final static native long RsPeers_getGPGId(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_isKeySupported(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGPGAcceptedList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGPGSignedList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGPGValidList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGPGAllList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGPGDetails(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native boolean RsPeers_getAssociatedSSLIds(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_gpgSignData(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsPeers_addFriend__SWIG_0(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsPeers_addFriend__SWIG_1(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_removeFriend(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_removeFriendLocation(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_removeKeysFromPGPKeyring(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsPeers_connectAttempt(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_setLocation(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_setLocalAddress(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean RsPeers_setExtAddress(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean RsPeers_setDynDNS(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_setNetworkMode(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_setVisState(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native void RsPeers_getIPServersList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native void RsPeers_allowServerIPDetermination(long jarg1, RsPeers jarg1_, boolean jarg2);
  public final static native void RsPeers_allowTunnelConnection(long jarg1, RsPeers jarg1_, boolean jarg2);
  public final static native boolean RsPeers_getAllowServerIPDetermination(long jarg1, RsPeers jarg1_);
  public final static native boolean RsPeers_getAllowTunnelConnection(long jarg1, RsPeers jarg1_);
  public final static native long RsPeers_GetRetroshareInvite__SWIG_0(long jarg1, RsPeers jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native long RsPeers_GetRetroshareInvite__SWIG_1(long jarg1, RsPeers jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsPeers_GetPGPBase64StringAndCheckSum(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsPeers_GetRetroshareInvite__SWIG_2(long jarg1, RsPeers jarg1_, boolean jarg2, boolean jarg3);
  public final static native long RsPeers_GetRetroshareInvite__SWIG_3(long jarg1, RsPeers jarg1_, boolean jarg2);
  public final static native boolean RsPeers_hasExportMinimal(long jarg1, RsPeers jarg1_);
  public final static native boolean RsPeers_loadCertificateFromString(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsPeers_loadDetailsFromStringCert(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_, long jarg4);
  public final static native boolean RsPeers_cleanCertificate(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsPeers_saveCertificateToFile(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native long RsPeers_saveCertificateToString(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_signGPGCertificate(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_trustGPGCertificate(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPeers_addGroup(long jarg1, RsPeers jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native boolean RsPeers_editGroup(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean RsPeers_removeGroup(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_getGroupInfo(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean RsPeers_getGroupInfoList(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native boolean RsPeers_assignPeerToGroup(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsPeers_assignPeersToGroup(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsPeers_computePeerPermissionFlags(long jarg1, RsPeers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsPeers_servicePermissionFlags(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native long RsPeers_servicePermissionFlags_sslid(long jarg1, RsPeers jarg1_, long jarg2);
  public final static native void RsPeers_setServicePermissionFlags(long jarg1, RsPeers jarg1_, long jarg2, long jarg3);
  public final static native long RS_VIS_STATE_NODISC_get();
  public final static native long RS_VIS_STATE_NODHT_get();
  public final static native long RS_VIS_STATE_STD_get();
  public final static native long RS_VIS_STATE_GRAY_get();
  public final static native long RS_VIS_STATE_DARK_get();
  public final static native long RS_VIS_STATE_BROWN_get();
  public final static native long RS_NET_MODE_TRYMODE_get();
  public final static native long RS_NET_MODE_TRY_EXT_get();
  public final static native long RS_NET_MODE_TRY_UPNP_get();
  public final static native long RS_NET_MODE_TRY_UDP_get();
  public final static native long RS_NET_MODE_ACTUAL_get();
  public final static native long RS_NET_MODE_UNKNOWN_get();
  public final static native long RS_NET_MODE_EXT_get();
  public final static native long RS_NET_MODE_UPNP_get();
  public final static native long RS_NET_MODE_UDP_get();
  public final static native long RS_NET_MODE_UNREACHABLE_get();
  public final static native long RS_NET_FLAGS_USE_DISC_get();
  public final static native long RS_NET_FLAGS_USE_DHT_get();
  public final static native long RS_NET_FLAGS_ONLINE_get();
  public final static native long RS_NET_FLAGS_EXTERNAL_ADDR_get();
  public final static native long RS_NET_FLAGS_STABLE_UDP_get();
  public final static native long RS_NET_FLAGS_TRUSTS_ME_get();
  public final static native long new_peerState();
  public final static native void peerState_id_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_id_get(long jarg1, peerState jarg1_);
  public final static native void peerState_gpg_id_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_gpg_id_get(long jarg1, peerState jarg1_);
  public final static native void peerState_netMode_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_netMode_get(long jarg1, peerState jarg1_);
  public final static native void peerState_visState_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_visState_get(long jarg1, peerState jarg1_);
  public final static native void peerState_localaddr_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_localaddr_get(long jarg1, peerState jarg1_);
  public final static native void peerState_serveraddr_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_serveraddr_get(long jarg1, peerState jarg1_);
  public final static native void peerState_dyndns_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_dyndns_get(long jarg1, peerState jarg1_);
  public final static native void peerState_lastcontact_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_lastcontact_get(long jarg1, peerState jarg1_);
  public final static native void peerState_ipAddrs_set(long jarg1, peerState jarg1_, long jarg2, pqiIpAddrSet jarg2_);
  public final static native long peerState_ipAddrs_get(long jarg1, peerState jarg1_);
  public final static native void peerState_location_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_location_get(long jarg1, peerState jarg1_);
  public final static native void peerState_name_set(long jarg1, peerState jarg1_, long jarg2);
  public final static native long peerState_name_get(long jarg1, peerState jarg1_);
  public final static native void delete_peerState(long jarg1);
  public final static native long textPeerState(long jarg1, peerState jarg1_);
  public final static native void delete_p3PeerMgr(long jarg1);
  public final static native boolean p3PeerMgr_addFriend__SWIG_0(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean p3PeerMgr_addFriend__SWIG_1(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3PeerMgr_addFriend__SWIG_2(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3PeerMgr_addFriend__SWIG_3(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PeerMgr_addFriend__SWIG_4(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_removeFriend(long jarg1, p3PeerMgr jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3PeerMgr_isFriend(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native boolean p3PeerMgr_getAssociatedPeers(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_removeAllFriendLocations(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native boolean p3PeerMgr_addGroup(long jarg1, p3PeerMgr jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native boolean p3PeerMgr_editGroup(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3PeerMgr_removeGroup(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native boolean p3PeerMgr_getGroupInfo(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3PeerMgr_getGroupInfoList(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native boolean p3PeerMgr_assignPeersToGroup(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long p3PeerMgr_servicePermissionFlags(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native long p3PeerMgr_servicePermissionFlags_sslid(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native void p3PeerMgr_setServicePermissionFlags(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setLocalAddress(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setExtAddress(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setDynDNS(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setNetworkMode(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setVisState(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_setLocation(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_updateCurrentAddress(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, pqiIpAddress jarg3_);
  public final static native boolean p3PeerMgr_updateLastContact(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native boolean p3PeerMgr_updateAddressList(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, pqiIpAddrSet jarg3_);
  public final static native boolean p3PeerMgr_UpdateOwnAddress(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_getOwnNetStatus(long jarg1, p3PeerMgr jarg1_, long jarg2, peerState jarg2_);
  public final static native boolean p3PeerMgr_getFriendNetStatus(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, peerState jarg3_);
  public final static native boolean p3PeerMgr_getOthersNetStatus(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3, peerState jarg3_);
  public final static native boolean p3PeerMgr_getPeerName(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgr_getGpgId(long jarg1, p3PeerMgr jarg1_, long jarg2, long jarg3);
  public final static native long p3PeerMgr_getConnectionType(long jarg1, p3PeerMgr jarg1_, long jarg2);
  public final static native int p3PeerMgr_getFriendCount(long jarg1, p3PeerMgr jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean p3PeerMgr_haveOnceConnected(long jarg1, p3PeerMgr jarg1_);
  public final static native boolean p3PeerMgrIMPL_addFriend__SWIG_0(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean p3PeerMgrIMPL_addFriend__SWIG_1(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3PeerMgrIMPL_addFriend__SWIG_2(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3PeerMgrIMPL_addFriend__SWIG_3(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PeerMgrIMPL_addFriend__SWIG_4(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_removeFriend(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3PeerMgrIMPL_isFriend(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_getAssociatedPeers(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_removeAllFriendLocations(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_addGroup(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native boolean p3PeerMgrIMPL_editGroup(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3PeerMgrIMPL_removeGroup(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_getGroupInfo(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3PeerMgrIMPL_getGroupInfoList(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_assignPeersToGroup(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long p3PeerMgrIMPL_servicePermissionFlags(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native long p3PeerMgrIMPL_servicePermissionFlags_sslid(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native void p3PeerMgrIMPL_setServicePermissionFlags(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setLocalAddress(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setExtAddress(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setDynDNS(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setNetworkMode(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setVisState(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_setLocation(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_updateCurrentAddress(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, pqiIpAddress jarg3_);
  public final static native boolean p3PeerMgrIMPL_updateLastContact(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_updateAddressList(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, pqiIpAddrSet jarg3_);
  public final static native boolean p3PeerMgrIMPL_UpdateOwnAddress(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_getOwnNetStatus(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, peerState jarg2_);
  public final static native boolean p3PeerMgrIMPL_getFriendNetStatus(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, peerState jarg3_);
  public final static native boolean p3PeerMgrIMPL_getOthersNetStatus(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, peerState jarg3_);
  public final static native boolean p3PeerMgrIMPL_getPeerName(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PeerMgrIMPL_getGpgId(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3);
  public final static native long p3PeerMgrIMPL_getConnectionType(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native int p3PeerMgrIMPL_getFriendCount(long jarg1, p3PeerMgrIMPL jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean p3PeerMgrIMPL_haveOnceConnected(long jarg1, p3PeerMgrIMPL jarg1_);
  public final static native long new_p3PeerMgrIMPL(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void p3PeerMgrIMPL_setManagers(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, p3LinkMgrIMPL jarg2_, long jarg3, p3NetMgrIMPL jarg3_);
  public final static native void p3PeerMgrIMPL_tick(long jarg1, p3PeerMgrIMPL jarg1_);
  public final static native long p3PeerMgrIMPL_getOwnId(long jarg1, p3PeerMgrIMPL jarg1_);
  public final static native boolean p3PeerMgrIMPL_setOwnNetworkMode(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3PeerMgrIMPL_setOwnVisState(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2);
  public final static native int p3PeerMgrIMPL_getConnectAddresses(long jarg1, p3PeerMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, pqiIpAddrSet jarg5_, long jarg6);
  public final static native void delete_p3PeerMgrIMPL(long jarg1);
  public final static native long new_p3zcNatAssist();
  public final static native void delete_p3zcNatAssist(long jarg1);
  public final static native int p3zcNatAssist_tick(long jarg1, p3zcNatAssist jarg1_);
  public final static native void p3zcNatAssist_enable(long jarg1, p3zcNatAssist jarg1_, boolean jarg2);
  public final static native void p3zcNatAssist_shutdown(long jarg1, p3zcNatAssist jarg1_);
  public final static native void p3zcNatAssist_restart(long jarg1, p3zcNatAssist jarg1_);
  public final static native boolean p3zcNatAssist_getEnabled(long jarg1, p3zcNatAssist jarg1_);
  public final static native boolean p3zcNatAssist_getActive(long jarg1, p3zcNatAssist jarg1_);
  public final static native void p3zcNatAssist_setInternalPort(long jarg1, p3zcNatAssist jarg1_, int jarg2);
  public final static native void p3zcNatAssist_setExternalPort(long jarg1, p3zcNatAssist jarg1_, int jarg2);
  public final static native boolean p3zcNatAssist_getInternalAddress(long jarg1, p3zcNatAssist jarg1_, long jarg2);
  public final static native boolean p3zcNatAssist_getExternalAddress(long jarg1, p3zcNatAssist jarg1_, long jarg2);
  public final static native boolean p3zcNatAssist_requestPortForward(long jarg1, p3zcNatAssist jarg1_, long jarg2, PortForwardParams jarg2_);
  public final static native boolean p3zcNatAssist_statusPortForward(long jarg1, p3zcNatAssist jarg1_, long jarg2, long jarg3, PortForwardParams jarg3_);
  public final static native void p3zcNatAssist_callbackMapping(long jarg1, p3zcNatAssist jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, int jarg8, int jarg9, long jarg10);
  public final static native void zcBrowseResult_flags_set(long jarg1, zcBrowseResult jarg1_, long jarg2);
  public final static native long zcBrowseResult_flags_get(long jarg1, zcBrowseResult jarg1_);
  public final static native void zcBrowseResult_interfaceIndex_set(long jarg1, zcBrowseResult jarg1_, long jarg2);
  public final static native long zcBrowseResult_interfaceIndex_get(long jarg1, zcBrowseResult jarg1_);
  public final static native void zcBrowseResult_serviceName_set(long jarg1, zcBrowseResult jarg1_, long jarg2);
  public final static native long zcBrowseResult_serviceName_get(long jarg1, zcBrowseResult jarg1_);
  public final static native void zcBrowseResult_regtype_set(long jarg1, zcBrowseResult jarg1_, long jarg2);
  public final static native long zcBrowseResult_regtype_get(long jarg1, zcBrowseResult jarg1_);
  public final static native void zcBrowseResult_replyDomain_set(long jarg1, zcBrowseResult jarg1_, long jarg2);
  public final static native long zcBrowseResult_replyDomain_get(long jarg1, zcBrowseResult jarg1_);
  public final static native long new_zcBrowseResult();
  public final static native void delete_zcBrowseResult(long jarg1);
  public final static native long new_zcResolveResult();
  public final static native void delete_zcResolveResult(long jarg1);
  public final static native void zcResolveResult_flags_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_flags_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_interfaceIndex_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_interfaceIndex_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_fullname_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_fullname_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_hosttarget_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_hosttarget_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_port_set(long jarg1, zcResolveResult jarg1_, int jarg2);
  public final static native int zcResolveResult_port_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_txtLen_set(long jarg1, zcResolveResult jarg1_, int jarg2);
  public final static native int zcResolveResult_txtLen_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_gpgId_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_gpgId_get(long jarg1, zcResolveResult jarg1_);
  public final static native void zcResolveResult_sslId_set(long jarg1, zcResolveResult jarg1_, long jarg2);
  public final static native long zcResolveResult_sslId_get(long jarg1, zcResolveResult jarg1_);
  public final static native long new_zcQueryResult();
  public final static native void delete_zcQueryResult(long jarg1);
  public final static native void zcQueryResult_flags_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_flags_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_interfaceIndex_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_interfaceIndex_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_fullname_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_fullname_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_rrtype_set(long jarg1, zcQueryResult jarg1_, int jarg2);
  public final static native int zcQueryResult_rrtype_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_rrclass_set(long jarg1, zcQueryResult jarg1_, int jarg2);
  public final static native int zcQueryResult_rrclass_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_rdlen_set(long jarg1, zcQueryResult jarg1_, int jarg2);
  public final static native int zcQueryResult_rdlen_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_ttl_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_ttl_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_sslId_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_sslId_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_gpgId_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_gpgId_get(long jarg1, zcQueryResult jarg1_);
  public final static native void zcQueryResult_addr_set(long jarg1, zcQueryResult jarg1_, long jarg2);
  public final static native long zcQueryResult_addr_get(long jarg1, zcQueryResult jarg1_);
  public final static native long new_zcLocationResult__SWIG_0();
  public final static native long new_zcLocationResult__SWIG_1(long jarg1, long jarg2);
  public final static native void zcLocationResult_gpgId_set(long jarg1, zcLocationResult jarg1_, long jarg2);
  public final static native long zcLocationResult_gpgId_get(long jarg1, zcLocationResult jarg1_);
  public final static native void zcLocationResult_sslId_set(long jarg1, zcLocationResult jarg1_, long jarg2);
  public final static native long zcLocationResult_sslId_get(long jarg1, zcLocationResult jarg1_);
  public final static native void delete_zcLocationResult(long jarg1);
  public final static native int ZC_STATUS_NEW_LOCATION_get();
  public final static native int ZC_STATUS_FOUND_get();
  public final static native int ZC_STATUS_CONNECTED_get();
  public final static native int ZC_STATUS_IPADDRESS_get();
  public final static native void zcLocationDetails_mSslId_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mSslId_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mFoundTs_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mFoundTs_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mStatus_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mStatus_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mHostTarget_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mHostTarget_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mFullName_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mFullName_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mPort_set(long jarg1, zcLocationDetails jarg1_, int jarg2);
  public final static native int zcLocationDetails_mPort_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mAddress_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mAddress_get(long jarg1, zcLocationDetails jarg1_);
  public final static native void zcLocationDetails_mAddrTs_set(long jarg1, zcLocationDetails jarg1_, long jarg2);
  public final static native long zcLocationDetails_mAddrTs_get(long jarg1, zcLocationDetails jarg1_);
  public final static native long new_zcLocationDetails();
  public final static native void delete_zcLocationDetails(long jarg1);
  public final static native void zcPeerDetails_gpgId_set(long jarg1, zcPeerDetails jarg1_, long jarg2);
  public final static native long zcPeerDetails_gpgId_get(long jarg1, zcPeerDetails jarg1_);
  public final static native void zcPeerDetails_mLocations_set(long jarg1, zcPeerDetails jarg1_, long jarg2);
  public final static native long zcPeerDetails_mLocations_get(long jarg1, zcPeerDetails jarg1_);
  public final static native long new_zcPeerDetails();
  public final static native void delete_zcPeerDetails(long jarg1);
  public final static native int ZC_SERVICE_STOPPED_get();
  public final static native int ZC_SERVICE_ACTIVE_get();
  public final static native long displayDNSServiceError(long jarg1);
  public final static native long new_p3ZeroConf(long jarg1, long jarg2, long jarg3, pqiConnectCb jarg3_, long jarg4, p3NetMgr jarg4_, long jarg5, p3PeerMgr jarg5_);
  public final static native void delete_p3ZeroConf(long jarg1);
  public final static native boolean p3ZeroConf_resetListener(long jarg1, p3ZeroConf jarg1_, long jarg2);
  public final static native void p3ZeroConf_start(long jarg1, p3ZeroConf jarg1_);
  public final static native int p3ZeroConf_tick(long jarg1, p3ZeroConf jarg1_);
  public final static native void p3ZeroConf_enable(long jarg1, p3ZeroConf jarg1_, boolean jarg2);
  public final static native void p3ZeroConf_shutdown(long jarg1, p3ZeroConf jarg1_);
  public final static native void p3ZeroConf_restart(long jarg1, p3ZeroConf jarg1_);
  public final static native boolean p3ZeroConf_getEnabled(long jarg1, p3ZeroConf jarg1_);
  public final static native boolean p3ZeroConf_getActive(long jarg1, p3ZeroConf jarg1_);
  public final static native boolean p3ZeroConf_getNetworkStats(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3);
  public final static native boolean p3ZeroConf_findPeer(long jarg1, p3ZeroConf jarg1_, long jarg2);
  public final static native boolean p3ZeroConf_dropPeer(long jarg1, p3ZeroConf jarg1_, long jarg2);
  public final static native int p3ZeroConf_addBadPeer(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int p3ZeroConf_addKnownPeer(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3ZeroConf_ConnectionFeedback(long jarg1, p3ZeroConf jarg1_, long jarg2, int jarg3);
  public final static native boolean p3ZeroConf_getPeerStatus(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3ZeroConf_setAttachMode(long jarg1, p3ZeroConf jarg1_, boolean jarg2);
  public final static native void p3ZeroConf_callbackRegister(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, String jarg5, String jarg6, String jarg7);
  public final static native void p3ZeroConf_callbackBrowse(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, String jarg6, String jarg7, String jarg8);
  public final static native void p3ZeroConf_callbackResolve(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, String jarg6, String jarg7, int jarg8, int jarg9, long jarg10);
  public final static native void p3ZeroConf_callbackQueryIp(long jarg1, p3ZeroConf jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, String jarg6, int jarg7, int jarg8, int jarg9, long jarg10, long jarg11);
  public final static native void rsNotify_set(long jarg1, RsNotify jarg1_);
  public final static native long rsNotify_get();
  public final static native long RS_SYS_ERROR_get();
  public final static native long RS_SYS_WARNING_get();
  public final static native long RS_SYS_INFO_get();
  public final static native long RS_POPUP_MSG_get();
  public final static native long RS_POPUP_CHAT_get();
  public final static native long RS_POPUP_CONNECT_get();
  public final static native long RS_SYSTRAY_GROUP_MSG_get();
  public final static native long RS_POPUP_DOWNLOAD_get();
  public final static native long RS_POPUP_GROUPCHAT_get();
  public final static native long RS_POPUP_CHATLOBBY_get();
  public final static native long RS_POPUP_CONNECT_ATTEMPT_get();
  public final static native long RS_POPUP_ENCRYPTED_MSG_get();
  public final static native long RS_CHAT_OPEN_get();
  public final static native long RS_CHAT_FOCUS_get();
  public final static native long RS_CHAT_TABBED_WINDOW_get();
  public final static native long RS_CHAT_BLINK_get();
  public final static native long RS_FEED_TYPE_PEER_get();
  public final static native long RS_FEED_TYPE_CHAN_get();
  public final static native long RS_FEED_TYPE_FORUM_get();
  public final static native long RS_FEED_TYPE_BLOG_get();
  public final static native long RS_FEED_TYPE_CHAT_get();
  public final static native long RS_FEED_TYPE_MSG_get();
  public final static native long RS_FEED_TYPE_FILES_get();
  public final static native long RS_FEED_TYPE_SECURITY_get();
  public final static native long RS_FEED_ITEM_PEER_CONNECT_get();
  public final static native long RS_FEED_ITEM_PEER_DISCONNECT_get();
  public final static native long RS_FEED_ITEM_PEER_HELLO_get();
  public final static native long RS_FEED_ITEM_PEER_NEW_get();
  public final static native long RS_FEED_ITEM_SEC_CONNECT_ATTEMPT_get();
  public final static native long RS_FEED_ITEM_SEC_AUTH_DENIED_get();
  public final static native long RS_FEED_ITEM_SEC_UNKNOWN_IN_get();
  public final static native long RS_FEED_ITEM_SEC_UNKNOWN_OUT_get();
  public final static native long RS_FEED_ITEM_CHAN_NEW_get();
  public final static native long RS_FEED_ITEM_CHAN_UPDATE_get();
  public final static native long RS_FEED_ITEM_CHAN_MSG_get();
  public final static native long RS_FEED_ITEM_FORUM_NEW_get();
  public final static native long RS_FEED_ITEM_FORUM_UPDATE_get();
  public final static native long RS_FEED_ITEM_FORUM_MSG_get();
  public final static native long RS_FEED_ITEM_BLOG_NEW_get();
  public final static native long RS_FEED_ITEM_BLOG_UPDATE_get();
  public final static native long RS_FEED_ITEM_BLOG_MSG_get();
  public final static native long RS_FEED_ITEM_CHAT_NEW_get();
  public final static native long RS_FEED_ITEM_MESSAGE_get();
  public final static native long RS_FEED_ITEM_FILES_NEW_get();
  public final static native long RS_MESSAGE_CONNECT_ATTEMPT_get();
  public final static native long new_RsFeedItem__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long new_RsFeedItem__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long new_RsFeedItem__SWIG_2();
  public final static native void RsFeedItem_mType_set(long jarg1, RsFeedItem jarg1_, long jarg2);
  public final static native long RsFeedItem_mType_get(long jarg1, RsFeedItem jarg1_);
  public final static native void RsFeedItem_mId1_set(long jarg1, RsFeedItem jarg1_, long jarg2);
  public final static native long RsFeedItem_mId1_get(long jarg1, RsFeedItem jarg1_);
  public final static native void RsFeedItem_mId2_set(long jarg1, RsFeedItem jarg1_, long jarg2);
  public final static native long RsFeedItem_mId2_get(long jarg1, RsFeedItem jarg1_);
  public final static native void RsFeedItem_mId3_set(long jarg1, RsFeedItem jarg1_, long jarg2);
  public final static native long RsFeedItem_mId3_get(long jarg1, RsFeedItem jarg1_);
  public final static native void RsFeedItem_mId4_set(long jarg1, RsFeedItem jarg1_, long jarg2);
  public final static native long RsFeedItem_mId4_get(long jarg1, RsFeedItem jarg1_);
  public final static native void delete_RsFeedItem(long jarg1);
  public final static native void delete_RsNotify(long jarg1);
  public final static native boolean RsNotify_NotifySysMessage(long jarg1, RsNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsNotify_NotifyPopupMessage(long jarg1, RsNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsNotify_NotifyLogMessage(long jarg1, RsNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsNotify_GetSysMessageList(long jarg1, RsNotify jarg1_, long jarg2);
  public final static native boolean RsNotify_GetPopupMessageList(long jarg1, RsNotify jarg1_, long jarg2);
  public final static native boolean RsNotify_SetSysMessageMode(long jarg1, RsNotify jarg1_, long jarg2, long jarg3);
  public final static native boolean RsNotify_SetPopupMessageMode(long jarg1, RsNotify jarg1_, long jarg2, long jarg3);
  public final static native boolean RsNotify_GetFeedItem(long jarg1, RsNotify jarg1_, long jarg2, RsFeedItem jarg2_);
  public final static native void delete_pqiNotify(long jarg1);
  public final static native boolean pqiNotify_AddPopupMessage(long jarg1, pqiNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean pqiNotify_AddSysMessage(long jarg1, pqiNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean pqiNotify_AddLogMessage(long jarg1, pqiNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean pqiNotify_AddFeedItem__SWIG_0(long jarg1, pqiNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean pqiNotify_AddFeedItem__SWIG_1(long jarg1, pqiNotify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean pqiNotify_ClearFeedItems(long jarg1, pqiNotify jarg1_, long jarg2);
  public final static native long getPqiNotify();
  public final static native int SSLFNS_ADD_CIPHER_CTX_RAND_KEY_get();
  public final static native int EVP_CIPHER_CTX_rand_key(long jarg1, long jarg2);
  public final static native long GenerateX509Req(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, int jarg9, long jarg10);
  public final static native long SignX509Certificate(long jarg1, long jarg2, long jarg3, int jarg4);
  public final static native boolean SSL_SignDataBin(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean SSL_VerifySignBin__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean SSL_VerifySignBin__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long loadX509FromPEM(long jarg1);
  public final static native long saveX509ToPEM(long jarg1);
  public final static native long loadX509FromDER(long jarg1, long jarg2);
  public final static native boolean saveX509ToDER(long jarg1, long jarg2, long jarg3);
  public final static native boolean getX509id(long jarg1, long jarg2);
  public final static native int pem_passwd_cb(String jarg1, int jarg2, int jarg3, long jarg4);
  public final static native boolean CheckX509Certificate(long jarg1);
  public final static native int LoadCheckX509(String jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long getX509NameString(long jarg1);
  public final static native long getX509CNString(long jarg1);
  public final static native long getX509TypeString(long jarg1, String jarg2, int jarg3);
  public final static native long getX509LocString(long jarg1);
  public final static native long getX509OrgString(long jarg1);
  public final static native long getX509CountryString(long jarg1);
  public final static native long getX509Info(long jarg1);
  public final static native int printSSLError(long jarg1, int jarg2, int jarg3, long jarg4, long jarg5);
  public final static native long new_pqiQoS(long jarg1, float jarg2);
  public final static native long pqiQoS_out_rsItem(long jarg1, pqiQoS jarg1_);
  public final static native void pqiQoS_in_rsItem(long jarg1, pqiQoS jarg1_, long jarg2, int jarg3);
  public final static native void pqiQoS_print(long jarg1, pqiQoS jarg1_);
  public final static native java.math.BigInteger pqiQoS_qos_queue_size(long jarg1, pqiQoS jarg1_);
  public final static native void pqiQoS_clear(long jarg1, pqiQoS jarg1_);
  public final static native void pqiQoS_computeTotalItemSize(long jarg1, pqiQoS jarg1_);
  public final static native int pqiQoS_debug_computeTotalItemSize(long jarg1, pqiQoS jarg1_);
  public final static native void delete_pqiQoS(long jarg1);
  public final static native int PQI_INCOMING_get();
  public final static native int PQI_OUTGOING_get();
  public final static native void SecurityPolicy_searchable_set(long jarg1, SecurityPolicy jarg1_, int jarg2);
  public final static native int SecurityPolicy_searchable_get(long jarg1, SecurityPolicy jarg1_);
  public final static native long new_SecurityPolicy();
  public final static native void delete_SecurityPolicy(long jarg1);
  public final static native long secpolicy_print(long jarg1, SecurityPolicy jarg1_);
  public final static native long secpolicy_create();
  public final static native int secpolicy_delete(long jarg1, SecurityPolicy jarg1_);
  public final static native int secpolicy_limit(long jarg1, SecurityPolicy jarg1_, long jarg2, SecurityPolicy jarg2_);
  public final static native int secpolicy_check(long jarg1, SecurityPolicy jarg1_, int jarg2, int jarg3);
  public final static native void SearchModule_peerid_set(long jarg1, SearchModule jarg1_, long jarg2);
  public final static native long SearchModule_peerid_get(long jarg1, SearchModule jarg1_);
  public final static native void SearchModule_pqi_set(long jarg1, SearchModule jarg1_, long jarg2, PQInterface jarg2_);
  public final static native long SearchModule_pqi_get(long jarg1, SearchModule jarg1_);
  public final static native void SearchModule_sp_set(long jarg1, SearchModule jarg1_, long jarg2, SecurityPolicy jarg2_);
  public final static native long SearchModule_sp_get(long jarg1, SearchModule jarg1_);
  public final static native long new_SearchModule();
  public final static native void delete_SearchModule(long jarg1);
  public final static native long new_pqihandler(long jarg1, SecurityPolicy jarg1_);
  public final static native boolean pqihandler_AddSearchModule(long jarg1, pqihandler jarg1_, long jarg2, SearchModule jarg2_);
  public final static native boolean pqihandler_RemoveSearchModule(long jarg1, pqihandler jarg1_, long jarg2, SearchModule jarg2_);
  public final static native int pqihandler_SearchSpecific(long jarg1, pqihandler jarg1_, long jarg2, RsCacheRequest jarg2_);
  public final static native int pqihandler_SendSearchResult(long jarg1, pqihandler jarg1_, long jarg2, RsCacheItem jarg2_);
  public final static native long pqihandler_RequestedSearch(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetSearchResult(long jarg1, pqihandler jarg1_);
  public final static native int pqihandler_SendFileRequest(long jarg1, pqihandler jarg1_, long jarg2, RsFileRequest jarg2_);
  public final static native int pqihandler_SendFileData(long jarg1, pqihandler jarg1_, long jarg2, RsFileData jarg2_);
  public final static native int pqihandler_SendFileChunkMapRequest(long jarg1, pqihandler jarg1_, long jarg2, RsFileChunkMapRequest jarg2_);
  public final static native int pqihandler_SendFileChunkMap(long jarg1, pqihandler jarg1_, long jarg2, RsFileChunkMap jarg2_);
  public final static native int pqihandler_SendFileCRC32MapRequest(long jarg1, pqihandler jarg1_, long jarg2, RsFileCRC32MapRequest jarg2_);
  public final static native int pqihandler_SendFileCRC32Map(long jarg1, pqihandler jarg1_, long jarg2, RsFileCRC32Map jarg2_);
  public final static native int pqihandler_SendFileSingleChunkCrcRequest(long jarg1, pqihandler jarg1_, long jarg2, RsFileSingleChunkCrcRequest jarg2_);
  public final static native int pqihandler_SendFileSingleChunkCrc(long jarg1, pqihandler jarg1_, long jarg2, RsFileSingleChunkCrc jarg2_);
  public final static native long pqihandler_GetFileRequest(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileData(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileChunkMapRequest(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileChunkMap(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileCRC32MapRequest(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileCRC32Map(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileSingleChunkCrcRequest(long jarg1, pqihandler jarg1_);
  public final static native long pqihandler_GetFileSingleChunkCrc(long jarg1, pqihandler jarg1_);
  public final static native int pqihandler_tick(long jarg1, pqihandler jarg1_);
  public final static native int pqihandler_status(long jarg1, pqihandler jarg1_);
  public final static native int pqihandler_SendRsRawItem(long jarg1, pqihandler jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long pqihandler_GetRsRawItem(long jarg1, pqihandler jarg1_);
  public final static native void pqihandler_setMaxRate(long jarg1, pqihandler jarg1_, boolean jarg2, float jarg3);
  public final static native float pqihandler_getMaxRate(long jarg1, pqihandler jarg1_, boolean jarg2);
  public final static native void pqihandler_getCurrentRates(long jarg1, pqihandler jarg1_, long jarg2, long jarg3);
  public final static native int pqihandler_ExtractRates(long jarg1, pqihandler jarg1_, long jarg2, long jarg3, RsBwRates jarg3_);
  public final static native void delete_pqihandler(long jarg1);
  public final static native long new_pqiNetStateBox();
  public final static native void pqiNetStateBox_reset(long jarg1, pqiNetStateBox jarg1_);
  public final static native void pqiNetStateBox_setAddressStunDht(long jarg1, pqiNetStateBox jarg1_, long jarg2, boolean jarg3);
  public final static native void pqiNetStateBox_setAddressStunProxy(long jarg1, pqiNetStateBox jarg1_, long jarg2, boolean jarg3);
  public final static native void pqiNetStateBox_setAddressUPnP(long jarg1, pqiNetStateBox jarg1_, boolean jarg2, long jarg3);
  public final static native void pqiNetStateBox_setAddressNatPMP(long jarg1, pqiNetStateBox jarg1_, boolean jarg2, long jarg3);
  public final static native void pqiNetStateBox_setAddressWebIP(long jarg1, pqiNetStateBox jarg1_, boolean jarg2, long jarg3);
  public final static native void pqiNetStateBox_setPortForwarded(long jarg1, pqiNetStateBox jarg1_, boolean jarg2, int jarg3);
  public final static native void pqiNetStateBox_setDhtState(long jarg1, pqiNetStateBox jarg1_, boolean jarg2, boolean jarg3);
  public final static native long pqiNetStateBox_getNetStateMode(long jarg1, pqiNetStateBox jarg1_);
  public final static native long pqiNetStateBox_getNetworkMode(long jarg1, pqiNetStateBox jarg1_);
  public final static native long pqiNetStateBox_getNatTypeMode(long jarg1, pqiNetStateBox jarg1_);
  public final static native long pqiNetStateBox_getNatHoleMode(long jarg1, pqiNetStateBox jarg1_);
  public final static native long pqiNetStateBox_getConnectModes(long jarg1, pqiNetStateBox jarg1_);
  public final static native void delete_pqiNetStateBox(long jarg1);
  public final static native long NetStateNetStateString(long jarg1);
  public final static native long NetStateConnectModesString(long jarg1);
  public final static native long NetStateNatHoleString(long jarg1);
  public final static native long NetStateNatTypeString(long jarg1);
  public final static native long NetStateNetworkModeString(long jarg1);
  public final static native long new_sslcert__SWIG_0(long jarg1, long jarg2);
  public final static native long new_sslcert__SWIG_1();
  public final static native void sslcert_id_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_id_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_name_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_name_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_location_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_location_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_org_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_org_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_email_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_email_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_issuer_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_issuer_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_fpr_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_fpr_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_authed_set(long jarg1, sslcert jarg1_, boolean jarg2);
  public final static native boolean sslcert_authed_get(long jarg1, sslcert jarg1_);
  public final static native void sslcert_certificate_set(long jarg1, sslcert jarg1_, long jarg2);
  public final static native long sslcert_certificate_get(long jarg1, sslcert jarg1_);
  public final static native void delete_sslcert(long jarg1);
  public final static native long AuthSSL_getAuthSSL();
  public final static native void AuthSSL_AuthSSLInit();
  public final static native boolean AuthSSL_validateOwnCertificate(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSL_active(long jarg1, AuthSSL jarg1_);
  public final static native int AuthSSL_InitAuth(long jarg1, AuthSSL jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean AuthSSL_CloseAuth(long jarg1, AuthSSL jarg1_);
  public final static native long AuthSSL_OwnId(long jarg1, AuthSSL jarg1_);
  public final static native long AuthSSL_getOwnLocation(long jarg1, AuthSSL jarg1_);
  public final static native long AuthSSL_SaveOwnCertificateToString(long jarg1, AuthSSL jarg1_);
  public final static native boolean AuthSSL_SignData__SWIG_0(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSL_SignData__SWIG_1(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSL_SignDataBin__SWIG_0(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSL_SignDataBin__SWIG_1(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSL_VerifyOwnSignBin(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSL_VerifySignBin(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthSSL_encrypt(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, int jarg5, long jarg6);
  public final static native boolean AuthSSL_decrypt(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, int jarg5);
  public final static native long AuthSSL_SignX509ReqWithGPG(long jarg1, AuthSSL jarg1_, long jarg2, int jarg3);
  public final static native boolean AuthSSL_AuthX509WithGPG(long jarg1, AuthSSL jarg1_, long jarg2);
  public final static native int AuthSSL_VerifyX509Callback(long jarg1, AuthSSL jarg1_, int jarg2, long jarg3);
  public final static native boolean AuthSSL_ValidateCertificate(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3);
  public final static native long AuthSSL_getCTX(long jarg1, AuthSSL jarg1_);
  public final static native void AuthSSL_setCurrentConnectionAttemptInfo(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void AuthSSL_getCurrentConnectionAttemptInfo(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSL_FailedCertificate(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, boolean jarg7);
  public final static native boolean AuthSSL_CheckCertificate(long jarg1, AuthSSL jarg1_, long jarg2, long jarg3);
  public final static native void AuthSSL_setAuthSSL_debug(long jarg1, AuthSSL jarg1_);
  public final static native void AuthSSL_instance_ssl_set(long jarg1, AuthSSL jarg1_);
  public final static native long AuthSSL_instance_ssl_get();
  public final static native void delete_AuthSSL(long jarg1);
  public final static native long new_AuthSSLimpl();
  public final static native boolean AuthSSLimpl_validateOwnCertificate(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSLimpl_active(long jarg1, AuthSSLimpl jarg1_);
  public final static native int AuthSSLimpl_InitAuth(long jarg1, AuthSSLimpl jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean AuthSSLimpl_CloseAuth(long jarg1, AuthSSLimpl jarg1_);
  public final static native long AuthSSLimpl_OwnId(long jarg1, AuthSSLimpl jarg1_);
  public final static native long AuthSSLimpl_getOwnLocation(long jarg1, AuthSSLimpl jarg1_);
  public final static native long AuthSSLimpl_SaveOwnCertificateToString(long jarg1, AuthSSLimpl jarg1_);
  public final static native boolean AuthSSLimpl_SignData__SWIG_0(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSLimpl_SignData__SWIG_1(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSLimpl_SignDataBin__SWIG_0(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSLimpl_SignDataBin__SWIG_1(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSLimpl_VerifyOwnSignBin(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSLimpl_VerifySignBin(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthSSLimpl_encrypt(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, int jarg5, long jarg6);
  public final static native boolean AuthSSLimpl_decrypt(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, int jarg5);
  public final static native long AuthSSLimpl_SignX509ReqWithGPG(long jarg1, AuthSSLimpl jarg1_, long jarg2, int jarg3);
  public final static native boolean AuthSSLimpl_AuthX509WithGPG(long jarg1, AuthSSLimpl jarg1_, long jarg2);
  public final static native int AuthSSLimpl_VerifyX509Callback(long jarg1, AuthSSLimpl jarg1_, int jarg2, long jarg3);
  public final static native boolean AuthSSLimpl_ValidateCertificate(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3);
  public final static native long AuthSSLimpl_setupSerialiser(long jarg1, AuthSSLimpl jarg1_);
  public final static native boolean AuthSSLimpl_saveList(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSLimpl_loadList(long jarg1, AuthSSLimpl jarg1_, long jarg2);
  public final static native long AuthSSLimpl_getCTX(long jarg1, AuthSSLimpl jarg1_);
  public final static native void AuthSSLimpl_setCurrentConnectionAttemptInfo(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void AuthSSLimpl_getCurrentConnectionAttemptInfo(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSLimpl_FailedCertificate(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, boolean jarg7);
  public final static native boolean AuthSSLimpl_CheckCertificate(long jarg1, AuthSSLimpl jarg1_, long jarg2, long jarg3);
  public final static native void delete_AuthSSLimpl(long jarg1);
  public final static native int WAITING_NOT_get();
  public final static native int WAITING_DELAY_get();
  public final static native int WAITING_SOCK_CONNECT_get();
  public final static native int WAITING_SSL_CONNECTION_get();
  public final static native int WAITING_SSL_AUTHORISE_get();
  public final static native int WAITING_FAIL_INTERFACE_get();
  public final static native int PQISSL_PASSIVE_get();
  public final static native int PQISSL_ACTIVE_get();
  public final static native int PQISSL_LOCAL_FLAG_get();
  public final static native int PQISSL_REMOTE_FLAG_get();
  public final static native int PQISSL_DNS_FLAG_get();
  public final static native int PQISSL_UDP_FLAG_get();
  public final static native int WINDOWS_TCP_BUFFER_SIZE_get();
  public final static native long new_pqissl(long jarg1, pqissllistener jarg1_, long jarg2, PQInterface jarg2_, long jarg3, p3LinkMgr jarg3_);
  public final static native void delete_pqissl(long jarg1);
  public final static native int pqissl_connect(long jarg1, pqissl jarg1_, long jarg2);
  public final static native int pqissl_listen(long jarg1, pqissl jarg1_);
  public final static native int pqissl_stoplistening(long jarg1, pqissl jarg1_);
  public final static native int pqissl_reset(long jarg1, pqissl jarg1_);
  public final static native int pqissl_disconnect(long jarg1, pqissl jarg1_);
  public final static native int pqissl_getConnectAddress(long jarg1, pqissl jarg1_, long jarg2);
  public final static native boolean pqissl_connect_parameter(long jarg1, pqissl jarg1_, long jarg2, long jarg3);
  public final static native int pqissl_tick(long jarg1, pqissl jarg1_);
  public final static native int pqissl_status(long jarg1, pqissl jarg1_);
  public final static native int pqissl_senddata(long jarg1, pqissl jarg1_, long jarg2, int jarg3);
  public final static native int pqissl_readdata(long jarg1, pqissl jarg1_, long jarg2, int jarg3);
  public final static native int pqissl_netstatus(long jarg1, pqissl jarg1_);
  public final static native int pqissl_isactive(long jarg1, pqissl jarg1_);
  public final static native boolean pqissl_moretoread(long jarg1, pqissl jarg1_);
  public final static native boolean pqissl_cansend(long jarg1, pqissl jarg1_);
  public final static native int pqissl_close(long jarg1, pqissl jarg1_);
  public final static native long pqissl_gethash(long jarg1, pqissl jarg1_);
  public final static native boolean pqissl_bandwidthLimited(long jarg1, pqissl jarg1_);
  public final static native int pqissl_accept(long jarg1, pqissl jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native void pqissl_getCryptoParams(long jarg1, pqissl jarg1_, long jarg2, RsPeerCryptoParams jarg2_);
  public final static native long new_pqissludp(long jarg1, PQInterface jarg1_, long jarg2, p3LinkMgr jarg2_);
  public final static native void delete_pqissludp(long jarg1);
  public final static native int pqissludp_listen(long jarg1, pqissludp jarg1_);
  public final static native int pqissludp_stoplistening(long jarg1, pqissludp jarg1_);
  public final static native int pqissludp_tick(long jarg1, pqissludp jarg1_);
  public final static native int pqissludp_reset(long jarg1, pqissludp jarg1_);
  public final static native boolean pqissludp_connect_parameter(long jarg1, pqissludp jarg1_, long jarg2, long jarg3);
  public final static native boolean pqissludp_connect_additional_address(long jarg1, pqissludp jarg1_, long jarg2, long jarg3);
  public final static native boolean pqissludp_moretoread(long jarg1, pqissludp jarg1_);
  public final static native boolean pqissludp_cansend(long jarg1, pqissludp jarg1_);
  public final static native boolean pqissludp_bandwidthLimited(long jarg1, pqissludp jarg1_);
  public final static native int pqissludp_attach(long jarg1, pqissludp jarg1_);
  public final static native void delete_p3UpnpMgr(long jarg1);
  public final static native void p3UpnpMgr_enable(long jarg1, p3UpnpMgr jarg1_, boolean jarg2);
  public final static native void p3UpnpMgr_shutdown(long jarg1, p3UpnpMgr jarg1_);
  public final static native void p3UpnpMgr_restart(long jarg1, p3UpnpMgr jarg1_);
  public final static native boolean p3UpnpMgr_getEnabled(long jarg1, p3UpnpMgr jarg1_);
  public final static native boolean p3UpnpMgr_getActive(long jarg1, p3UpnpMgr jarg1_);
  public final static native void p3UpnpMgr_setInternalPort(long jarg1, p3UpnpMgr jarg1_, int jarg2);
  public final static native void p3UpnpMgr_setExternalPort(long jarg1, p3UpnpMgr jarg1_, int jarg2);
  public final static native boolean p3UpnpMgr_getInternalAddress(long jarg1, p3UpnpMgr jarg1_, long jarg2);
  public final static native boolean p3UpnpMgr_getExternalAddress(long jarg1, p3UpnpMgr jarg1_, long jarg2);
  public final static native long new_pqiNetStatus();
  public final static native void pqiNetStatus_mLocalAddrOk_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mLocalAddrOk_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mExtAddrOk_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mExtAddrOk_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mExtAddrStableOk_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mExtAddrStableOk_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mUpnpOk_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mUpnpOk_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mDhtOk_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mDhtOk_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mDhtNetworkSize_set(long jarg1, pqiNetStatus jarg1_, long jarg2);
  public final static native long pqiNetStatus_mDhtNetworkSize_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mDhtRsNetworkSize_set(long jarg1, pqiNetStatus jarg1_, long jarg2);
  public final static native long pqiNetStatus_mDhtRsNetworkSize_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mLocalAddr_set(long jarg1, pqiNetStatus jarg1_, long jarg2);
  public final static native long pqiNetStatus_mLocalAddr_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mExtAddr_set(long jarg1, pqiNetStatus jarg1_, long jarg2);
  public final static native long pqiNetStatus_mExtAddr_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_mResetReq_set(long jarg1, pqiNetStatus jarg1_, boolean jarg2);
  public final static native boolean pqiNetStatus_mResetReq_get(long jarg1, pqiNetStatus jarg1_);
  public final static native void pqiNetStatus_print(long jarg1, pqiNetStatus jarg1_, long jarg2);
  public final static native boolean pqiNetStatus_NetOk(long jarg1, pqiNetStatus jarg1_);
  public final static native void delete_pqiNetStatus(long jarg1);
  public final static native int NETMGR_DHT_FEEDBACK_CONNECTED_get();
  public final static native int NETMGR_DHT_FEEDBACK_CONN_FAILED_get();
  public final static native int NETMGR_DHT_FEEDBACK_CONN_CLOSED_get();
  public final static native void delete_p3NetMgr(long jarg1);
  public final static native boolean p3NetMgr_setNetworkMode(long jarg1, p3NetMgr jarg1_, long jarg2);
  public final static native boolean p3NetMgr_setVisState(long jarg1, p3NetMgr jarg1_, long jarg2);
  public final static native boolean p3NetMgr_netAssistFriend(long jarg1, p3NetMgr jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3NetMgr_netAssistKnownPeer(long jarg1, p3NetMgr jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3NetMgr_netAssistBadPeer(long jarg1, p3NetMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3NetMgr_netAssistStatusUpdate(long jarg1, p3NetMgr jarg1_, long jarg2, int jarg3);
  public final static native long p3NetMgr_getNetStateMode(long jarg1, p3NetMgr jarg1_);
  public final static native long p3NetMgr_getNetworkMode(long jarg1, p3NetMgr jarg1_);
  public final static native long p3NetMgr_getNatTypeMode(long jarg1, p3NetMgr jarg1_);
  public final static native long p3NetMgr_getNatHoleMode(long jarg1, p3NetMgr jarg1_);
  public final static native long p3NetMgr_getConnectModes(long jarg1, p3NetMgr jarg1_);
  public final static native boolean p3NetMgr_shutdown(long jarg1, p3NetMgr jarg1_);
  public final static native boolean p3NetMgr_getIPServersEnabled(long jarg1, p3NetMgr jarg1_);
  public final static native void p3NetMgr_setIPServersEnabled(long jarg1, p3NetMgr jarg1_, boolean jarg2);
  public final static native void p3NetMgr_getIPServersList(long jarg1, p3NetMgr jarg1_, long jarg2);
  public final static native void p3NetMgr_getNetStatus(long jarg1, p3NetMgr jarg1_, long jarg2, pqiNetStatus jarg2_);
  public final static native boolean p3NetMgr_getUPnPState(long jarg1, p3NetMgr jarg1_);
  public final static native boolean p3NetMgr_getUPnPEnabled(long jarg1, p3NetMgr jarg1_);
  public final static native boolean p3NetMgr_getDHTEnabled(long jarg1, p3NetMgr jarg1_);
  public final static native long new_p3NetMgrIMPL();
  public final static native boolean p3NetMgrIMPL_setNetworkMode(long jarg1, p3NetMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3NetMgrIMPL_setVisState(long jarg1, p3NetMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3NetMgrIMPL_netAssistFriend(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3NetMgrIMPL_netAssistKnownPeer(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3NetMgrIMPL_netAssistBadPeer(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3NetMgrIMPL_netAssistStatusUpdate(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, int jarg3);
  public final static native long p3NetMgrIMPL_getNetStateMode(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native long p3NetMgrIMPL_getNetworkMode(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native long p3NetMgrIMPL_getNatTypeMode(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native long p3NetMgrIMPL_getNatHoleMode(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native long p3NetMgrIMPL_getConnectModes(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native boolean p3NetMgrIMPL_shutdown(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native boolean p3NetMgrIMPL_getIPServersEnabled(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native void p3NetMgrIMPL_setIPServersEnabled(long jarg1, p3NetMgrIMPL jarg1_, boolean jarg2);
  public final static native void p3NetMgrIMPL_getIPServersList(long jarg1, p3NetMgrIMPL jarg1_, long jarg2);
  public final static native void p3NetMgrIMPL_getNetStatus(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, pqiNetStatus jarg2_);
  public final static native boolean p3NetMgrIMPL_getUPnPState(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native boolean p3NetMgrIMPL_getUPnPEnabled(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native boolean p3NetMgrIMPL_getDHTEnabled(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native void p3NetMgrIMPL_setManagers(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, p3PeerMgr jarg2_, long jarg3, p3LinkMgr jarg3_);
  public final static native void p3NetMgrIMPL_setAddrAssist(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, pqiAddrAssist jarg2_, long jarg3, pqiAddrAssist jarg3_);
  public final static native void p3NetMgrIMPL_tick(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native boolean p3NetMgrIMPL_setLocalAddress(long jarg1, p3NetMgrIMPL jarg1_, long jarg2);
  public final static native boolean p3NetMgrIMPL_setExtAddress(long jarg1, p3NetMgrIMPL jarg1_, long jarg2);
  public final static native void p3NetMgrIMPL_addNetAssistConnect(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, long jarg3, pqiNetAssistConnect jarg3_);
  public final static native void p3NetMgrIMPL_addNetAssistFirewall(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, long jarg3, pqiNetAssistFirewall jarg3_);
  public final static native void p3NetMgrIMPL_addNetListener(long jarg1, p3NetMgrIMPL jarg1_, long jarg2, pqiNetListener jarg2_);
  public final static native boolean p3NetMgrIMPL_checkNetAddress(long jarg1, p3NetMgrIMPL jarg1_);
  public final static native void delete_p3NetMgrIMPL(long jarg1);
  public final static native int DHT_ADDR_INVALID_get();
  public final static native int DHT_ADDR_TCP_get();
  public final static native int DHT_ADDR_UDP_get();
  public final static native int DHT_PEER_OFF_get();
  public final static native int DHT_PEER_INIT_get();
  public final static native int DHT_PEER_SEARCH_get();
  public final static native int DHT_PEER_FOUND_get();
  public final static native int DHT_PEER_ADDR_KNOWN_get();
  public final static native int DHT_PEER_PUBLISHED_get();
  public final static native int DHT_MODE_SEARCH_get();
  public final static native int DHT_MODE_PUBLISH_get();
  public final static native int DHT_MODE_NOTIFY_get();
  public final static native int DHT_MODE_BOOTSTRAP_get();
  public final static native int DHT_SEARCH_PERIOD_get();
  public final static native int DHT_CHECK_PERIOD_get();
  public final static native int DHT_PUBLISH_PERIOD_get();
  public final static native int DHT_NOTIFY_PERIOD_get();
  public final static native int DHT_TTL_PUBLISH_get();
  public final static native int DHT_TTL_NOTIFY_get();
  public final static native int DHT_TTL_BOOTSTRAP_get();
  public final static native long new_dhtPeerEntry();
  public final static native void dhtPeerEntry_id_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_id_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_state_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_state_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_lastTS_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_lastTS_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_notifyPending_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_notifyPending_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_notifyTS_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_notifyTS_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_laddr_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_laddr_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_raddr_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_raddr_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_type_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_type_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_hash1_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_hash1_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void dhtPeerEntry_hash2_set(long jarg1, dhtPeerEntry jarg1_, long jarg2);
  public final static native long dhtPeerEntry_hash2_get(long jarg1, dhtPeerEntry jarg1_);
  public final static native void delete_dhtPeerEntry(long jarg1);
  public final static native void p3DhtMgr_enable(long jarg1, p3DhtMgr jarg1_, boolean jarg2);
  public final static native void p3DhtMgr_shutdown(long jarg1, p3DhtMgr jarg1_);
  public final static native void p3DhtMgr_restart(long jarg1, p3DhtMgr jarg1_);
  public final static native boolean p3DhtMgr_getEnabled(long jarg1, p3DhtMgr jarg1_);
  public final static native boolean p3DhtMgr_getActive(long jarg1, p3DhtMgr jarg1_);
  public final static native void p3DhtMgr_setBootstrapAllowed(long jarg1, p3DhtMgr jarg1_, boolean jarg2);
  public final static native boolean p3DhtMgr_getBootstrapAllowed(long jarg1, p3DhtMgr jarg1_);
  public final static native boolean p3DhtMgr_setExternalInterface(long jarg1, p3DhtMgr jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3DhtMgr_findPeer(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_dropPeer(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_notifyPeer(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_getPeerStatus(long jarg1, p3DhtMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3DhtMgr_enableStun(long jarg1, p3DhtMgr jarg1_, boolean jarg2);
  public final static native boolean p3DhtMgr_addStun(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_dhtResultNotify(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_dhtResultSearch(long jarg1, p3DhtMgr jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3DhtMgr_dhtResultBootstrap(long jarg1, p3DhtMgr jarg1_, long jarg2);
  public final static native boolean p3DhtMgr_resultDHT(long jarg1, p3DhtMgr jarg1_, long jarg2, long jarg3);
  public final static native void p3DhtMgr_run(long jarg1, p3DhtMgr jarg1_);
  public final static native void delete_p3DhtMgr(long jarg1);
  public final static native long new_pqistreamer(long jarg1, RsSerialiser jarg1_, long jarg2, long jarg3, BinInterface jarg3_, int jarg4);
  public final static native void delete_pqistreamer(long jarg1);
  public final static native int pqistreamer_SendItem__SWIG_0(long jarg1, pqistreamer jarg1_, long jarg2, RsItem jarg2_);
  public final static native int pqistreamer_SendItem__SWIG_1(long jarg1, pqistreamer jarg1_, long jarg2, RsItem jarg2_, long jarg3);
  public final static native long pqistreamer_GetItem(long jarg1, pqistreamer jarg1_);
  public final static native int pqistreamer_tick(long jarg1, pqistreamer jarg1_);
  public final static native int pqistreamer_status(long jarg1, pqistreamer jarg1_);
  public final static native long pqistreamer_getLastIncomingTS(long jarg1, pqistreamer jarg1_);
  public final static native void pqistreamer_getRates(long jarg1, pqistreamer jarg1_, long jarg2, RsBwRates jarg2_);
  public final static native int pqistreamer_getQueueSize(long jarg1, pqistreamer jarg1_, boolean jarg2);
  public final static native int MAX_GPG_SIGNATURE_SIZE_get();
  public final static native long new_AuthGPGOperation(long jarg1);
  public final static native void delete_AuthGPGOperation(long jarg1);
  public final static native void AuthGPGOperation_m_userdata_set(long jarg1, AuthGPGOperation jarg1_, long jarg2);
  public final static native long AuthGPGOperation_m_userdata_get(long jarg1, AuthGPGOperation jarg1_);
  public final static native long new_AuthGPGOperationLoadOrSave(boolean jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void AuthGPGOperationLoadOrSave_m_load_set(long jarg1, AuthGPGOperationLoadOrSave jarg1_, boolean jarg2);
  public final static native boolean AuthGPGOperationLoadOrSave_m_load_get(long jarg1, AuthGPGOperationLoadOrSave jarg1_);
  public final static native void AuthGPGOperationLoadOrSave_m_certGpgId_set(long jarg1, AuthGPGOperationLoadOrSave jarg1_, long jarg2);
  public final static native long AuthGPGOperationLoadOrSave_m_certGpgId_get(long jarg1, AuthGPGOperationLoadOrSave jarg1_);
  public final static native void AuthGPGOperationLoadOrSave_m_certGpg_set(long jarg1, AuthGPGOperationLoadOrSave jarg1_, long jarg2);
  public final static native long AuthGPGOperationLoadOrSave_m_certGpg_get(long jarg1, AuthGPGOperationLoadOrSave jarg1_);
  public final static native void delete_AuthGPGOperationLoadOrSave(long jarg1);
  public final static native void delete_AuthGPGService(long jarg1);
  public final static native long AuthGPGService_getGPGOperation(long jarg1, AuthGPGService jarg1_);
  public final static native void AuthGPGService_setGPGOperation(long jarg1, AuthGPGService jarg1_, long jarg2, AuthGPGOperation jarg2_);
  public final static native void AuthGPG_init(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native void AuthGPG_exit();
  public final static native long AuthGPG_getAuthGPG();
  public final static native boolean AuthGPG_availableGPGCertificatesWithPrivateKeys(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_active(long jarg1, AuthGPG jarg1_);
  public final static native int AuthGPG_GPGInit(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_GeneratePGPCertificate(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long AuthGPG_getGPGName__SWIG_0(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native long AuthGPG_getGPGName__SWIG_1(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native long AuthGPG_getGPGEmail__SWIG_0(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native long AuthGPG_getGPGEmail__SWIG_1(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native long AuthGPG_getGPGOwnId(long jarg1, AuthGPG jarg1_);
  public final static native long AuthGPG_getGPGOwnName(long jarg1, AuthGPG jarg1_);
  public final static native boolean AuthGPG_isKeySupported(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_haveSecretKey(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_getGPGDetails(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native boolean AuthGPG_getGPGAllList(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_getGPGValidList(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_getGPGAcceptedList(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_getGPGSignedList(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_importProfile(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthGPG_exportProfile(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPG_removeKeysFromPGPKeyring(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthGPG_LoadCertificateFromString(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long AuthGPG_SaveCertificateToString(long jarg1, AuthGPG jarg1_, long jarg2, boolean jarg3);
  public final static native boolean AuthGPG_getCachedGPGCertificate(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPG_AllowConnection(long jarg1, AuthGPG jarg1_, long jarg2, boolean jarg3);
  public final static native boolean AuthGPG_SignCertificateLevel0(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_RevokeCertificate(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_TrustCertificate(long jarg1, AuthGPG jarg1_, long jarg2, int jarg3);
  public final static native boolean AuthGPG_SignDataBin(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthGPG_VerifySignBin(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthGPG_encryptDataBin(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthGPG_decryptDataBin(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthGPG_decryptTextFromFile(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPG_encryptTextToFile(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPG_getGPGFilteredList__SWIG_0(long jarg1, AuthGPG jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPG_getGPGFilteredList__SWIG_1(long jarg1, AuthGPG jarg1_, long jarg2);
  public final static native boolean AuthGPG_addService(long jarg1, AuthGPG jarg1_, long jarg2, AuthGPGService jarg2_);
  public final static native void AuthGPG_setAuthGPG_debug(long jarg1, AuthGPG jarg1_);
  public final static native void setAuthGPG(long jarg1, AuthGPG jarg1_);
  public final static native long new_AuthGPGtest();
  public final static native boolean AuthGPGtest_availableGPGCertificatesWithPrivateKeys(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_printKeys(long jarg1, AuthGPGtest jarg1_);
  public final static native boolean AuthGPGtest_active(long jarg1, AuthGPGtest jarg1_);
  public final static native boolean AuthGPGtest_InitAuth(long jarg1, AuthGPGtest jarg1_);
  public final static native void AuthGPGtest_run(long jarg1, AuthGPGtest jarg1_);
  public final static native int AuthGPGtest_GPGInit(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_CloseAuth(long jarg1, AuthGPGtest jarg1_);
  public final static native boolean AuthGPGtest_GeneratePGPCertificate(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long AuthGPGtest_getGPGName(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native long AuthGPGtest_getGPGEmail(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native long AuthGPGtest_getGPGOwnId(long jarg1, AuthGPGtest jarg1_);
  public final static native long AuthGPGtest_getGPGOwnName(long jarg1, AuthGPGtest jarg1_);
  public final static native boolean AuthGPGtest_getGPGDetails(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native boolean AuthGPGtest_getGPGAllList(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_getGPGValidList(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_getGPGAcceptedList(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_getGPGSignedList(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_isGPGValid(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_isGPGSigned(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_isGPGAccepted(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_isGPGId(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_LoadCertificateFromString(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long AuthGPGtest_SaveCertificateToString(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_setAcceptToConnectGPGCertificate(long jarg1, AuthGPGtest jarg1_, long jarg2, boolean jarg3);
  public final static native boolean AuthGPGtest_SignCertificateLevel0(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_RevokeCertificate(long jarg1, AuthGPGtest jarg1_, long jarg2);
  public final static native boolean AuthGPGtest_TrustCertificate(long jarg1, AuthGPGtest jarg1_, long jarg2, int jarg3);
  public final static native boolean AuthGPGtest_SignDataBin(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthGPGtest_VerifySignBin(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthGPGtest_decryptText(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPGtest_encryptText(long jarg1, AuthGPGtest jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthGPGtest_addService(long jarg1, AuthGPGtest jarg1_, long jarg2, AuthGPGService jarg2_);
  public final static native void delete_AuthGPGtest(long jarg1);
  public final static native int CONNECT_RECEIVED_get();
  public final static native int CONNECT_SUCCESS_get();
  public final static native int CONNECT_UNREACHABLE_get();
  public final static native int CONNECT_FIREWALLED_get();
  public final static native int CONNECT_FAILED_get();
  public final static native int HEARTBEAT_REPEAT_TIME_get();
  public final static native long new_pqiQoSstreamer(long jarg1, RsSerialiser jarg1_, long jarg2, long jarg3, BinInterface jarg3_, int jarg4);
  public final static native long pqiQoSstreamer_PQI_QOS_STREAMER_MAX_LEVELS_get();
  public final static native float pqiQoSstreamer_PQI_QOS_STREAMER_ALPHA_get();
  public final static native void pqiQoSstreamer_locked_storeInOutputQueue(long jarg1, pqiQoSstreamer jarg1_, long jarg2, int jarg3);
  public final static native int pqiQoSstreamer_out_queue_size(long jarg1, pqiQoSstreamer jarg1_);
  public final static native void pqiQoSstreamer_locked_clear_out_queue(long jarg1, pqiQoSstreamer jarg1_);
  public final static native int pqiQoSstreamer_locked_compute_out_pkt_size(long jarg1, pqiQoSstreamer jarg1_);
  public final static native long pqiQoSstreamer_locked_pop_out_data(long jarg1, pqiQoSstreamer jarg1_);
  public final static native int pqiQoSstreamer_getQueueSize(long jarg1, pqiQoSstreamer jarg1_, boolean jarg2);
  public final static native void delete_pqiQoSstreamer(long jarg1);
  public final static native long new_pqiconnect(long jarg1, RsSerialiser jarg1_, long jarg2, NetBinInterface jarg2_);
  public final static native void delete_pqiconnect(long jarg1);
  public final static native boolean pqiconnect_getCryptoParams(long jarg1, pqiconnect jarg1_, long jarg2, RsPeerCryptoParams jarg2_);
  public final static native int pqiconnect_connect(long jarg1, pqiconnect jarg1_, long jarg2);
  public final static native int pqiconnect_listen(long jarg1, pqiconnect jarg1_);
  public final static native int pqiconnect_stoplistening(long jarg1, pqiconnect jarg1_);
  public final static native int pqiconnect_reset(long jarg1, pqiconnect jarg1_);
  public final static native int pqiconnect_disconnect(long jarg1, pqiconnect jarg1_);
  public final static native boolean pqiconnect_connect_parameter(long jarg1, pqiconnect jarg1_, long jarg2, long jarg3);
  public final static native boolean pqiconnect_connect_additional_address(long jarg1, pqiconnect jarg1_, long jarg2, long jarg3);
  public final static native int pqiconnect_getConnectAddress(long jarg1, pqiconnect jarg1_, long jarg2);
  public final static native long pqiconnect_PeerId(long jarg1, pqiconnect jarg1_);
  public final static native boolean pqiconnect_thisNetInterface(long jarg1, pqiconnect jarg1_, long jarg2, NetInterface jarg2_);
  public final static native long new_pqiperson(long jarg1, long jarg2, pqipersongrp jarg2_);
  public final static native void delete_pqiperson(long jarg1);
  public final static native int pqiperson_reset(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_listen(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_stoplistening(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_connect(long jarg1, pqiperson jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9, long jarg10);
  public final static native int pqiperson_receiveHeartbeat(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_addChildInterface(long jarg1, pqiperson jarg1_, long jarg2, long jarg3, pqiconnect jarg3_);
  public final static native boolean pqiperson_getCryptoParams(long jarg1, pqiperson jarg1_, long jarg2, RsPeerCryptoParams jarg2_);
  public final static native int pqiperson_SendItem__SWIG_0(long jarg1, pqiperson jarg1_, long jarg2, RsItem jarg2_, long jarg3);
  public final static native int pqiperson_SendItem__SWIG_1(long jarg1, pqiperson jarg1_, long jarg2, RsItem jarg2_);
  public final static native long pqiperson_GetItem(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_status(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_tick(long jarg1, pqiperson jarg1_);
  public final static native int pqiperson_notifyEvent(long jarg1, pqiperson jarg1_, long jarg2, NetInterface jarg2_, int jarg3);
  public final static native int pqiperson_getQueueSize(long jarg1, pqiperson jarg1_, boolean jarg2);
  public final static native void pqiperson_getRates(long jarg1, pqiperson jarg1_, long jarg2, RsBwRates jarg2_);
  public final static native float pqiperson_getRate(long jarg1, pqiperson jarg1_, boolean jarg2);
  public final static native void pqiperson_setMaxRate(long jarg1, pqiperson jarg1_, boolean jarg2, float jarg3);
  public final static native void pqiperson_setRateCap(long jarg1, pqiperson jarg1_, float jarg2, float jarg3);
  public final static native long pqiperson_getKid(long jarg1, pqiperson jarg1_, long jarg2);
  public final static native long new_pqilistener();
  public final static native void delete_pqilistener(long jarg1);
  public final static native int pqilistener_tick(long jarg1, pqilistener jarg1_);
  public final static native int pqilistener_status(long jarg1, pqilistener jarg1_);
  public final static native int pqilistener_setListenAddr(long jarg1, pqilistener jarg1_, long jarg2);
  public final static native int pqilistener_setuplisten(long jarg1, pqilistener jarg1_);
  public final static native int pqilistener_resetlisten(long jarg1, pqilistener jarg1_);
  public final static native void AcceptedSSL_mFd_set(long jarg1, AcceptedSSL jarg1_, int jarg2);
  public final static native int AcceptedSSL_mFd_get(long jarg1, AcceptedSSL jarg1_);
  public final static native void AcceptedSSL_mSSL_set(long jarg1, AcceptedSSL jarg1_, long jarg2);
  public final static native long AcceptedSSL_mSSL_get(long jarg1, AcceptedSSL jarg1_);
  public final static native void AcceptedSSL_mPeerId_set(long jarg1, AcceptedSSL jarg1_, long jarg2);
  public final static native long AcceptedSSL_mPeerId_get(long jarg1, AcceptedSSL jarg1_);
  public final static native void AcceptedSSL_mAddr_set(long jarg1, AcceptedSSL jarg1_, long jarg2);
  public final static native long AcceptedSSL_mAddr_get(long jarg1, AcceptedSSL jarg1_);
  public final static native void AcceptedSSL_mAcceptTS_set(long jarg1, AcceptedSSL jarg1_, long jarg2);
  public final static native long AcceptedSSL_mAcceptTS_get(long jarg1, AcceptedSSL jarg1_);
  public final static native long new_AcceptedSSL();
  public final static native void delete_AcceptedSSL(long jarg1);
  public final static native void delete_pqissllistenbase(long jarg1);
  public final static native int pqissllistenbase_tick(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_status(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_setListenAddr(long jarg1, pqissllistenbase jarg1_, long jarg2);
  public final static native int pqissllistenbase_setuplisten(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_resetlisten(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_acceptconnection(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_continueaccepts(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_finaliseAccepts(long jarg1, pqissllistenbase jarg1_);
  public final static native int pqissllistenbase_continueSSL(long jarg1, pqissllistenbase jarg1_, long jarg2, boolean jarg3);
  public final static native int pqissllistenbase_closeConnection(long jarg1, pqissllistenbase jarg1_, int jarg2, long jarg3);
  public final static native int pqissllistenbase_isSSLActive(long jarg1, pqissllistenbase jarg1_, int jarg2, long jarg3);
  public final static native int pqissllistenbase_completeConnection(long jarg1, pqissllistenbase jarg1_, int jarg2, long jarg3);
  public final static native int pqissllistenbase_finaliseConnection(long jarg1, pqissllistenbase jarg1_, int jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long new_pqissllistener(long jarg1, long jarg2, p3PeerMgr jarg2_);
  public final static native void delete_pqissllistener(long jarg1);
  public final static native int pqissllistener_addlistenaddr(long jarg1, pqissllistener jarg1_, long jarg2, long jarg3, pqissl jarg3_);
  public final static native int pqissllistener_removeListenPort(long jarg1, pqissllistener jarg1_, long jarg2);
  public final static native int pqissllistener_status(long jarg1, pqissllistener jarg1_);
  public final static native int pqissllistener_completeConnection(long jarg1, pqissllistener jarg1_, int jarg2, long jarg3);
  public final static native int pqissllistener_finaliseConnection(long jarg1, pqissllistener jarg1_, int jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long new_pqiloopback(long jarg1);
  public final static native void delete_pqiloopback(long jarg1);
  public final static native int pqiloopback_SendItem(long jarg1, pqiloopback jarg1_, long jarg2, RsItem jarg2_);
  public final static native long pqiloopback_GetItem(long jarg1, pqiloopback jarg1_);
  public final static native int pqiloopback_tick(long jarg1, pqiloopback jarg1_);
  public final static native int pqiloopback_status(long jarg1, pqiloopback jarg1_);
  public final static native int pqiloopback_notifyEvent(long jarg1, pqiloopback jarg1_, long jarg2, NetInterface jarg2_, int jarg3);
  public final static native void p3NotifySysMsg_sysid_set(long jarg1, p3NotifySysMsg jarg1_, long jarg2);
  public final static native long p3NotifySysMsg_sysid_get(long jarg1, p3NotifySysMsg jarg1_);
  public final static native void p3NotifySysMsg_type_set(long jarg1, p3NotifySysMsg jarg1_, long jarg2);
  public final static native long p3NotifySysMsg_type_get(long jarg1, p3NotifySysMsg jarg1_);
  public final static native void p3NotifySysMsg_title_set(long jarg1, p3NotifySysMsg jarg1_, long jarg2);
  public final static native long p3NotifySysMsg_title_get(long jarg1, p3NotifySysMsg jarg1_);
  public final static native void p3NotifySysMsg_msg_set(long jarg1, p3NotifySysMsg jarg1_, long jarg2);
  public final static native long p3NotifySysMsg_msg_get(long jarg1, p3NotifySysMsg jarg1_);
  public final static native long new_p3NotifySysMsg();
  public final static native void delete_p3NotifySysMsg(long jarg1);
  public final static native void p3NotifyLogMsg_sysid_set(long jarg1, p3NotifyLogMsg jarg1_, long jarg2);
  public final static native long p3NotifyLogMsg_sysid_get(long jarg1, p3NotifyLogMsg jarg1_);
  public final static native void p3NotifyLogMsg_type_set(long jarg1, p3NotifyLogMsg jarg1_, long jarg2);
  public final static native long p3NotifyLogMsg_type_get(long jarg1, p3NotifyLogMsg jarg1_);
  public final static native void p3NotifyLogMsg_title_set(long jarg1, p3NotifyLogMsg jarg1_, long jarg2);
  public final static native long p3NotifyLogMsg_title_get(long jarg1, p3NotifyLogMsg jarg1_);
  public final static native void p3NotifyLogMsg_msg_set(long jarg1, p3NotifyLogMsg jarg1_, long jarg2);
  public final static native long p3NotifyLogMsg_msg_get(long jarg1, p3NotifyLogMsg jarg1_);
  public final static native long new_p3NotifyLogMsg();
  public final static native void delete_p3NotifyLogMsg(long jarg1);
  public final static native void p3NotifyPopupMsg_type_set(long jarg1, p3NotifyPopupMsg jarg1_, long jarg2);
  public final static native long p3NotifyPopupMsg_type_get(long jarg1, p3NotifyPopupMsg jarg1_);
  public final static native void p3NotifyPopupMsg_name_set(long jarg1, p3NotifyPopupMsg jarg1_, long jarg2);
  public final static native long p3NotifyPopupMsg_name_get(long jarg1, p3NotifyPopupMsg jarg1_);
  public final static native void p3NotifyPopupMsg_title_set(long jarg1, p3NotifyPopupMsg jarg1_, long jarg2);
  public final static native long p3NotifyPopupMsg_title_get(long jarg1, p3NotifyPopupMsg jarg1_);
  public final static native void p3NotifyPopupMsg_msg_set(long jarg1, p3NotifyPopupMsg jarg1_, long jarg2);
  public final static native long p3NotifyPopupMsg_msg_get(long jarg1, p3NotifyPopupMsg jarg1_);
  public final static native long new_p3NotifyPopupMsg();
  public final static native void delete_p3NotifyPopupMsg(long jarg1);
  public final static native long new_p3Notify();
  public final static native void delete_p3Notify(long jarg1);
  public final static native boolean p3Notify_NotifySysMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_NotifyPopupMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_NotifyLogMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_GetSysMessageList(long jarg1, p3Notify jarg1_, long jarg2);
  public final static native boolean p3Notify_GetPopupMessageList(long jarg1, p3Notify jarg1_, long jarg2);
  public final static native boolean p3Notify_SetSysMessageMode(long jarg1, p3Notify jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Notify_SetPopupMessageMode(long jarg1, p3Notify jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Notify_GetFeedItem(long jarg1, p3Notify jarg1_, long jarg2, RsFeedItem jarg2_);
  public final static native boolean p3Notify_AddPopupMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_AddSysMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_AddLogMessage(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_AddFeedItem__SWIG_0(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Notify_AddFeedItem__SWIG_1(long jarg1, p3Notify jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3Notify_ClearFeedItems(long jarg1, p3Notify jarg1_, long jarg2);
  public final static native long PQIPERSON_NO_LISTENER_get();
  public final static native long PQIPERSON_ALL_BW_LIMITED_get();
  public final static native boolean pqipersongrp_resetListener(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native int pqipersongrp_init_listener(long jarg1, pqipersongrp jarg1_);
  public final static native void pqipersongrp_statusChange(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native int pqipersongrp_addPeer(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native int pqipersongrp_removePeer(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native int pqipersongrp_connectPeer(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native int pqipersongrp_tagHeartbeatRecvd(long jarg1, pqipersongrp jarg1_, long jarg2);
  public final static native boolean pqipersongrp_notifyConnect(long jarg1, pqipersongrp jarg1_, long jarg2, long jarg3, boolean jarg4, long jarg5);
  public final static native int pqipersongrp_tick(long jarg1, pqipersongrp jarg1_);
  public final static native int pqipersongrp_status(long jarg1, pqipersongrp jarg1_);
  public final static native boolean pqipersongrp_getCryptoParams(long jarg1, pqipersongrp jarg1_, long jarg2, long jarg3, RsPeerCryptoParams jarg3_);
  public final static native void delete_pqipersongrp(long jarg1);
  public final static native long new_pqipersongrpDummy(long jarg1, SecurityPolicy jarg1_, long jarg2);
  public final static native void delete_pqipersongrpDummy(long jarg1);
  public final static native long new_pqisslpersongrp(long jarg1, SecurityPolicy jarg1_, long jarg2, long jarg3, p3PeerMgr jarg3_);
  public final static native void delete_pqisslpersongrp(long jarg1);
  public final static native long new_RsHistoryMsgItem();
  public final static native void delete_RsHistoryMsgItem(long jarg1);
  public final static native void RsHistoryMsgItem_clear(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native long RsHistoryMsgItem_print__SWIG_0(long jarg1, RsHistoryMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsHistoryMsgItem_print__SWIG_1(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native void RsHistoryMsgItem_chatPeerId_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_chatPeerId_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_incoming_set(long jarg1, RsHistoryMsgItem jarg1_, boolean jarg2);
  public final static native boolean RsHistoryMsgItem_incoming_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_peerId_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_peerId_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_peerName_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_peerName_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_sendTime_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_sendTime_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_recvTime_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_recvTime_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_message_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_message_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_msgId_set(long jarg1, RsHistoryMsgItem jarg1_, long jarg2);
  public final static native long RsHistoryMsgItem_msgId_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native void RsHistoryMsgItem_saveToDisc_set(long jarg1, RsHistoryMsgItem jarg1_, boolean jarg2);
  public final static native boolean RsHistoryMsgItem_saveToDisc_get(long jarg1, RsHistoryMsgItem jarg1_);
  public final static native long new_RsHistorySerialiser();
  public final static native void delete_RsHistorySerialiser(long jarg1);
  public final static native long RsHistorySerialiser_size(long jarg1, RsHistorySerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsHistorySerialiser_serialise(long jarg1, RsHistorySerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsHistorySerialiser_deserialise(long jarg1, RsHistorySerialiser jarg1_, long jarg2, long jarg3);
  public final static native void rsHistory_set(long jarg1, RsHistory jarg1_);
  public final static native long rsHistory_get();
  public final static native long RS_HISTORY_TYPE_PUBLIC_get();
  public final static native long RS_HISTORY_TYPE_PRIVATE_get();
  public final static native long RS_HISTORY_TYPE_LOBBY_get();
  public final static native long new_HistoryMsg();
  public final static native void HistoryMsg_msgId_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_msgId_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_chatPeerId_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_chatPeerId_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_incoming_set(long jarg1, HistoryMsg jarg1_, boolean jarg2);
  public final static native boolean HistoryMsg_incoming_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_peerId_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_peerId_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_peerName_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_peerName_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_sendTime_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_sendTime_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_recvTime_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_recvTime_get(long jarg1, HistoryMsg jarg1_);
  public final static native void HistoryMsg_message_set(long jarg1, HistoryMsg jarg1_, long jarg2);
  public final static native long HistoryMsg_message_get(long jarg1, HistoryMsg jarg1_);
  public final static native void delete_HistoryMsg(long jarg1);
  public final static native boolean RsHistory_getMessages(long jarg1, RsHistory jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsHistory_getMessage(long jarg1, RsHistory jarg1_, long jarg2, long jarg3, HistoryMsg jarg3_);
  public final static native void RsHistory_removeMessages(long jarg1, RsHistory jarg1_, long jarg2);
  public final static native void RsHistory_clear(long jarg1, RsHistory jarg1_, long jarg2);
  public final static native boolean RsHistory_getEnable(long jarg1, RsHistory jarg1_, long jarg2);
  public final static native void RsHistory_setEnable(long jarg1, RsHistory jarg1_, long jarg2, boolean jarg3);
  public final static native long RsHistory_getMaxStorageDuration(long jarg1, RsHistory jarg1_);
  public final static native void RsHistory_setMaxStorageDuration(long jarg1, RsHistory jarg1_, long jarg2);
  public final static native long RsHistory_getSaveCount(long jarg1, RsHistory jarg1_, long jarg2);
  public final static native void RsHistory_setSaveCount(long jarg1, RsHistory jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsHistory(long jarg1);
  public final static native long new_p3HistoryMgr();
  public final static native void delete_p3HistoryMgr(long jarg1);
  public final static native void p3HistoryMgr_addMessage(long jarg1, p3HistoryMgr jarg1_, boolean jarg2, long jarg3, long jarg4, long jarg5, RsChatMsgItem jarg5_);
  public final static native boolean p3HistoryMgr_getMessages(long jarg1, p3HistoryMgr jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3HistoryMgr_getMessage(long jarg1, p3HistoryMgr jarg1_, long jarg2, long jarg3, HistoryMsg jarg3_);
  public final static native void p3HistoryMgr_clear(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native void p3HistoryMgr_removeMessages(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native boolean p3HistoryMgr_getEnable(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native void p3HistoryMgr_setEnable(long jarg1, p3HistoryMgr jarg1_, long jarg2, boolean jarg3);
  public final static native long p3HistoryMgr_getSaveCount(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native void p3HistoryMgr_setSaveCount(long jarg1, p3HistoryMgr jarg1_, long jarg2, long jarg3);
  public final static native void p3HistoryMgr_setMaxStorageDuration(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native long p3HistoryMgr_getMaxStorageDuration(long jarg1, p3HistoryMgr jarg1_);
  public final static native long p3HistoryMgr_setupSerialiser(long jarg1, p3HistoryMgr jarg1_);
  public final static native boolean p3HistoryMgr_saveList(long jarg1, p3HistoryMgr jarg1_, long jarg2, long jarg3);
  public final static native void p3HistoryMgr_saveDone(long jarg1, p3HistoryMgr jarg1_);
  public final static native boolean p3HistoryMgr_loadList(long jarg1, p3HistoryMgr jarg1_, long jarg2);
  public final static native boolean getRawUInt8(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawUInt8(long jarg1, long jarg2, long jarg3, short jarg4);
  public final static native boolean getRawUInt16(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawUInt16(long jarg1, long jarg2, long jarg3, int jarg4);
  public final static native boolean getRawUInt32(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawUInt32(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean getRawUInt64(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawUInt64(long jarg1, long jarg2, long jarg3, java.math.BigInteger jarg4);
  public final static native boolean getRawUFloat32(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawUFloat32(long jarg1, long jarg2, long jarg3, float jarg4);
  public final static native boolean getRawString(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean setRawString(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean getRawSha1(long jarg1, long jarg2, long jarg3, long jarg4, Sha1CheckSum jarg4_);
  public final static native boolean setRawSha1(long jarg1, long jarg2, long jarg3, long jarg4, Sha1CheckSum jarg4_);
  public final static native short RS_TUNNEL_SUBTYPE_DATA_get();
  public final static native short RS_TUNNEL_SUBTYPE_HANDSHAKE_get();
  public final static native void delete_RsTunnelItem(long jarg1);
  public final static native boolean RsTunnelItem_serialize(long jarg1, RsTunnelItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTunnelItem_serial_size(long jarg1, RsTunnelItem jarg1_);
  public final static native void RsTunnelItem_clear(long jarg1, RsTunnelItem jarg1_);
  public final static native void delete_RsTunnelDataItem(long jarg1);
  public final static native long RsTunnelDataItem_deserialise(long jarg1, long jarg2);
  public final static native void RsTunnelDataItem_encoded_data_len_set(long jarg1, RsTunnelDataItem jarg1_, long jarg2);
  public final static native long RsTunnelDataItem_encoded_data_len_get(long jarg1, RsTunnelDataItem jarg1_);
  public final static native void RsTunnelDataItem_encoded_data_set(long jarg1, RsTunnelDataItem jarg1_, long jarg2);
  public final static native long RsTunnelDataItem_encoded_data_get(long jarg1, RsTunnelDataItem jarg1_);
  public final static native void RsTunnelDataItem_sourcePeerId_set(long jarg1, RsTunnelDataItem jarg1_, long jarg2);
  public final static native long RsTunnelDataItem_sourcePeerId_get(long jarg1, RsTunnelDataItem jarg1_);
  public final static native void RsTunnelDataItem_relayPeerId_set(long jarg1, RsTunnelDataItem jarg1_, long jarg2);
  public final static native long RsTunnelDataItem_relayPeerId_get(long jarg1, RsTunnelDataItem jarg1_);
  public final static native void RsTunnelDataItem_destPeerId_set(long jarg1, RsTunnelDataItem jarg1_, long jarg2);
  public final static native long RsTunnelDataItem_destPeerId_get(long jarg1, RsTunnelDataItem jarg1_);
  public final static native long RsTunnelDataItem_print(long jarg1, RsTunnelDataItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTunnelDataItem_serialize(long jarg1, RsTunnelDataItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTunnelDataItem_serial_size(long jarg1, RsTunnelDataItem jarg1_);
  public final static native void delete_RsTunnelHandshakeItem(long jarg1);
  public final static native long RsTunnelHandshakeItem_deserialise(long jarg1, long jarg2);
  public final static native void RsTunnelHandshakeItem_sourcePeerId_set(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2);
  public final static native long RsTunnelHandshakeItem_sourcePeerId_get(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native void RsTunnelHandshakeItem_relayPeerId_set(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2);
  public final static native long RsTunnelHandshakeItem_relayPeerId_get(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native void RsTunnelHandshakeItem_destPeerId_set(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2);
  public final static native long RsTunnelHandshakeItem_destPeerId_get(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native void RsTunnelHandshakeItem_sslCertPEM_set(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2);
  public final static native long RsTunnelHandshakeItem_sslCertPEM_get(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native void RsTunnelHandshakeItem_connection_accepted_set(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2);
  public final static native long RsTunnelHandshakeItem_connection_accepted_get(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native long RsTunnelHandshakeItem_print(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTunnelHandshakeItem_serialize(long jarg1, RsTunnelHandshakeItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTunnelHandshakeItem_serial_size(long jarg1, RsTunnelHandshakeItem jarg1_);
  public final static native long new_RsTunnelSerialiser();
  public final static native long RsTunnelSerialiser_size(long jarg1, RsTunnelSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsTunnelSerialiser_serialise(long jarg1, RsTunnelSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsTunnelSerialiser_deserialise(long jarg1, RsTunnelSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsTunnelSerialiser(long jarg1);
  public final static native void p3tunnel_statusChange(long jarg1, p3tunnel jarg1_, long jarg2);
  public final static native long new_p3tunnel(long jarg1, long jarg2, pqipersongrp jarg2_);
  public final static native int p3tunnel_tick(long jarg1, p3tunnel jarg1_);
  public final static native void p3tunnel_sendTunnelData(long jarg1, p3tunnel jarg1_, long jarg2, long jarg3, long jarg4, int jarg5);
  public final static native void p3tunnel_pingTunnelConnection(long jarg1, p3tunnel jarg1_, long jarg2, long jarg3);
  public final static native void p3tunnel_initiateHandshake(long jarg1, p3tunnel jarg1_, long jarg2, long jarg3);
  public final static native void delete_p3tunnel(long jarg1);
  public final static native void data_with_length_length_set(long jarg1, data_with_length jarg1_, int jarg2);
  public final static native int data_with_length_length_get(long jarg1, data_with_length jarg1_);
  public final static native void data_with_length_data_set(long jarg1, data_with_length jarg1_, long jarg2);
  public final static native long data_with_length_data_get(long jarg1, data_with_length jarg1_);
  public final static native long new_data_with_length();
  public final static native void delete_data_with_length(long jarg1);
  public final static native long new_pqissltunnel(long jarg1, PQInterface jarg1_, long jarg2, p3LinkMgr jarg2_, long jarg3, p3tunnel jarg3_);
  public final static native void delete_pqissltunnel(long jarg1);
  public final static native int pqissltunnel_connect(long jarg1, pqissltunnel jarg1_, long jarg2);
  public final static native int pqissltunnel_listen(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_stoplistening(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_reset(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_disconnect(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_getConnectAddress(long jarg1, pqissltunnel jarg1_, long jarg2);
  public final static native boolean pqissltunnel_connect_parameter(long jarg1, pqissltunnel jarg1_, long jarg2, long jarg3);
  public final static native int pqissltunnel_tick(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_status(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_senddata(long jarg1, pqissltunnel jarg1_, long jarg2, int jarg3);
  public final static native int pqissltunnel_readdata(long jarg1, pqissltunnel jarg1_, long jarg2, int jarg3);
  public final static native int pqissltunnel_netstatus(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_isactive(long jarg1, pqissltunnel jarg1_);
  public final static native boolean pqissltunnel_moretoread(long jarg1, pqissltunnel jarg1_);
  public final static native boolean pqissltunnel_cansend(long jarg1, pqissltunnel jarg1_);
  public final static native int pqissltunnel_close(long jarg1, pqissltunnel jarg1_);
  public final static native long pqissltunnel_gethash(long jarg1, pqissltunnel jarg1_);
  public final static native boolean pqissltunnel_bandwidthLimited(long jarg1, pqissltunnel jarg1_);
  public final static native void pqissltunnel_addIncomingPacket(long jarg1, pqissltunnel jarg1_, long jarg2, int jarg3);
  public final static native void pqissltunnel_IncommingPingPacket(long jarg1, pqissltunnel jarg1_);
  public final static native void pqissltunnel_IncommingHanshakePacket(long jarg1, pqissltunnel jarg1_, long jarg2);
  public final static native void setAuthSSL(long jarg1, AuthSSL jarg1_);
  public final static native boolean AuthSSLtest_validateOwnCertificate(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSLtest_active(long jarg1, AuthSSLtest jarg1_);
  public final static native int AuthSSLtest_InitAuth(long jarg1, AuthSSLtest jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean AuthSSLtest_CloseAuth(long jarg1, AuthSSLtest jarg1_);
  public final static native long AuthSSLtest_OwnId(long jarg1, AuthSSLtest jarg1_);
  public final static native long AuthSSLtest_getOwnLocation(long jarg1, AuthSSLtest jarg1_);
  public final static native long AuthSSLtest_SaveOwnCertificateToString(long jarg1, AuthSSLtest jarg1_);
  public final static native boolean AuthSSLtest_SignData__SWIG_0(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3);
  public final static native boolean AuthSSLtest_SignData__SWIG_1(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSLtest_SignDataBin__SWIG_0(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean AuthSSLtest_SignDataBin__SWIG_1(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSLtest_VerifyOwnSignBin(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean AuthSSLtest_VerifySignBin(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean AuthSSLtest_encrypt(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4, int jarg5, long jarg6);
  public final static native boolean AuthSSLtest_decrypt(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3, long jarg4, int jarg5);
  public final static native long AuthSSLtest_SignX509ReqWithGPG(long jarg1, AuthSSLtest jarg1_, long jarg2, int jarg3);
  public final static native boolean AuthSSLtest_AuthX509WithGPG(long jarg1, AuthSSLtest jarg1_, long jarg2);
  public final static native int AuthSSLtest_VerifyX509Callback(long jarg1, AuthSSLtest jarg1_, int jarg2, long jarg3);
  public final static native boolean AuthSSLtest_ValidateCertificate(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3);
  public final static native long AuthSSLtest_getCTX(long jarg1, AuthSSLtest jarg1_);
  public final static native boolean AuthSSLtest_FailedCertificate(long jarg1, AuthSSLtest jarg1_, long jarg2, boolean jarg3);
  public final static native boolean AuthSSLtest_CheckCertificate(long jarg1, AuthSSLtest jarg1_, long jarg2, long jarg3);
  public final static native void delete_AuthSSLtest(long jarg1);
  public final static native long new_pqiarchive(long jarg1, RsSerialiser jarg1_, long jarg2, BinInterface jarg2_, int jarg3);
  public final static native void delete_pqiarchive(long jarg1);
  public final static native int pqiarchive_SendItem(long jarg1, pqiarchive jarg1_, long jarg2, RsItem jarg2_);
  public final static native long pqiarchive_GetItem(long jarg1, pqiarchive jarg1_);
  public final static native int pqiarchive_tick(long jarg1, pqiarchive jarg1_);
  public final static native int pqiarchive_status(long jarg1, pqiarchive jarg1_);
  public final static native void pqiarchive_setRealTime(long jarg1, pqiarchive jarg1_, boolean jarg2);
  public final static native long pqiarchive_gethash(long jarg1, pqiarchive jarg1_);
  public final static native void init_item__SWIG_0(long jarg1, RsNxsGrp jarg1_);
  public final static native void init_item__SWIG_1(long jarg1, RsNxsMsg jarg1_);
  public final static native void init_item__SWIG_2(long jarg1, RsGxsGrpMetaData jarg1_);
  public final static native void init_item__SWIG_3(long jarg1, RsGxsMsgMetaData jarg1_);
  public final static native void ok_set(int jarg1);
  public final static native int ok_get();
  public final static native void gok_set(int jarg1);
  public final static native int gok_get();
  public final static native void displayRawPacket(long jarg1, long jarg2, long jarg3);
  public final static native int test_SerialiseTlvItem(long jarg1, long jarg2, RsTlvItem jarg2_, long jarg3, RsTlvItem jarg3_);
  public final static native boolean test_StepThroughTlvStack(long jarg1, long jarg2, int jarg3);
  public final static native int test_CreateTlvStack(long jarg1, long jarg2, long jarg3, int jarg4);
  public final static native int test_TlvSet(long jarg1, int jarg2);
  public final static native int SHORT_STR_get();
  public final static native int LARGE_STR_get();
  public final static native void randString__SWIG_0(long jarg1, long jarg2);
  public final static native void randString__SWIG_1(long jarg1, long jarg2);
  public final static native void init_item__SWIG_4(long jarg1, RsTlvSecurityKey jarg1_);
  public final static native void init_item__SWIG_5(long jarg1, RsTlvKeySignature jarg1_);
  public final static native void init_item__SWIG_6(long jarg1, RsTlvKeySignatureSet jarg1_);
  public final static native void init_item__SWIG_7(long jarg1, RsTlvBinaryData jarg1_);
  public final static native void init_item__SWIG_8(long jarg1, RsTlvFileItem jarg1_);
  public final static native void init_item__SWIG_9(long jarg1, RsTlvFileSet jarg1_);
  public final static native void init_item__SWIG_10(long jarg1, RsTlvHashSet jarg1_);
  public final static native void init_item__SWIG_11(long jarg1, RsTlvPeerIdSet jarg1_);
  public final static native void init_item__SWIG_12(long jarg1, RsTlvImage jarg1_);
  public final static native void init_item__SWIG_13(long jarg1, RsTlvSecurityKeySet jarg1_);
  public final static native long new_RsDummyNetService();
  public final static native void delete_RsDummyNetService(long jarg1);
  public final static native void RsDummyNetService_setSyncAge(long jarg1, RsDummyNetService jarg1_, long jarg2);
  public final static native void RsDummyNetService_requestGroupsOfPeer(long jarg1, RsDummyNetService jarg1_, long jarg2);
  public final static native void RsDummyNetService_requestMessagesOfPeer(long jarg1, RsDummyNetService jarg1_, long jarg2, long jarg3);
  public final static native void RsDummyNetService_pauseSynchronisation(long jarg1, RsDummyNetService jarg1_, boolean jarg2);
  public final static native int RsDummyNetService_requestMsg(long jarg1, RsDummyNetService jarg1_, long jarg2, short jarg3);
  public final static native int RsDummyNetService_requestGrp(long jarg1, RsDummyNetService jarg1_, long jarg2, short jarg3);
  public final static native int RS_SERVICE_TYPE_DUMMY_get();
  public final static native short RS_PKT_SUBTYPE_DUMMY_MSG_get();
  public final static native short RS_PKT_SUBTYPE_DUMMY_GRP_get();
  public final static native long new_RsDummyMsg();
  public final static native void delete_RsDummyMsg(long jarg1);
  public final static native void RsDummyMsg_msgData_set(long jarg1, RsDummyMsg jarg1_, long jarg2);
  public final static native long RsDummyMsg_msgData_get(long jarg1, RsDummyMsg jarg1_);
  public final static native long RsDummyMsg_print__SWIG_0(long jarg1, RsDummyMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsDummyMsg_print__SWIG_1(long jarg1, RsDummyMsg jarg1_, long jarg2);
  public final static native void RsDummyMsg_clear(long jarg1, RsDummyMsg jarg1_);
  public final static native long new_RsDummyGrp();
  public final static native void delete_RsDummyGrp(long jarg1);
  public final static native void RsDummyGrp_grpData_set(long jarg1, RsDummyGrp jarg1_, long jarg2);
  public final static native long RsDummyGrp_grpData_get(long jarg1, RsDummyGrp jarg1_);
  public final static native void RsDummyGrp_clear(long jarg1, RsDummyGrp jarg1_);
  public final static native long RsDummyGrp_print__SWIG_0(long jarg1, RsDummyGrp jarg1_, long jarg2, int jarg3);
  public final static native long RsDummyGrp_print__SWIG_1(long jarg1, RsDummyGrp jarg1_, long jarg2);
  public final static native long new_RsDummySerialiser();
  public final static native void delete_RsDummySerialiser(long jarg1);
  public final static native long RsDummySerialiser_size(long jarg1, RsDummySerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsDummySerialiser_serialise(long jarg1, RsDummySerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsDummySerialiser_deserialise(long jarg1, RsDummySerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsGixsDummy(long jarg1, long jarg2);
  public final static native void delete_RsGixsDummy(long jarg1);
  public final static native long RsGixsDummy_getOutgoing(long jarg1, RsGixsDummy jarg1_);
  public final static native long RsGixsDummy_getIncoming(long jarg1, RsGixsDummy jarg1_);
  public final static native boolean RsGixsDummy_haveKey(long jarg1, RsGixsDummy jarg1_, long jarg2);
  public final static native boolean RsGixsDummy_havePrivateKey(long jarg1, RsGixsDummy jarg1_, long jarg2);
  public final static native boolean RsGixsDummy_requestKey(long jarg1, RsGixsDummy jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGixsDummy_requestPrivateKey(long jarg1, RsGixsDummy jarg1_, long jarg2);
  public final static native int RsGixsDummy_getKey(long jarg1, RsGixsDummy jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native int RsGixsDummy_getPrivateKey(long jarg1, RsGixsDummy jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native long new_GenExchangeTestService(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native void GenExchangeTestService_notifyChanges(long jarg1, GenExchangeTestService jarg1_, long jarg2);
  public final static native void GenExchangeTestService_publishDummyGrp(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, RsDummyGrp jarg3_);
  public final static native void GenExchangeTestService_publishDummyMsg(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, RsDummyMsg jarg3_);
  public final static native boolean GenExchangeTestService_getGroupListTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getMsgListTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getGroupMetaTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getMsgMetaTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getGroupDataTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getMsgDataTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getMsgRelatedListTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native boolean GenExchangeTestService_getMsgRelatedDataTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3);
  public final static native void GenExchangeTestService_setGroupSubscribeFlagTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void GenExchangeTestService_setGroupStatusFlagTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void GenExchangeTestService_setGroupServiceStringTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void GenExchangeTestService_setMsgStatusFlagTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void GenExchangeTestService_setMsgServiceStringTS(long jarg1, GenExchangeTestService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void GenExchangeTestService_service_tick(long jarg1, GenExchangeTestService jarg1_);
  public final static native void delete_GenExchangeTestService(long jarg1);
  public final static native void delete_GenExchangeTest(long jarg1);
  public final static native void GenExchangeTest_runTests(long jarg1, GenExchangeTest jarg1_);
  public final static native long new_GxsPublishGroupTest(long jarg1, GenExchangeTestService jarg1_, long jarg2, RsGeneralDataService jarg2_);
  public final static native void delete_GxsPublishGroupTest(long jarg1);
  public final static native void GxsPublishGroupTest_runTests(long jarg1, GxsPublishGroupTest jarg1_);
  public final static native void delete_GxsMsgRelatedTest(long jarg1);
  public final static native boolean GxsMsgRelatedTest_testMsgRelatedChildIdRetrieval(long jarg1, GxsMsgRelatedTest jarg1_);
  public final static native boolean GxsMsgRelatedTest_testMsgRelatedChildDataRetrieval(long jarg1, GxsMsgRelatedTest jarg1_);
  public final static native boolean GxsMsgRelatedTest_testMsgRelatedChildDataRetrieval_Multi(long jarg1, GxsMsgRelatedTest jarg1_);
  public final static native boolean GxsMsgRelatedTest_testMsgAllVersions(long jarg1, GxsMsgRelatedTest jarg1_);
  public final static native long new_GxsPublishMsgTest(long jarg1, GenExchangeTestService jarg1_, long jarg2, RsGeneralDataService jarg2_);
  public final static native void delete_GxsPublishMsgTest(long jarg1);
  public final static native void GxsPublishMsgTest_runTests(long jarg1, GxsPublishMsgTest jarg1_);
  public final static native boolean GxsPublishMsgTest_testMsgSubmissionRetrieval(long jarg1, GxsPublishMsgTest jarg1_);
  public final static native long NxsTestScenario_getTestName(long jarg1, NxsTestScenario jarg1_);
  public final static native long NxsTestScenario_getDataService(long jarg1, NxsTestScenario jarg1_, long jarg2);
  public final static native boolean NxsTestScenario_testPassed(long jarg1, NxsTestScenario jarg1_);
  public final static native int NxsTestScenario_getServiceType(long jarg1, NxsTestScenario jarg1_);
  public final static native void NxsTestScenario_cleanUp(long jarg1, NxsTestScenario jarg1_);
  public final static native void delete_NxsTestScenario(long jarg1);
  public final static native long new_NxsMessageTestObserver(long jarg1, RsGeneralDataService jarg1_);
  public final static native void NxsMessageTestObserver_notifyNewMessages(long jarg1, NxsMessageTestObserver jarg1_, long jarg2);
  public final static native void NxsMessageTestObserver_notifyNewGroups(long jarg1, NxsMessageTestObserver jarg1_, long jarg2);
  public final static native void delete_NxsMessageTestObserver(long jarg1);
  public final static native long new_NxsMessageTest(int jarg1);
  public final static native void delete_NxsMessageTest(long jarg1);
  public final static native long NxsMessageTest_getTestName(long jarg1, NxsMessageTest jarg1_);
  public final static native int NxsMessageTest_getServiceType(long jarg1, NxsMessageTest jarg1_);
  public final static native long NxsMessageTest_getDataService(long jarg1, NxsMessageTest jarg1_, long jarg2);
  public final static native void NxsMessageTest_cleanUp(long jarg1, NxsMessageTest jarg1_);
  public final static native boolean NxsMessageTest_testPassed(long jarg1, NxsMessageTest jarg1_);
  public final static native long new_NxsNetDummyMgr(long jarg1, long jarg2);
  public final static native long NxsNetDummyMgr_getOwnId(long jarg1, NxsNetDummyMgr jarg1_);
  public final static native void NxsNetDummyMgr_getOnlineList(long jarg1, NxsNetDummyMgr jarg1_, long jarg2);
  public final static native void delete_NxsNetDummyMgr(long jarg1);
  public final static native long new_NxsTestHub(long jarg1, NxsTestScenario jarg1_, long jarg2);
  public final static native void delete_NxsTestHub(long jarg1);
  public final static native boolean NxsTestHub_testsPassed(long jarg1, NxsTestHub jarg1_);
  public final static native void NxsTestHub_run(long jarg1, NxsTestHub jarg1_);
  public final static native void NxsTestHub_cleanUp(long jarg1, NxsTestHub jarg1_);
  public final static native void test_messageStoresAndRetrieve();
  public final static native void test_groupStoreAndRetrieve();
  public final static native void test_storeAndDeleteGroup();
  public final static native void test_storeAndDeleteMessage();
  public final static native void test_searchMsg();
  public final static native void test_searchGrp();
  public final static native void test_multiThreaded();
  public final static native void delete_DataReadWrite(long jarg1);
  public final static native void test_cacheSize();
  public final static native long new_p3Peers(long jarg1, p3LinkMgr jarg1_, long jarg2, p3PeerMgr jarg2_, long jarg3, p3NetMgr jarg3_);
  public final static native void delete_p3Peers(long jarg1);
  public final static native boolean p3Peers_FriendsChanged(long jarg1, p3Peers jarg1_);
  public final static native boolean p3Peers_OthersChanged(long jarg1, p3Peers jarg1_);
  public final static native long p3Peers_getOwnId(long jarg1, p3Peers jarg1_);
  public final static native boolean p3Peers_haveSecretKey(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getOnlineList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getFriendList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getPeerCount(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3Peers_isOnline(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_isFriend(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_isGPGAccepted(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native long p3Peers_getGPGName(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native long p3Peers_getPeerName(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getPeerDetails(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native long p3Peers_getGPGOwnId(long jarg1, p3Peers jarg1_);
  public final static native long p3Peers_getGPGId(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_isKeySupported(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGPGAcceptedList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGPGSignedList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGPGValidList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGPGAllList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGPGDetails(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native boolean p3Peers_getAssociatedSSLIds(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_gpgSignData(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Peers_addFriend__SWIG_0(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Peers_addFriend__SWIG_1(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_removeFriend(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_removeFriendLocation(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_removeKeysFromPGPKeyring(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Peers_connectAttempt(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_setLocation(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_setLocalAddress(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean p3Peers_setExtAddress(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native boolean p3Peers_setDynDNS(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_setNetworkMode(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_setVisState(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native void p3Peers_getIPServersList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native void p3Peers_allowServerIPDetermination(long jarg1, p3Peers jarg1_, boolean jarg2);
  public final static native void p3Peers_allowTunnelConnection(long jarg1, p3Peers jarg1_, boolean jarg2);
  public final static native boolean p3Peers_getAllowServerIPDetermination(long jarg1, p3Peers jarg1_);
  public final static native boolean p3Peers_getAllowTunnelConnection(long jarg1, p3Peers jarg1_);
  public final static native long p3Peers_GetRetroshareInvite__SWIG_0(long jarg1, p3Peers jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native long p3Peers_GetRetroshareInvite__SWIG_1(long jarg1, p3Peers jarg1_, long jarg2, boolean jarg3);
  public final static native long p3Peers_GetRetroshareInvite__SWIG_2(long jarg1, p3Peers jarg1_, boolean jarg2, boolean jarg3);
  public final static native long p3Peers_GetRetroshareInvite__SWIG_3(long jarg1, p3Peers jarg1_, boolean jarg2);
  public final static native boolean p3Peers_GetPGPBase64StringAndCheckSum(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Peers_hasExportMinimal(long jarg1, p3Peers jarg1_);
  public final static native boolean p3Peers_loadCertificateFromString(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Peers_loadDetailsFromStringCert(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_, long jarg4);
  public final static native boolean p3Peers_cleanCertificate(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Peers_saveCertificateToFile(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native long p3Peers_saveCertificateToString(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_signGPGCertificate(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_trustGPGCertificate(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Peers_addGroup(long jarg1, p3Peers jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native boolean p3Peers_editGroup(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3Peers_removeGroup(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_getGroupInfo(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, RsGroupInfo jarg3_);
  public final static native boolean p3Peers_getGroupInfoList(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native boolean p3Peers_assignPeerToGroup(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3Peers_assignPeersToGroup(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long p3Peers_computePeerPermissionFlags(long jarg1, p3Peers jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long p3Peers_servicePermissionFlags(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native long p3Peers_servicePermissionFlags_sslid(long jarg1, p3Peers jarg1_, long jarg2);
  public final static native void p3Peers_setServicePermissionFlags(long jarg1, p3Peers jarg1_, long jarg2, long jarg3);
  public final static native long new_MonitoredRsPeers(long jarg1, Network jarg1_);
  public final static native boolean MonitoredRsPeers_getPeerDetails(long jarg1, MonitoredRsPeers jarg1_, long jarg2, long jarg3, RsPeerDetails jarg3_);
  public final static native void delete_MonitoredRsPeers(long jarg1);
  public final static native short RS_PKT_TYPE_GENERAL_CONFIG_get();
  public final static native short RS_PKT_TYPE_PEER_CONFIG_get();
  public final static native short RS_PKT_TYPE_CACHE_CONFIG_get();
  public final static native short RS_PKT_TYPE_FILE_CONFIG_get();
  public final static native short RS_PKT_TYPE_PLUGIN_CONFIG_get();
  public final static native short RS_PKT_TYPE_HISTORY_CONFIG_get();
  public final static native short RS_PKT_SUBTYPE_KEY_VALUE_get();
  public final static native short RS_PKT_SUBTYPE_PEER_OLD_NET_get();
  public final static native short RS_PKT_SUBTYPE_PEER_STUN_get();
  public final static native short RS_PKT_SUBTYPE_PEER_NET_get();
  public final static native short RS_PKT_SUBTYPE_PEER_GROUP_get();
  public final static native short RS_PKT_SUBTYPE_PEER_PERMISSIONS_get();
  public final static native short RS_PKT_SUBTYPE_FILE_TRANSFER_get();
  public final static native short RS_PKT_SUBTYPE_FILE_ITEM_get();
  public final static native void IpAddressTimed_ipAddr_set(long jarg1, IpAddressTimed jarg1_, long jarg2);
  public final static native long IpAddressTimed_ipAddr_get(long jarg1, IpAddressTimed jarg1_);
  public final static native void IpAddressTimed_seenTime_set(long jarg1, IpAddressTimed jarg1_, long jarg2);
  public final static native long IpAddressTimed_seenTime_get(long jarg1, IpAddressTimed jarg1_);
  public final static native long new_IpAddressTimed();
  public final static native void delete_IpAddressTimed(long jarg1);
  public final static native long new_RsPeerOldNetItem();
  public final static native void delete_RsPeerOldNetItem(long jarg1);
  public final static native void RsPeerOldNetItem_clear(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native long RsPeerOldNetItem_print__SWIG_0(long jarg1, RsPeerOldNetItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPeerOldNetItem_print__SWIG_1(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native void RsPeerOldNetItem_pid_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_pid_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_gpg_id_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_gpg_id_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_location_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_location_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_netMode_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_netMode_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_visState_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_visState_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_lastContact_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_lastContact_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_currentlocaladdr_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_currentlocaladdr_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_currentremoteaddr_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_currentremoteaddr_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_dyndns_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_dyndns_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native void RsPeerOldNetItem_ipAddressList_set(long jarg1, RsPeerOldNetItem jarg1_, long jarg2);
  public final static native long RsPeerOldNetItem_ipAddressList_get(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native long new_RsPeerNetItem();
  public final static native void delete_RsPeerNetItem(long jarg1);
  public final static native void RsPeerNetItem_clear(long jarg1, RsPeerNetItem jarg1_);
  public final static native long RsPeerNetItem_print__SWIG_0(long jarg1, RsPeerNetItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPeerNetItem_print__SWIG_1(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native void RsPeerNetItem_pid_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_pid_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_gpg_id_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_gpg_id_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_location_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_location_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_netMode_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_netMode_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_visState_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_visState_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_lastContact_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_lastContact_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_currentlocaladdr_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_currentlocaladdr_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_currentremoteaddr_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_currentremoteaddr_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_dyndns_set(long jarg1, RsPeerNetItem jarg1_, long jarg2);
  public final static native long RsPeerNetItem_dyndns_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_localAddrList_set(long jarg1, RsPeerNetItem jarg1_, long jarg2, RsTlvIpAddrSet jarg2_);
  public final static native long RsPeerNetItem_localAddrList_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native void RsPeerNetItem_extAddrList_set(long jarg1, RsPeerNetItem jarg1_, long jarg2, RsTlvIpAddrSet jarg2_);
  public final static native long RsPeerNetItem_extAddrList_get(long jarg1, RsPeerNetItem jarg1_);
  public final static native long new_RsPeerServicePermissionItem();
  public final static native void delete_RsPeerServicePermissionItem(long jarg1);
  public final static native void RsPeerServicePermissionItem_clear(long jarg1, RsPeerServicePermissionItem jarg1_);
  public final static native long RsPeerServicePermissionItem_print__SWIG_0(long jarg1, RsPeerServicePermissionItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPeerServicePermissionItem_print__SWIG_1(long jarg1, RsPeerServicePermissionItem jarg1_, long jarg2);
  public final static native void RsPeerServicePermissionItem_pgp_ids_set(long jarg1, RsPeerServicePermissionItem jarg1_, long jarg2);
  public final static native long RsPeerServicePermissionItem_pgp_ids_get(long jarg1, RsPeerServicePermissionItem jarg1_);
  public final static native void RsPeerServicePermissionItem_service_flags_set(long jarg1, RsPeerServicePermissionItem jarg1_, long jarg2);
  public final static native long RsPeerServicePermissionItem_service_flags_get(long jarg1, RsPeerServicePermissionItem jarg1_);
  public final static native long new_RsPeerGroupItem();
  public final static native void delete_RsPeerGroupItem(long jarg1);
  public final static native void RsPeerGroupItem_clear(long jarg1, RsPeerGroupItem jarg1_);
  public final static native long RsPeerGroupItem_print__SWIG_0(long jarg1, RsPeerGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPeerGroupItem_print__SWIG_1(long jarg1, RsPeerGroupItem jarg1_, long jarg2);
  public final static native void RsPeerGroupItem_set(long jarg1, RsPeerGroupItem jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native void RsPeerGroupItem_get(long jarg1, RsPeerGroupItem jarg1_, long jarg2, RsGroupInfo jarg2_);
  public final static native void RsPeerGroupItem_id_set(long jarg1, RsPeerGroupItem jarg1_, long jarg2);
  public final static native long RsPeerGroupItem_id_get(long jarg1, RsPeerGroupItem jarg1_);
  public final static native void RsPeerGroupItem_name_set(long jarg1, RsPeerGroupItem jarg1_, long jarg2);
  public final static native long RsPeerGroupItem_name_get(long jarg1, RsPeerGroupItem jarg1_);
  public final static native void RsPeerGroupItem_flag_set(long jarg1, RsPeerGroupItem jarg1_, long jarg2);
  public final static native long RsPeerGroupItem_flag_get(long jarg1, RsPeerGroupItem jarg1_);
  public final static native void RsPeerGroupItem_peerIds_set(long jarg1, RsPeerGroupItem jarg1_, long jarg2);
  public final static native long RsPeerGroupItem_peerIds_get(long jarg1, RsPeerGroupItem jarg1_);
  public final static native long new_RsPeerStunItem();
  public final static native void delete_RsPeerStunItem(long jarg1);
  public final static native void RsPeerStunItem_clear(long jarg1, RsPeerStunItem jarg1_);
  public final static native long RsPeerStunItem_print__SWIG_0(long jarg1, RsPeerStunItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPeerStunItem_print__SWIG_1(long jarg1, RsPeerStunItem jarg1_, long jarg2);
  public final static native void RsPeerStunItem_stunList_set(long jarg1, RsPeerStunItem jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsPeerStunItem_stunList_get(long jarg1, RsPeerStunItem jarg1_);
  public final static native long new_RsPeerConfigSerialiser();
  public final static native void delete_RsPeerConfigSerialiser(long jarg1);
  public final static native long RsPeerConfigSerialiser_size(long jarg1, RsPeerConfigSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsPeerConfigSerialiser_serialise(long jarg1, RsPeerConfigSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsPeerConfigSerialiser_deserialise(long jarg1, RsPeerConfigSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsCacheConfig();
  public final static native void delete_RsCacheConfig(long jarg1);
  public final static native void RsCacheConfig_clear(long jarg1, RsCacheConfig jarg1_);
  public final static native long RsCacheConfig_print__SWIG_0(long jarg1, RsCacheConfig jarg1_, long jarg2, int jarg3);
  public final static native long RsCacheConfig_print__SWIG_1(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native void RsCacheConfig_pid_set(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native long RsCacheConfig_pid_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_cachetypeid_set(long jarg1, RsCacheConfig jarg1_, int jarg2);
  public final static native int RsCacheConfig_cachetypeid_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_cachesubid_set(long jarg1, RsCacheConfig jarg1_, int jarg2);
  public final static native int RsCacheConfig_cachesubid_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_path_set(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native long RsCacheConfig_path_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_name_set(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native long RsCacheConfig_name_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_hash_set(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native long RsCacheConfig_hash_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_size_set(long jarg1, RsCacheConfig jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsCacheConfig_size_get(long jarg1, RsCacheConfig jarg1_);
  public final static native void RsCacheConfig_recvd_set(long jarg1, RsCacheConfig jarg1_, long jarg2);
  public final static native long RsCacheConfig_recvd_get(long jarg1, RsCacheConfig jarg1_);
  public final static native long new_RsCacheConfigSerialiser();
  public final static native void delete_RsCacheConfigSerialiser(long jarg1);
  public final static native long RsCacheConfigSerialiser_size(long jarg1, RsCacheConfigSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsCacheConfigSerialiser_serialise(long jarg1, RsCacheConfigSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsCacheConfigSerialiser_deserialise(long jarg1, RsCacheConfigSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsFileTransfer();
  public final static native void delete_RsFileTransfer(long jarg1);
  public final static native void RsFileTransfer_clear(long jarg1, RsFileTransfer jarg1_);
  public final static native long RsFileTransfer_print__SWIG_0(long jarg1, RsFileTransfer jarg1_, long jarg2, int jarg3);
  public final static native long RsFileTransfer_print__SWIG_1(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native void RsFileTransfer_file_set(long jarg1, RsFileTransfer jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsFileTransfer_file_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_allPeerIds_set(long jarg1, RsFileTransfer jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsFileTransfer_allPeerIds_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_cPeerId_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_cPeerId_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_state_set(long jarg1, RsFileTransfer jarg1_, int jarg2);
  public final static native int RsFileTransfer_state_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_in_set(long jarg1, RsFileTransfer jarg1_, int jarg2);
  public final static native int RsFileTransfer_in_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_transferred_set(long jarg1, RsFileTransfer jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsFileTransfer_transferred_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_crate_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_crate_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_trate_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_trate_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_lrate_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_lrate_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_ltransfer_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_ltransfer_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_flags_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_flags_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_chunk_strategy_set(long jarg1, RsFileTransfer jarg1_, long jarg2);
  public final static native long RsFileTransfer_chunk_strategy_get(long jarg1, RsFileTransfer jarg1_);
  public final static native void RsFileTransfer_compressed_chunk_map_set(long jarg1, RsFileTransfer jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native long RsFileTransfer_compressed_chunk_map_get(long jarg1, RsFileTransfer jarg1_);
  public final static native long RS_FILE_CONFIG_CLEANUP_DELETE_get();
  public final static native long new_RsFileConfigItem();
  public final static native void delete_RsFileConfigItem(long jarg1);
  public final static native void RsFileConfigItem_clear(long jarg1, RsFileConfigItem jarg1_);
  public final static native long RsFileConfigItem_print__SWIG_0(long jarg1, RsFileConfigItem jarg1_, long jarg2, int jarg3);
  public final static native long RsFileConfigItem_print__SWIG_1(long jarg1, RsFileConfigItem jarg1_, long jarg2);
  public final static native void RsFileConfigItem_file_set(long jarg1, RsFileConfigItem jarg1_, long jarg2, RsTlvFileItem jarg2_);
  public final static native long RsFileConfigItem_file_get(long jarg1, RsFileConfigItem jarg1_);
  public final static native void RsFileConfigItem_flags_set(long jarg1, RsFileConfigItem jarg1_, long jarg2);
  public final static native long RsFileConfigItem_flags_get(long jarg1, RsFileConfigItem jarg1_);
  public final static native void RsFileConfigItem_parent_groups_set(long jarg1, RsFileConfigItem jarg1_, long jarg2);
  public final static native long RsFileConfigItem_parent_groups_get(long jarg1, RsFileConfigItem jarg1_);
  public final static native long new_RsFileConfigSerialiser();
  public final static native void delete_RsFileConfigSerialiser(long jarg1);
  public final static native long RsFileConfigSerialiser_size(long jarg1, RsFileConfigSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsFileConfigSerialiser_serialise(long jarg1, RsFileConfigSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsFileConfigSerialiser_deserialise(long jarg1, RsFileConfigSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsConfigKeyValueSet();
  public final static native void delete_RsConfigKeyValueSet(long jarg1);
  public final static native void RsConfigKeyValueSet_clear(long jarg1, RsConfigKeyValueSet jarg1_);
  public final static native long RsConfigKeyValueSet_print__SWIG_0(long jarg1, RsConfigKeyValueSet jarg1_, long jarg2, int jarg3);
  public final static native long RsConfigKeyValueSet_print__SWIG_1(long jarg1, RsConfigKeyValueSet jarg1_, long jarg2);
  public final static native void RsConfigKeyValueSet_tlvkvs_set(long jarg1, RsConfigKeyValueSet jarg1_, long jarg2, RsTlvKeyValueSet jarg2_);
  public final static native long RsConfigKeyValueSet_tlvkvs_get(long jarg1, RsConfigKeyValueSet jarg1_);
  public final static native long new_RsGeneralConfigSerialiser();
  public final static native void delete_RsGeneralConfigSerialiser(long jarg1);
  public final static native long RsGeneralConfigSerialiser_size(long jarg1, RsGeneralConfigSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGeneralConfigSerialiser_serialise(long jarg1, RsGeneralConfigSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGeneralConfigSerialiser_deserialise(long jarg1, RsGeneralConfigSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long FC_TRANSFER_COMPLETE_get();
  public final static native int ftFileControl_DOWNLOADING_get();
  public final static native int ftFileControl_COMPLETED_get();
  public final static native int ftFileControl_ERROR_COMPLETION_get();
  public final static native int ftFileControl_QUEUED_get();
  public final static native int ftFileControl_PAUSED_get();
  public final static native int ftFileControl_CHECKING_HASH_get();
  public final static native long new_ftFileControl__SWIG_0();
  public final static native long new_ftFileControl__SWIG_1(long jarg1, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, long jarg7, ftFileCreator jarg7_, long jarg8, ftTransferModule jarg8_);
  public final static native void ftFileControl_mName_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mName_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mCurrentPath_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mCurrentPath_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mDestination_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mDestination_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mTransfer_set(long jarg1, ftFileControl jarg1_, long jarg2, ftTransferModule jarg2_);
  public final static native long ftFileControl_mTransfer_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mCreator_set(long jarg1, ftFileControl jarg1_, long jarg2, ftFileCreator jarg2_);
  public final static native long ftFileControl_mCreator_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mState_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mState_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mHash_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mHash_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mSize_set(long jarg1, ftFileControl jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftFileControl_mSize_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mFlags_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mFlags_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mCreateTime_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mCreateTime_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mQueuePriority_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mQueuePriority_get(long jarg1, ftFileControl jarg1_);
  public final static native void ftFileControl_mQueuePosition_set(long jarg1, ftFileControl jarg1_, long jarg2);
  public final static native long ftFileControl_mQueuePosition_get(long jarg1, ftFileControl jarg1_);
  public final static native void delete_ftFileControl(long jarg1);
  public final static native long new_ftPendingRequest__SWIG_0(long jarg1, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5, long jarg6, int jarg7);
  public final static native long new_ftPendingRequest__SWIG_1();
  public final static native void ftPendingRequest_mName_set(long jarg1, ftPendingRequest jarg1_, long jarg2);
  public final static native long ftPendingRequest_mName_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mHash_set(long jarg1, ftPendingRequest jarg1_, long jarg2);
  public final static native long ftPendingRequest_mHash_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mSize_set(long jarg1, ftPendingRequest jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftPendingRequest_mSize_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mDest_set(long jarg1, ftPendingRequest jarg1_, long jarg2);
  public final static native long ftPendingRequest_mDest_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mFlags_set(long jarg1, ftPendingRequest jarg1_, long jarg2);
  public final static native long ftPendingRequest_mFlags_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mSrcIds_set(long jarg1, ftPendingRequest jarg1_, long jarg2);
  public final static native long ftPendingRequest_mSrcIds_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void ftPendingRequest_mState_set(long jarg1, ftPendingRequest jarg1_, int jarg2);
  public final static native int ftPendingRequest_mState_get(long jarg1, ftPendingRequest jarg1_);
  public final static native void delete_ftPendingRequest(long jarg1);
  public final static native long new_ftController(long jarg1, CacheStrapper jarg1_, long jarg2, ftDataMultiplex jarg2_, long jarg3);
  public final static native void ftController_setFtSearchNExtra(long jarg1, ftController jarg1_, long jarg2, ftSearch jarg2_, long jarg3, ftExtraList jarg3_);
  public final static native void ftController_setTurtleRouter(long jarg1, ftController jarg1_, long jarg2, p3turtle jarg2_);
  public final static native void ftController_setFtServer(long jarg1, ftController jarg1_, long jarg2, ftServer jarg2_);
  public final static native boolean ftController_activate(long jarg1, ftController jarg1_);
  public final static native boolean ftController_isActiveAndNoPending(long jarg1, ftController jarg1_);
  public final static native void ftController_run(long jarg1, ftController jarg1_);
  public final static native boolean ftController_FileRequest__SWIG_0(long jarg1, ftController jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, long jarg7, int jarg8);
  public final static native boolean ftController_FileRequest__SWIG_1(long jarg1, ftController jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean ftController_alreadyHaveFile(long jarg1, ftController jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean ftController_setChunkStrategy(long jarg1, ftController jarg1_, long jarg2, int jarg3);
  public final static native void ftController_setDefaultChunkStrategy(long jarg1, ftController jarg1_, int jarg2);
  public final static native int ftController_defaultChunkStrategy(long jarg1, ftController jarg1_);
  public final static native long ftController_freeDiskSpaceLimit(long jarg1, ftController jarg1_);
  public final static native void ftController_setFreeDiskSpaceLimit(long jarg1, ftController jarg1_, long jarg2);
  public final static native boolean ftController_FileCancel(long jarg1, ftController jarg1_, long jarg2);
  public final static native boolean ftController_FileControl(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native boolean ftController_FileClearCompleted(long jarg1, ftController jarg1_);
  public final static native boolean ftController_FlagFileComplete(long jarg1, ftController jarg1_, long jarg2);
  public final static native boolean ftController_getFileDownloadChunksDetails(long jarg1, ftController jarg1_, long jarg2, long jarg3, FileChunksInfo jarg3_);
  public final static native boolean ftController_setDestinationName(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native boolean ftController_setDestinationDirectory(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native boolean ftController_getPriority(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native void ftController_setPriority(long jarg1, ftController jarg1_, long jarg2, int jarg3);
  public final static native void ftController_moveInQueue(long jarg1, ftController jarg1_, long jarg2, int jarg3);
  public final static native void ftController_clearQueue(long jarg1, ftController jarg1_);
  public final static native void ftController_setQueueSize(long jarg1, ftController jarg1_, long jarg2);
  public final static native long ftController_getQueueSize(long jarg1, ftController jarg1_);
  public final static native void ftController_setMinPrioritizedTransfers(long jarg1, ftController jarg1_, long jarg2);
  public final static native long ftController_getMinPrioritizedTransfers(long jarg1, ftController jarg1_);
  public final static native boolean ftController_FileDownloads(long jarg1, ftController jarg1_, long jarg2);
  public final static native boolean ftController_setDownloadDirectory(long jarg1, ftController jarg1_, long jarg2);
  public final static native boolean ftController_setPartialsDirectory(long jarg1, ftController jarg1_, long jarg2);
  public final static native long ftController_getDownloadDirectory(long jarg1, ftController jarg1_);
  public final static native long ftController_getPartialsDirectory(long jarg1, ftController jarg1_);
  public final static native boolean ftController_FileDetails(long jarg1, ftController jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean ftController_moveFile(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native boolean ftController_copyFile(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native boolean ftController_assumeAvailability(long jarg1, ftController jarg1_, long jarg2);
  public final static native void ftController_statusChange(long jarg1, ftController jarg1_, long jarg2);
  public final static native void ftController_addFileSource(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native void ftController_removeFileSource(long jarg1, ftController jarg1_, long jarg2, long jarg3);
  public final static native void delete_ftController(long jarg1);
  public final static native void delete_ftSearch(long jarg1);
  public final static native boolean ftSearch_search__SWIG_0(long jarg1, ftSearch jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, FileInfo jarg5_);
  public final static native boolean ftSearch_search__SWIG_1(long jarg1, ftSearch jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void rsTurtle_set(long jarg1, RsTurtle jarg1_);
  public final static native long rsTurtle_get();
  public final static native void TurtleFileInfo_hash_set(long jarg1, TurtleFileInfo jarg1_, long jarg2);
  public final static native long TurtleFileInfo_hash_get(long jarg1, TurtleFileInfo jarg1_);
  public final static native void TurtleFileInfo_name_set(long jarg1, TurtleFileInfo jarg1_, long jarg2);
  public final static native long TurtleFileInfo_name_get(long jarg1, TurtleFileInfo jarg1_);
  public final static native void TurtleFileInfo_size_set(long jarg1, TurtleFileInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger TurtleFileInfo_size_get(long jarg1, TurtleFileInfo jarg1_);
  public final static native long new_TurtleFileInfo();
  public final static native void delete_TurtleFileInfo(long jarg1);
  public final static native void TurtleRequestDisplayInfo_request_id_set(long jarg1, TurtleRequestDisplayInfo jarg1_, long jarg2);
  public final static native long TurtleRequestDisplayInfo_request_id_get(long jarg1, TurtleRequestDisplayInfo jarg1_);
  public final static native void TurtleRequestDisplayInfo_source_peer_id_set(long jarg1, TurtleRequestDisplayInfo jarg1_, long jarg2);
  public final static native long TurtleRequestDisplayInfo_source_peer_id_get(long jarg1, TurtleRequestDisplayInfo jarg1_);
  public final static native void TurtleRequestDisplayInfo_age_set(long jarg1, TurtleRequestDisplayInfo jarg1_, long jarg2);
  public final static native long TurtleRequestDisplayInfo_age_get(long jarg1, TurtleRequestDisplayInfo jarg1_);
  public final static native void TurtleRequestDisplayInfo_depth_set(long jarg1, TurtleRequestDisplayInfo jarg1_, long jarg2);
  public final static native long TurtleRequestDisplayInfo_depth_get(long jarg1, TurtleRequestDisplayInfo jarg1_);
  public final static native long new_TurtleRequestDisplayInfo();
  public final static native void delete_TurtleRequestDisplayInfo(long jarg1);
  public final static native void TurtleTrafficStatisticsInfo_unknown_updn_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_unknown_updn_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_data_up_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_data_up_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_data_dn_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_data_dn_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_tr_up_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_tr_up_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_tr_dn_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_tr_dn_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_total_up_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_total_up_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_total_dn_Bps_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, float jarg2);
  public final static native float TurtleTrafficStatisticsInfo_total_dn_Bps_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native void TurtleTrafficStatisticsInfo_forward_probabilities_set(long jarg1, TurtleTrafficStatisticsInfo jarg1_, long jarg2);
  public final static native long TurtleTrafficStatisticsInfo_forward_probabilities_get(long jarg1, TurtleTrafficStatisticsInfo jarg1_);
  public final static native long new_TurtleTrafficStatisticsInfo();
  public final static native void delete_TurtleTrafficStatisticsInfo(long jarg1);
  public final static native void delete_RsTurtle(long jarg1);
  public final static native void RsTurtle_setEnabled(long jarg1, RsTurtle jarg1_, boolean jarg2);
  public final static native boolean RsTurtle_enabled(long jarg1, RsTurtle jarg1_);
  public final static native void RsTurtle_setSessionEnabled(long jarg1, RsTurtle jarg1_, boolean jarg2);
  public final static native boolean RsTurtle_sessionEnabled(long jarg1, RsTurtle jarg1_);
  public final static native long RsTurtle_turtleSearch__SWIG_0(long jarg1, RsTurtle jarg1_, long jarg2);
  public final static native long RsTurtle_turtleSearch__SWIG_1(long jarg1, RsTurtle jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void RsTurtle_monitorTunnels(long jarg1, RsTurtle jarg1_, long jarg2, long jarg3, RsTurtleClientService jarg3_);
  public final static native void RsTurtle_stopMonitoringTunnels(long jarg1, RsTurtle jarg1_, long jarg2);
  public final static native void RsTurtle_registerTunnelService(long jarg1, RsTurtle jarg1_, long jarg2, RsTurtleClientService jarg2_);
  public final static native void RsTurtle_getInfo(long jarg1, RsTurtle jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void RsTurtle_getTrafficStatistics(long jarg1, RsTurtle jarg1_, long jarg2, TurtleTrafficStatisticsInfo jarg2_);
  public final static native boolean RsTurtle_isTurtlePeer(long jarg1, RsTurtle jarg1_, long jarg2);
  public final static native void RsTurtle_setMaxTRForwardRate(long jarg1, RsTurtle jarg1_, int jarg2);
  public final static native int RsTurtle_getMaxTRForwardRate(long jarg1, RsTurtle jarg1_);
  public final static native int TURTLE_MAX_SEARCH_DEPTH_get();
  public final static native void TurtleRequestInfo_origin_set(long jarg1, TurtleRequestInfo jarg1_, long jarg2);
  public final static native long TurtleRequestInfo_origin_get(long jarg1, TurtleRequestInfo jarg1_);
  public final static native void TurtleRequestInfo_time_stamp_set(long jarg1, TurtleRequestInfo jarg1_, long jarg2);
  public final static native long TurtleRequestInfo_time_stamp_get(long jarg1, TurtleRequestInfo jarg1_);
  public final static native void TurtleRequestInfo_depth_set(long jarg1, TurtleRequestInfo jarg1_, int jarg2);
  public final static native int TurtleRequestInfo_depth_get(long jarg1, TurtleRequestInfo jarg1_);
  public final static native void TurtleRequestInfo_responses_set(long jarg1, TurtleRequestInfo jarg1_, long jarg2);
  public final static native long TurtleRequestInfo_responses_get(long jarg1, TurtleRequestInfo jarg1_);
  public final static native long new_TurtleRequestInfo();
  public final static native void delete_TurtleRequestInfo(long jarg1);
  public final static native void TurtleTunnel_local_src_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_local_src_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_local_dst_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_local_dst_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_time_stamp_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_time_stamp_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_transfered_bytes_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_transfered_bytes_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_speed_Bps_set(long jarg1, TurtleTunnel jarg1_, float jarg2);
  public final static native float TurtleTunnel_speed_Bps_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_hash_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_hash_get(long jarg1, TurtleTunnel jarg1_);
  public final static native void TurtleTunnel_vpid_set(long jarg1, TurtleTunnel jarg1_, long jarg2);
  public final static native long TurtleTunnel_vpid_get(long jarg1, TurtleTunnel jarg1_);
  public final static native long new_TurtleTunnel();
  public final static native void delete_TurtleTunnel(long jarg1);
  public final static native void TurtleHashInfo_tunnels_set(long jarg1, TurtleHashInfo jarg1_, long jarg2);
  public final static native long TurtleHashInfo_tunnels_get(long jarg1, TurtleHashInfo jarg1_);
  public final static native void TurtleHashInfo_last_request_set(long jarg1, TurtleHashInfo jarg1_, long jarg2);
  public final static native long TurtleHashInfo_last_request_get(long jarg1, TurtleHashInfo jarg1_);
  public final static native void TurtleHashInfo_last_digg_time_set(long jarg1, TurtleHashInfo jarg1_, long jarg2);
  public final static native long TurtleHashInfo_last_digg_time_get(long jarg1, TurtleHashInfo jarg1_);
  public final static native void TurtleHashInfo_service_set(long jarg1, TurtleHashInfo jarg1_, long jarg2, RsTurtleClientService jarg2_);
  public final static native long TurtleHashInfo_service_get(long jarg1, TurtleHashInfo jarg1_);
  public final static native long new_TurtleHashInfo();
  public final static native void delete_TurtleHashInfo(long jarg1);
  public final static native long new_p3turtle(long jarg1, p3LinkMgr jarg1_);
  public final static native void p3turtle_setEnabled(long jarg1, p3turtle jarg1_, boolean jarg2);
  public final static native boolean p3turtle_enabled(long jarg1, p3turtle jarg1_);
  public final static native void p3turtle_setSessionEnabled(long jarg1, p3turtle jarg1_, boolean jarg2);
  public final static native boolean p3turtle_sessionEnabled(long jarg1, p3turtle jarg1_);
  public final static native long p3turtle_turtleSearch__SWIG_0(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native long p3turtle_turtleSearch__SWIG_1(long jarg1, p3turtle jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void p3turtle_monitorTunnels(long jarg1, p3turtle jarg1_, long jarg2, long jarg3, RsTurtleClientService jarg3_);
  public final static native void p3turtle_stopMonitoringTunnels(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native void p3turtle_registerTunnelService(long jarg1, p3turtle jarg1_, long jarg2, RsTurtleClientService jarg2_);
  public final static native void p3turtle_getInfo(long jarg1, p3turtle jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void p3turtle_getTrafficStatistics(long jarg1, p3turtle jarg1_, long jarg2, TurtleTrafficStatisticsInfo jarg2_);
  public final static native int p3turtle_tick(long jarg1, p3turtle jarg1_);
  public final static native long p3turtle_setupSerialiser(long jarg1, p3turtle jarg1_);
  public final static native boolean p3turtle_saveList(long jarg1, p3turtle jarg1_, long jarg2, long jarg3);
  public final static native boolean p3turtle_loadList(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native boolean p3turtle_isTurtlePeer(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native void p3turtle_setMaxTRForwardRate(long jarg1, p3turtle jarg1_, int jarg2);
  public final static native int p3turtle_getMaxTRForwardRate(long jarg1, p3turtle jarg1_);
  public final static native boolean p3turtle_isOnline(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native long p3turtle_getTurtlePeerId(long jarg1, p3turtle jarg1_, long jarg2);
  public final static native void p3turtle_getSourceVirtualPeersList(long jarg1, p3turtle jarg1_, long jarg2, long jarg3);
  public final static native void p3turtle_sendTurtleData(long jarg1, p3turtle jarg1_, long jarg2, long jarg3, RsTurtleGenericTunnelItem jarg3_);
  public final static native void delete_p3turtle(long jarg1);
  public final static native long new_MonitoredTurtleRouter(long jarg1, p3LinkMgr jarg1_, long jarg2, ftServer jarg2_);
  public final static native boolean MonitoredTurtleRouter_loadConfiguration(long jarg1, MonitoredTurtleRouter jarg1_, long jarg2);
  public final static native boolean MonitoredTurtleRouter_saveConfiguration(long jarg1, MonitoredTurtleRouter jarg1_);
  public final static native boolean MonitoredTurtleRouter_performLocalHashSearch(long jarg1, MonitoredTurtleRouter jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void MonitoredTurtleRouter_provideFileHash(long jarg1, MonitoredTurtleRouter jarg1_, long jarg2);
  public final static native void delete_MonitoredTurtleRouter(long jarg1);
  public final static native long new_PeerNode(long jarg1, long jarg2);
  public final static native void delete_PeerNode(long jarg1);
  public final static native long PeerNode_outgoing(long jarg1, PeerNode jarg1_);
  public final static native void PeerNode_incoming(long jarg1, PeerNode jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native long PeerNode_id(long jarg1, PeerNode jarg1_);
  public final static native void PeerNode_tick(long jarg1, PeerNode jarg1_);
  public final static native long PeerNode_turtle_service(long jarg1, PeerNode jarg1_);
  public final static native void PeerNode_manageFileHash(long jarg1, PeerNode jarg1_, long jarg2);
  public final static native void PeerNode_provideFileHash(long jarg1, PeerNode jarg1_, long jarg2);
  public final static native long PeerNode_providedHashes(long jarg1, PeerNode jarg1_);
  public final static native long PeerNode_managedHashes(long jarg1, PeerNode jarg1_);
  public final static native void PeerNode_getTrafficInfo(long jarg1, PeerNode jarg1_, long jarg2);
  public final static native boolean Network_initRandom(long jarg1, Network jarg1_, long jarg2, float jarg3);
  public final static native void Network_tick(long jarg1, Network jarg1_);
  public final static native long Network_node_by_id(long jarg1, Network jarg1_, long jarg2);
  public final static native long new_Network();
  public final static native void delete_Network(long jarg1);
  public final static native int NUM_CONN_MAX_get();
  public final static native int TST_STATE_CONNECT_get();
  public final static native int TST_STATE_LISTEN_get();
  public final static native int TST_STATE_CONNECTED_get();
  public final static native int TST_ACTION_NONE_get();
  public final static native int TST_ACTION_FAILED_get();
  public final static native int TST_ACTION_SUCCESS_get();
  public final static native void testCounter_set(long jarg1);
  public final static native long testCounter_get();
  public final static native void testConnectPointer_set(long jarg1);
  public final static native long testConnectPointer_get();
  public final static native void testConnectState_set(long jarg1);
  public final static native long testConnectState_get();
  public final static native void testConnectTimes_set(long jarg1);
  public final static native long testConnectTimes_get();
  public final static native void testConnectAddrs_set(long jarg1);
  public final static native long testConnectAddrs_get();
  public final static native void testResetState_set(long jarg1);
  public final static native long testResetState_get();
  public final static native void testResetTimes_set(long jarg1);
  public final static native long testResetTimes_get();
  public final static native long findWhichConnect(long jarg1, pqiconnect jarg1_);
  public final static native void addTestConnect(long jarg1, pqiconnect jarg1_, long jarg2, PQInterface jarg2_);
  public final static native void resetTestConnects();
  public final static native void setDefaultTestConnectAction(long jarg1);
  public final static native long new_testConnect(long jarg1, RsSerialiser jarg1_, long jarg2, NetBinInterface jarg2_);
  public final static native void delete_testConnect(long jarg1);
  public final static native int testConnect_tick(long jarg1, testConnect jarg1_);
  public final static native int testConnect_connect(long jarg1, testConnect jarg1_, long jarg2);
  public final static native int testConnect_listen(long jarg1, testConnect jarg1_);
  public final static native int testConnect_stoplistening(long jarg1, testConnect jarg1_);
  public final static native int testConnect_reset(long jarg1, testConnect jarg1_);
  public final static native boolean testConnect_connect_parameter(long jarg1, testConnect jarg1_, long jarg2, long jarg3);
  public final static native int testConnect_getConnectAddress(long jarg1, testConnect jarg1_, long jarg2);
  public final static native long createTestPerson(long jarg1, long jarg2, pqipersongrp jarg2_);
  public final static native void setupPqiPersonGrpTH();
  public final static native void tickPqiPersonGrpTH();
  public final static native void mPqiPersonGrpTH_set(long jarg1, pqipersongrpTestHarness jarg1_);
  public final static native long mPqiPersonGrpTH_get();
  public final static native void delete_pqipersongrpTestHarness(long jarg1);
  public final static native int TEST_PKT_SIZE_get();
  public final static native String TEST_PKT_HASH_get();
  public final static native int TEST_PKT_OFFSET_get();
  public final static native int TEST_DATA_LEN_get();
  public final static native void generate_test_data();
  public final static native boolean check_data(long jarg1, int jarg2);
  public final static native long gen_packet(int jarg1, long jarg2);
  public final static native boolean check_packet(long jarg1, RsFileData jarg1_);
  public final static native void delete_ServiceTest(long jarg1);
  public final static native void ServiceTest_runTests(long jarg1, ServiceTest jarg1_);
  public final static native void ServiceTest_sendItem(long jarg1, ServiceTest jarg1_, long jarg2, RsItem jarg2_);
  public final static native int RS_DISTRIB_PRIVACY_MASK_get();
  public final static native int RS_DISTRIB_AUTHEN_MASK_get();
  public final static native int RS_DISTRIB_LISTEN_MASK_get();
  public final static native int RS_DISTRIB_UPDATE_MASK_get();
  public final static native int RS_DISTRIB_MISC_MASK_get();
  public final static native int RS_DISTRIB_PUBLIC_get();
  public final static native int RS_DISTRIB_PRIVATE_get();
  public final static native int RS_DISTRIB_ENCRYPTED_get();
  public final static native int RS_DISTRIB_AUTHEN_REQ_get();
  public final static native int RS_DISTRIB_AUTHEN_ANON_get();
  public final static native int RS_DISTRIB_ADMIN_get();
  public final static native int RS_DISTRIB_PUBLISH_get();
  public final static native int RS_DISTRIB_SUBSCRIBED_get();
  public final static native int RS_DISTRIB_UPDATE_get();
  public final static native int RS_DISTRIB_MISSING_MSG_get();
  public final static native int FORUM_MSG_STATUS_MASK_get();
  public final static native int FORUM_MSG_STATUS_READ_get();
  public final static native int FORUM_MSG_STATUS_UNREAD_BY_USER_get();
  public final static native int FORUM_MSG_STATUS_LOAD_EMBEDDED_IMAGES_get();
  public final static native long new_ForumInfo();
  public final static native void ForumInfo_forumId_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_forumId_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_forumName_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_forumName_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_forumDesc_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_forumDesc_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_forumFlags_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_forumFlags_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_subscribeFlags_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_subscribeFlags_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_pop_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_pop_get(long jarg1, ForumInfo jarg1_);
  public final static native void ForumInfo_lastPost_set(long jarg1, ForumInfo jarg1_, long jarg2);
  public final static native long ForumInfo_lastPost_get(long jarg1, ForumInfo jarg1_);
  public final static native void delete_ForumInfo(long jarg1);
  public final static native long new_ForumMsgInfo();
  public final static native void ForumMsgInfo_forumId_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_forumId_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_threadId_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_threadId_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_parentId_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_parentId_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_msgId_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_msgId_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_srcId_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_srcId_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_msgflags_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_msgflags_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_title_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_title_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_msg_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_msg_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_ts_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_ts_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_childTS_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_childTS_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void ForumMsgInfo_status_set(long jarg1, ForumMsgInfo jarg1_, long jarg2);
  public final static native long ForumMsgInfo_status_get(long jarg1, ForumMsgInfo jarg1_);
  public final static native void delete_ForumMsgInfo(long jarg1);
  public final static native long new_ThreadInfoSummary();
  public final static native void ThreadInfoSummary_forumId_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_forumId_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_threadId_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_threadId_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_parentId_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_parentId_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_msgId_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_msgId_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_msgflags_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_msgflags_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_title_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_title_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_msg_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_msg_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_count_set(long jarg1, ThreadInfoSummary jarg1_, int jarg2);
  public final static native int ThreadInfoSummary_count_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_ts_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_ts_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void ThreadInfoSummary_childTS_set(long jarg1, ThreadInfoSummary jarg1_, long jarg2);
  public final static native long ThreadInfoSummary_childTS_get(long jarg1, ThreadInfoSummary jarg1_);
  public final static native void delete_ThreadInfoSummary(long jarg1);
  public final static native void rsForums_set(long jarg1, RsForums jarg1_);
  public final static native long rsForums_get();
  public final static native void delete_RsForums(long jarg1);
  public final static native boolean RsForums_forumsChanged(long jarg1, RsForums jarg1_, long jarg2);
  public final static native long RsForums_createForum(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsForums_getForumInfo(long jarg1, RsForums jarg1_, long jarg2, long jarg3, ForumInfo jarg3_);
  public final static native boolean RsForums_setForumInfo(long jarg1, RsForums jarg1_, long jarg2, long jarg3, ForumInfo jarg3_);
  public final static native boolean RsForums_getForumList(long jarg1, RsForums jarg1_, long jarg2);
  public final static native boolean RsForums_getForumThreadList(long jarg1, RsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean RsForums_getForumThreadMsgList(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsForums_getForumMessage(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4, ForumMsgInfo jarg4_);
  public final static native boolean RsForums_setMessageStatus(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsForums_getMessageStatus(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsForums_ForumMessageSend(long jarg1, RsForums jarg1_, long jarg2, ForumMsgInfo jarg2_);
  public final static native boolean RsForums_forumRestoreKeys(long jarg1, RsForums jarg1_, long jarg2);
  public final static native boolean RsForums_forumSubscribe(long jarg1, RsForums jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsForums_forumShareKeys(long jarg1, RsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean RsForums_getMessageCount(long jarg1, RsForums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native short RS_PKT_SUBTYPE_FORUM_GRP_get();
  public final static native short RS_PKT_SUBTYPE_FORUM_MSG_get();
  public final static native short RS_PKT_SUBTYPE_FORUM_READ_STATUS_get();
  public final static native long new_RsForumMsg();
  public final static native void delete_RsForumMsg(long jarg1);
  public final static native void RsForumMsg_clear(long jarg1, RsForumMsg jarg1_);
  public final static native long RsForumMsg_print__SWIG_0(long jarg1, RsForumMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsForumMsg_print__SWIG_1(long jarg1, RsForumMsg jarg1_, long jarg2);
  public final static native void RsForumMsg_srcId_set(long jarg1, RsForumMsg jarg1_, long jarg2);
  public final static native long RsForumMsg_srcId_get(long jarg1, RsForumMsg jarg1_);
  public final static native void RsForumMsg_title_set(long jarg1, RsForumMsg jarg1_, long jarg2);
  public final static native long RsForumMsg_title_get(long jarg1, RsForumMsg jarg1_);
  public final static native void RsForumMsg_msg_set(long jarg1, RsForumMsg jarg1_, long jarg2);
  public final static native long RsForumMsg_msg_get(long jarg1, RsForumMsg jarg1_);
  public final static native long new_RsForumReadStatus();
  public final static native void delete_RsForumReadStatus(long jarg1);
  public final static native void RsForumReadStatus_clear(long jarg1, RsForumReadStatus jarg1_);
  public final static native long RsForumReadStatus_print(long jarg1, RsForumReadStatus jarg1_, long jarg2, int jarg3);
  public final static native void RsForumReadStatus_forumId_set(long jarg1, RsForumReadStatus jarg1_, long jarg2);
  public final static native long RsForumReadStatus_forumId_get(long jarg1, RsForumReadStatus jarg1_);
  public final static native void RsForumReadStatus_msgReadStatus_set(long jarg1, RsForumReadStatus jarg1_, long jarg2);
  public final static native long RsForumReadStatus_msgReadStatus_get(long jarg1, RsForumReadStatus jarg1_);
  public final static native long new_RsForumSerialiser();
  public final static native void delete_RsForumSerialiser(long jarg1);
  public final static native long RsForumSerialiser_size(long jarg1, RsForumSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsForumSerialiser_serialise(long jarg1, RsForumSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsForumSerialiser_deserialise(long jarg1, RsForumSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_p3Forums(int jarg1, long jarg2, CacheStrapper jarg2_, long jarg3, CacheTransfer jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native void delete_p3Forums(long jarg1);
  public final static native void p3Forums_loadDummyData(long jarg1, p3Forums jarg1_);
  public final static native boolean p3Forums_forumsChanged(long jarg1, p3Forums jarg1_, long jarg2);
  public final static native long p3Forums_createForum(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Forums_getForumInfo(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, ForumInfo jarg3_);
  public final static native boolean p3Forums_setForumInfo(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, ForumInfo jarg3_);
  public final static native boolean p3Forums_getForumList(long jarg1, p3Forums jarg1_, long jarg2);
  public final static native boolean p3Forums_getForumThreadList(long jarg1, p3Forums jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Forums_getForumThreadMsgList(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Forums_getForumMessage(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4, ForumMsgInfo jarg4_);
  public final static native boolean p3Forums_ForumMessageSend(long jarg1, p3Forums jarg1_, long jarg2, ForumMsgInfo jarg2_);
  public final static native boolean p3Forums_setMessageStatus(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Forums_getMessageStatus(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Forums_forumRestoreKeys(long jarg1, p3Forums jarg1_, long jarg2);
  public final static native boolean p3Forums_forumShareKeys(long jarg1, p3Forums jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Forums_forumSubscribe(long jarg1, p3Forums jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Forums_getMessageCount(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3Forums_locked_notifyGroupChanged(long jarg1, p3Forums jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, boolean jarg4);
  public final static native boolean p3Forums_locked_eventDuplicateMsg(long jarg1, p3Forums jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, RsDistribMsg jarg3_, long jarg4, boolean jarg5);
  public final static native boolean p3Forums_locked_eventNewMsg(long jarg1, p3Forums jarg1_, long jarg2, GroupInfo jarg2_, long jarg3, RsDistribMsg jarg3_, long jarg4, boolean jarg5);
  public final static native long p3Forums_createSerialiser(long jarg1, p3Forums jarg1_);
  public final static native boolean p3Forums_locked_checkDistribMsg(long jarg1, p3Forums jarg1_, long jarg2, RsDistribMsg jarg2_);
  public final static native long p3Forums_locked_createPublicDistribGrp(long jarg1, p3Forums jarg1_, long jarg2, GroupInfo jarg2_);
  public final static native long p3Forums_locked_createPrivateDistribGrp(long jarg1, p3Forums jarg1_, long jarg2, GroupInfo jarg2_);
  public final static native boolean p3Forums_childLoadList(long jarg1, p3Forums jarg1_, long jarg2);
  public final static native long p3Forums_childSaveList(long jarg1, p3Forums jarg1_);
  public final static native long p3Forums_createForumMsg(long jarg1, p3Forums jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native long new_forumServiceTest();
  public final static native void delete_forumServiceTest(long jarg1);
  public final static native void forumServiceTest_runTests(long jarg1, forumServiceTest jarg1_);
  public final static native long RS_CHAT_FLAG_PRIVATE_get();
  public final static native long RS_CHAT_FLAG_REQUESTS_AVATAR_get();
  public final static native long RS_CHAT_FLAG_CONTAINS_AVATAR_get();
  public final static native long RS_CHAT_FLAG_AVATAR_AVAILABLE_get();
  public final static native long RS_CHAT_FLAG_CUSTOM_STATE_get();
  public final static native long RS_CHAT_FLAG_PUBLIC_get();
  public final static native long RS_CHAT_FLAG_REQUEST_CUSTOM_STATE_get();
  public final static native long RS_CHAT_FLAG_CUSTOM_STATE_AVAILABLE_get();
  public final static native long RS_CHAT_FLAG_PARTIAL_MESSAGE_get();
  public final static native long RS_CHAT_FLAG_LOBBY_get();
  public final static native long RS_CHAT_FLAG_CLOSING_DISTANT_CONNECTION_get();
  public final static native long RS_CHAT_FLAG_ACK_DISTANT_CONNECTION_get();
  public final static native long RS_CHATMSG_CONFIGFLAG_INCOMING_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_AVATAR_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_STATUS_get();
  public final static native short RS_PKT_SUBTYPE_PRIVATECHATMSG_CONFIG_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_MSG_DEPRECATED_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_INVITE_DEPREC_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_ACCEPT_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_CHALLENGE_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_UNSUBSCRIBE_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_EVENT_DEPREC_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_MSG_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_LIST_REQUEST_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_LIST_deprecated_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_INVITE_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_EVENT_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_LIST_deprecated2_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_LIST_get();
  public final static native short RS_PKT_SUBTYPE_DISTANT_INVITE_CONFIG_get();
  public final static native short RS_PKT_SUBTYPE_CHAT_LOBBY_CONFIG_get();
  public final static native short RS_PKT_SUBTYPE_MSG_TAG_TYPE_get();
  public final static native short RS_PKT_SUBTYPE_MSG_TAGS_get();
  public final static native short RS_PKT_SUBTYPE_MSG_SRC_TAG_get();
  public final static native short RS_PKT_SUBTYPE_MSG_PARENT_TAG_get();
  public final static native short RS_PKT_SUBTYPE_MSG_INVITE_get();
  public final static native void delete_RsChatItem(long jarg1);
  public final static native void RsChatItem_clear(long jarg1, RsChatItem jarg1_);
  public final static native long RsChatItem_print__SWIG_0(long jarg1, RsChatItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatItem_print__SWIG_1(long jarg1, RsChatItem jarg1_, long jarg2);
  public final static native boolean RsChatItem_serialise(long jarg1, RsChatItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatItem_serial_size(long jarg1, RsChatItem jarg1_);
  public final static native long new_RsChatMsgItem__SWIG_0();
  public final static native long new_RsChatMsgItem__SWIG_1(short jarg1);
  public final static native long new_RsChatMsgItem__SWIG_2(long jarg1, long jarg2, short jarg3);
  public final static native long new_RsChatMsgItem__SWIG_3(long jarg1, long jarg2);
  public final static native void delete_RsChatMsgItem(long jarg1);
  public final static native void RsChatMsgItem_clear(long jarg1, RsChatMsgItem jarg1_);
  public final static native long RsChatMsgItem_print__SWIG_0(long jarg1, RsChatMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatMsgItem_print__SWIG_1(long jarg1, RsChatMsgItem jarg1_, long jarg2);
  public final static native boolean RsChatMsgItem_serialise(long jarg1, RsChatMsgItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatMsgItem_serial_size(long jarg1, RsChatMsgItem jarg1_);
  public final static native void RsChatMsgItem_chatFlags_set(long jarg1, RsChatMsgItem jarg1_, long jarg2);
  public final static native long RsChatMsgItem_chatFlags_get(long jarg1, RsChatMsgItem jarg1_);
  public final static native void RsChatMsgItem_sendTime_set(long jarg1, RsChatMsgItem jarg1_, long jarg2);
  public final static native long RsChatMsgItem_sendTime_get(long jarg1, RsChatMsgItem jarg1_);
  public final static native void RsChatMsgItem_message_set(long jarg1, RsChatMsgItem jarg1_, long jarg2);
  public final static native long RsChatMsgItem_message_get(long jarg1, RsChatMsgItem jarg1_);
  public final static native void RsChatMsgItem_recvTime_set(long jarg1, RsChatMsgItem jarg1_, long jarg2);
  public final static native long RsChatMsgItem_recvTime_get(long jarg1, RsChatMsgItem jarg1_);
  public final static native void RsChatLobbyBouncingObject_lobby_id_set(long jarg1, RsChatLobbyBouncingObject jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyBouncingObject_lobby_id_get(long jarg1, RsChatLobbyBouncingObject jarg1_);
  public final static native void RsChatLobbyBouncingObject_msg_id_set(long jarg1, RsChatLobbyBouncingObject jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyBouncingObject_msg_id_get(long jarg1, RsChatLobbyBouncingObject jarg1_);
  public final static native void RsChatLobbyBouncingObject_nick_set(long jarg1, RsChatLobbyBouncingObject jarg1_, long jarg2);
  public final static native long RsChatLobbyBouncingObject_nick_get(long jarg1, RsChatLobbyBouncingObject jarg1_);
  public final static native long RsChatLobbyBouncingObject_duplicate(long jarg1, RsChatLobbyBouncingObject jarg1_);
  public final static native long RsChatLobbyBouncingObject_serial_size(long jarg1, RsChatLobbyBouncingObject jarg1_);
  public final static native boolean RsChatLobbyBouncingObject_serialise(long jarg1, RsChatLobbyBouncingObject jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsChatLobbyBouncingObject_print__SWIG_0(long jarg1, RsChatLobbyBouncingObject jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyBouncingObject_print__SWIG_1(long jarg1, RsChatLobbyBouncingObject jarg1_, long jarg2);
  public final static native boolean RsChatLobbyBouncingObject_deserialise(long jarg1, RsChatLobbyBouncingObject jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void delete_RsChatLobbyBouncingObject(long jarg1);
  public final static native long new_RsChatLobbyMsgItem__SWIG_0();
  public final static native long new_RsChatLobbyMsgItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyMsgItem(long jarg1);
  public final static native long RsChatLobbyMsgItem_print__SWIG_0(long jarg1, RsChatLobbyMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyMsgItem_print__SWIG_1(long jarg1, RsChatLobbyMsgItem jarg1_, long jarg2);
  public final static native long RsChatLobbyMsgItem_duplicate(long jarg1, RsChatLobbyMsgItem jarg1_);
  public final static native boolean RsChatLobbyMsgItem_serialise(long jarg1, RsChatLobbyMsgItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyMsgItem_serial_size(long jarg1, RsChatLobbyMsgItem jarg1_);
  public final static native void RsChatLobbyMsgItem_subpacket_id_set(long jarg1, RsChatLobbyMsgItem jarg1_, short jarg2);
  public final static native short RsChatLobbyMsgItem_subpacket_id_get(long jarg1, RsChatLobbyMsgItem jarg1_);
  public final static native void RsChatLobbyMsgItem_parent_msg_id_set(long jarg1, RsChatLobbyMsgItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyMsgItem_parent_msg_id_get(long jarg1, RsChatLobbyMsgItem jarg1_);
  public final static native long new_RsChatLobbyEventItem__SWIG_0();
  public final static native long new_RsChatLobbyEventItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyEventItem(long jarg1);
  public final static native long RsChatLobbyEventItem_print__SWIG_0(long jarg1, RsChatLobbyEventItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyEventItem_print__SWIG_1(long jarg1, RsChatLobbyEventItem jarg1_, long jarg2);
  public final static native long RsChatLobbyEventItem_duplicate(long jarg1, RsChatLobbyEventItem jarg1_);
  public final static native boolean RsChatLobbyEventItem_serialise(long jarg1, RsChatLobbyEventItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyEventItem_serial_size(long jarg1, RsChatLobbyEventItem jarg1_);
  public final static native void RsChatLobbyEventItem_event_type_set(long jarg1, RsChatLobbyEventItem jarg1_, short jarg2);
  public final static native short RsChatLobbyEventItem_event_type_get(long jarg1, RsChatLobbyEventItem jarg1_);
  public final static native void RsChatLobbyEventItem_string1_set(long jarg1, RsChatLobbyEventItem jarg1_, long jarg2);
  public final static native long RsChatLobbyEventItem_string1_get(long jarg1, RsChatLobbyEventItem jarg1_);
  public final static native void RsChatLobbyEventItem_sendTime_set(long jarg1, RsChatLobbyEventItem jarg1_, long jarg2);
  public final static native long RsChatLobbyEventItem_sendTime_get(long jarg1, RsChatLobbyEventItem jarg1_);
  public final static native long new_RsChatLobbyListRequestItem__SWIG_0();
  public final static native long new_RsChatLobbyListRequestItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyListRequestItem(long jarg1);
  public final static native boolean RsChatLobbyListRequestItem_serialise(long jarg1, RsChatLobbyListRequestItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyListRequestItem_serial_size(long jarg1, RsChatLobbyListRequestItem jarg1_);
  public final static native long RsChatLobbyListRequestItem_print__SWIG_0(long jarg1, RsChatLobbyListRequestItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyListRequestItem_print__SWIG_1(long jarg1, RsChatLobbyListRequestItem jarg1_, long jarg2);
  public final static native long new_RsChatLobbyListItem_deprecated__SWIG_0();
  public final static native long new_RsChatLobbyListItem_deprecated__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyListItem_deprecated(long jarg1);
  public final static native long RsChatLobbyListItem_deprecated_print__SWIG_0(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyListItem_deprecated_print__SWIG_1(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2);
  public final static native boolean RsChatLobbyListItem_deprecated_serialise(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyListItem_deprecated_serial_size(long jarg1, RsChatLobbyListItem_deprecated jarg1_);
  public final static native void RsChatLobbyListItem_deprecated_lobby_ids_set(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated_lobby_ids_get(long jarg1, RsChatLobbyListItem_deprecated jarg1_);
  public final static native void RsChatLobbyListItem_deprecated_lobby_names_set(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated_lobby_names_get(long jarg1, RsChatLobbyListItem_deprecated jarg1_);
  public final static native void RsChatLobbyListItem_deprecated_lobby_counts_set(long jarg1, RsChatLobbyListItem_deprecated jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated_lobby_counts_get(long jarg1, RsChatLobbyListItem_deprecated jarg1_);
  public final static native long new_RsChatLobbyListItem_deprecated2__SWIG_0();
  public final static native long new_RsChatLobbyListItem_deprecated2__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyListItem_deprecated2(long jarg1);
  public final static native long RsChatLobbyListItem_deprecated2_print__SWIG_0(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyListItem_deprecated2_print__SWIG_1(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2);
  public final static native boolean RsChatLobbyListItem_deprecated2_serialise(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyListItem_deprecated2_serial_size(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_);
  public final static native void RsChatLobbyListItem_deprecated2_lobby_ids_set(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated2_lobby_ids_get(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_);
  public final static native void RsChatLobbyListItem_deprecated2_lobby_names_set(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated2_lobby_names_get(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_);
  public final static native void RsChatLobbyListItem_deprecated2_lobby_topics_set(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated2_lobby_topics_get(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_);
  public final static native void RsChatLobbyListItem_deprecated2_lobby_counts_set(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_deprecated2_lobby_counts_get(long jarg1, RsChatLobbyListItem_deprecated2 jarg1_);
  public final static native long new_RsChatLobbyListItem__SWIG_0();
  public final static native long new_RsChatLobbyListItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyListItem(long jarg1);
  public final static native long RsChatLobbyListItem_print__SWIG_0(long jarg1, RsChatLobbyListItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyListItem_print__SWIG_1(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native boolean RsChatLobbyListItem_serialise(long jarg1, RsChatLobbyListItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyListItem_serial_size(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native void RsChatLobbyListItem_lobby_ids_set(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_lobby_ids_get(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native void RsChatLobbyListItem_lobby_names_set(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_lobby_names_get(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native void RsChatLobbyListItem_lobby_topics_set(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_lobby_topics_get(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native void RsChatLobbyListItem_lobby_counts_set(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_lobby_counts_get(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native void RsChatLobbyListItem_lobby_privacy_levels_set(long jarg1, RsChatLobbyListItem jarg1_, long jarg2);
  public final static native long RsChatLobbyListItem_lobby_privacy_levels_get(long jarg1, RsChatLobbyListItem jarg1_);
  public final static native long new_RsChatLobbyUnsubscribeItem__SWIG_0();
  public final static native long new_RsChatLobbyUnsubscribeItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyUnsubscribeItem(long jarg1);
  public final static native long RsChatLobbyUnsubscribeItem_print__SWIG_0(long jarg1, RsChatLobbyUnsubscribeItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyUnsubscribeItem_print__SWIG_1(long jarg1, RsChatLobbyUnsubscribeItem jarg1_, long jarg2);
  public final static native void RsChatLobbyUnsubscribeItem_lobby_id_set(long jarg1, RsChatLobbyUnsubscribeItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyUnsubscribeItem_lobby_id_get(long jarg1, RsChatLobbyUnsubscribeItem jarg1_);
  public final static native boolean RsChatLobbyUnsubscribeItem_serialise(long jarg1, RsChatLobbyUnsubscribeItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyUnsubscribeItem_serial_size(long jarg1, RsChatLobbyUnsubscribeItem jarg1_);
  public final static native long new_RsChatLobbyConnectChallengeItem__SWIG_0();
  public final static native long new_RsChatLobbyConnectChallengeItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyConnectChallengeItem(long jarg1);
  public final static native long RsChatLobbyConnectChallengeItem_print__SWIG_0(long jarg1, RsChatLobbyConnectChallengeItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyConnectChallengeItem_print__SWIG_1(long jarg1, RsChatLobbyConnectChallengeItem jarg1_, long jarg2);
  public final static native void RsChatLobbyConnectChallengeItem_challenge_code_set(long jarg1, RsChatLobbyConnectChallengeItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyConnectChallengeItem_challenge_code_get(long jarg1, RsChatLobbyConnectChallengeItem jarg1_);
  public final static native boolean RsChatLobbyConnectChallengeItem_serialise(long jarg1, RsChatLobbyConnectChallengeItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyConnectChallengeItem_serial_size(long jarg1, RsChatLobbyConnectChallengeItem jarg1_);
  public final static native long new_RsChatLobbyInviteItem__SWIG_0();
  public final static native long new_RsChatLobbyInviteItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyInviteItem(long jarg1);
  public final static native long RsChatLobbyInviteItem_print__SWIG_0(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyInviteItem_print__SWIG_1(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2);
  public final static native void RsChatLobbyInviteItem_lobby_id_set(long jarg1, RsChatLobbyInviteItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyInviteItem_lobby_id_get(long jarg1, RsChatLobbyInviteItem jarg1_);
  public final static native void RsChatLobbyInviteItem_lobby_name_set(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2);
  public final static native long RsChatLobbyInviteItem_lobby_name_get(long jarg1, RsChatLobbyInviteItem jarg1_);
  public final static native void RsChatLobbyInviteItem_lobby_topic_set(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2);
  public final static native long RsChatLobbyInviteItem_lobby_topic_get(long jarg1, RsChatLobbyInviteItem jarg1_);
  public final static native void RsChatLobbyInviteItem_lobby_privacy_level_set(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2);
  public final static native long RsChatLobbyInviteItem_lobby_privacy_level_get(long jarg1, RsChatLobbyInviteItem jarg1_);
  public final static native boolean RsChatLobbyInviteItem_serialise(long jarg1, RsChatLobbyInviteItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyInviteItem_serial_size(long jarg1, RsChatLobbyInviteItem jarg1_);
  public final static native long new_RsPrivateChatMsgConfigItem__SWIG_0();
  public final static native long new_RsPrivateChatMsgConfigItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsPrivateChatMsgConfigItem(long jarg1);
  public final static native void RsPrivateChatMsgConfigItem_clear(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native long RsPrivateChatMsgConfigItem_print__SWIG_0(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPrivateChatMsgConfigItem_print__SWIG_1(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native boolean RsPrivateChatMsgConfigItem_serialise(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2, long jarg3);
  public final static native long RsPrivateChatMsgConfigItem_serial_size(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2, RsChatMsgItem jarg2_, long jarg3, long jarg4);
  public final static native void RsPrivateChatMsgConfigItem_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2, RsChatMsgItem jarg2_);
  public final static native void RsPrivateChatMsgConfigItem_configPeerId_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_configPeerId_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_chatFlags_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_chatFlags_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_configFlags_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_configFlags_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_sendTime_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_sendTime_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_message_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_message_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native void RsPrivateChatMsgConfigItem_recvTime_set(long jarg1, RsPrivateChatMsgConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatMsgConfigItem_recvTime_get(long jarg1, RsPrivateChatMsgConfigItem jarg1_);
  public final static native long new_RsPrivateChatDistantInviteConfigItem__SWIG_0();
  public final static native long new_RsPrivateChatDistantInviteConfigItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsPrivateChatDistantInviteConfigItem(long jarg1);
  public final static native void RsPrivateChatDistantInviteConfigItem_clear(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native long RsPrivateChatDistantInviteConfigItem_print__SWIG_0(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPrivateChatDistantInviteConfigItem_print__SWIG_1(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native boolean RsPrivateChatDistantInviteConfigItem_serialise(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2, long jarg3);
  public final static native long RsPrivateChatDistantInviteConfigItem_serial_size(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_aes_key_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_aes_key_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_hash_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_hash_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_encrypted_radix64_string_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_encrypted_radix64_string_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_destination_pgp_id_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_destination_pgp_id_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_time_of_validity_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_time_of_validity_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_last_hit_time_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_last_hit_time_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native void RsPrivateChatDistantInviteConfigItem_flags_set(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPrivateChatDistantInviteConfigItem_flags_get(long jarg1, RsPrivateChatDistantInviteConfigItem jarg1_);
  public final static native long new_RsChatLobbyConfigItem__SWIG_0();
  public final static native long new_RsChatLobbyConfigItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatLobbyConfigItem(long jarg1);
  public final static native void RsChatLobbyConfigItem_clear(long jarg1, RsChatLobbyConfigItem jarg1_);
  public final static native long RsChatLobbyConfigItem_print__SWIG_0(long jarg1, RsChatLobbyConfigItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatLobbyConfigItem_print__SWIG_1(long jarg1, RsChatLobbyConfigItem jarg1_, long jarg2);
  public final static native boolean RsChatLobbyConfigItem_serialise(long jarg1, RsChatLobbyConfigItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatLobbyConfigItem_serial_size(long jarg1, RsChatLobbyConfigItem jarg1_);
  public final static native void RsChatLobbyConfigItem_lobby_Id_set(long jarg1, RsChatLobbyConfigItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsChatLobbyConfigItem_lobby_Id_get(long jarg1, RsChatLobbyConfigItem jarg1_);
  public final static native void RsChatLobbyConfigItem_flags_set(long jarg1, RsChatLobbyConfigItem jarg1_, long jarg2);
  public final static native long RsChatLobbyConfigItem_flags_get(long jarg1, RsChatLobbyConfigItem jarg1_);
  public final static native long new_RsChatStatusItem__SWIG_0();
  public final static native long new_RsChatStatusItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatStatusItem(long jarg1);
  public final static native long RsChatStatusItem_print__SWIG_0(long jarg1, RsChatStatusItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatStatusItem_print__SWIG_1(long jarg1, RsChatStatusItem jarg1_, long jarg2);
  public final static native boolean RsChatStatusItem_serialise(long jarg1, RsChatStatusItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatStatusItem_serial_size(long jarg1, RsChatStatusItem jarg1_);
  public final static native void RsChatStatusItem_flags_set(long jarg1, RsChatStatusItem jarg1_, long jarg2);
  public final static native long RsChatStatusItem_flags_get(long jarg1, RsChatStatusItem jarg1_);
  public final static native void RsChatStatusItem_status_string_set(long jarg1, RsChatStatusItem jarg1_, long jarg2);
  public final static native long RsChatStatusItem_status_string_get(long jarg1, RsChatStatusItem jarg1_);
  public final static native long new_RsChatAvatarItem__SWIG_0();
  public final static native long new_RsChatAvatarItem__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_RsChatAvatarItem(long jarg1);
  public final static native long RsChatAvatarItem_print__SWIG_0(long jarg1, RsChatAvatarItem jarg1_, long jarg2, int jarg3);
  public final static native long RsChatAvatarItem_print__SWIG_1(long jarg1, RsChatAvatarItem jarg1_, long jarg2);
  public final static native boolean RsChatAvatarItem_serialise(long jarg1, RsChatAvatarItem jarg1_, long jarg2, long jarg3);
  public final static native long RsChatAvatarItem_serial_size(long jarg1, RsChatAvatarItem jarg1_);
  public final static native void RsChatAvatarItem_image_size_set(long jarg1, RsChatAvatarItem jarg1_, long jarg2);
  public final static native long RsChatAvatarItem_image_size_get(long jarg1, RsChatAvatarItem jarg1_);
  public final static native void RsChatAvatarItem_image_data_set(long jarg1, RsChatAvatarItem jarg1_, long jarg2);
  public final static native long RsChatAvatarItem_image_data_get(long jarg1, RsChatAvatarItem jarg1_);
  public final static native long new_RsChatSerialiser();
  public final static native long RsChatSerialiser_size(long jarg1, RsChatSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsChatSerialiser_serialise(long jarg1, RsChatSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsChatSerialiser_deserialise(long jarg1, RsChatSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsChatSerialiser(long jarg1);
  public final static native long RS_MSG_FLAGS_OUTGOING_get();
  public final static native long RS_MSG_FLAGS_PENDING_get();
  public final static native long RS_MSG_FLAGS_DRAFT_get();
  public final static native long RS_MSG_FLAGS_NEW_get();
  public final static native long RS_MSG_FLAGS_TRASH_get();
  public final static native long RS_MSG_FLAGS_UNREAD_BY_USER_get();
  public final static native long RS_MSG_FLAGS_REPLIED_get();
  public final static native long RS_MSG_FLAGS_FORWARDED_get();
  public final static native long RS_MSG_FLAGS_STAR_get();
  public final static native long RS_MSG_FLAGS_PARTIAL_get();
  public final static native long RS_MSG_FLAGS_USER_REQUEST_get();
  public final static native long RS_MSG_FLAGS_FRIEND_RECOMMENDATION_get();
  public final static native long RS_MSG_FLAGS_SYSTEM_get();
  public final static native long RS_MSG_FLAGS_RETURN_RECEPT_get();
  public final static native long RS_MSG_FLAGS_ENCRYPTED_get();
  public final static native long RS_MSG_FLAGS_DISTANT_get();
  public final static native long RS_MSG_FLAGS_SIGNATURE_CHECKS_get();
  public final static native long RS_MSG_FLAGS_SIGNED_get();
  public final static native long RS_MSG_FLAGS_LOAD_EMBEDDED_IMAGES_get();
  public final static native long RS_MSG_FLAGS_DECRYPTED_get();
  public final static native void delete_RsMessageItem(long jarg1);
  public final static native void RsMessageItem_clear(long jarg1, RsMessageItem jarg1_);
  public final static native long RsMessageItem_print__SWIG_0(long jarg1, RsMessageItem jarg1_, long jarg2, int jarg3);
  public final static native long RsMessageItem_print__SWIG_1(long jarg1, RsMessageItem jarg1_, long jarg2);
  public final static native boolean RsMessageItem_serialise(long jarg1, RsMessageItem jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMessageItem_serial_size(long jarg1, RsMessageItem jarg1_, boolean jarg2);
  public final static native long new_RsMsgItem();
  public final static native void delete_RsMsgItem(long jarg1);
  public final static native void RsMsgItem_clear(long jarg1, RsMsgItem jarg1_);
  public final static native boolean RsMsgItem_serialise(long jarg1, RsMsgItem jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMsgItem_serial_size(long jarg1, RsMsgItem jarg1_, boolean jarg2);
  public final static native long RsMsgItem_print__SWIG_0(long jarg1, RsMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsMsgItem_print__SWIG_1(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native void RsMsgItem_msgFlags_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_msgFlags_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_msgId_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_msgId_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_sendTime_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_sendTime_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_recvTime_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_recvTime_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_subject_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_subject_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_message_set(long jarg1, RsMsgItem jarg1_, long jarg2);
  public final static native long RsMsgItem_message_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_msgto_set(long jarg1, RsMsgItem jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsMsgItem_msgto_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_msgcc_set(long jarg1, RsMsgItem jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsMsgItem_msgcc_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_msgbcc_set(long jarg1, RsMsgItem jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsMsgItem_msgbcc_get(long jarg1, RsMsgItem jarg1_);
  public final static native void RsMsgItem_attachment_set(long jarg1, RsMsgItem jarg1_, long jarg2, RsTlvFileSet jarg2_);
  public final static native long RsMsgItem_attachment_get(long jarg1, RsMsgItem jarg1_);
  public final static native long new_RsMsgTagType();
  public final static native long RsMsgTagType_print__SWIG_0(long jarg1, RsMsgTagType jarg1_, long jarg2, int jarg3);
  public final static native long RsMsgTagType_print__SWIG_1(long jarg1, RsMsgTagType jarg1_, long jarg2);
  public final static native boolean RsMsgTagType_serialise(long jarg1, RsMsgTagType jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMsgTagType_serial_size(long jarg1, RsMsgTagType jarg1_, boolean jarg2);
  public final static native void delete_RsMsgTagType(long jarg1);
  public final static native void RsMsgTagType_clear(long jarg1, RsMsgTagType jarg1_);
  public final static native void RsMsgTagType_text_set(long jarg1, RsMsgTagType jarg1_, long jarg2);
  public final static native long RsMsgTagType_text_get(long jarg1, RsMsgTagType jarg1_);
  public final static native void RsMsgTagType_rgb_color_set(long jarg1, RsMsgTagType jarg1_, long jarg2);
  public final static native long RsMsgTagType_rgb_color_get(long jarg1, RsMsgTagType jarg1_);
  public final static native void RsMsgTagType_tagId_set(long jarg1, RsMsgTagType jarg1_, long jarg2);
  public final static native long RsMsgTagType_tagId_get(long jarg1, RsMsgTagType jarg1_);
  public final static native long new_RsMsgTags();
  public final static native boolean RsMsgTags_serialise(long jarg1, RsMsgTags jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMsgTags_serial_size(long jarg1, RsMsgTags jarg1_, boolean jarg2);
  public final static native long RsMsgTags_print__SWIG_0(long jarg1, RsMsgTags jarg1_, long jarg2, int jarg3);
  public final static native long RsMsgTags_print__SWIG_1(long jarg1, RsMsgTags jarg1_, long jarg2);
  public final static native void delete_RsMsgTags(long jarg1);
  public final static native void RsMsgTags_clear(long jarg1, RsMsgTags jarg1_);
  public final static native void RsMsgTags_msgId_set(long jarg1, RsMsgTags jarg1_, long jarg2);
  public final static native long RsMsgTags_msgId_get(long jarg1, RsMsgTags jarg1_);
  public final static native void RsMsgTags_tagIds_set(long jarg1, RsMsgTags jarg1_, long jarg2);
  public final static native long RsMsgTags_tagIds_get(long jarg1, RsMsgTags jarg1_);
  public final static native long new_RsMsgSrcId();
  public final static native long RsMsgSrcId_print__SWIG_0(long jarg1, RsMsgSrcId jarg1_, long jarg2, int jarg3);
  public final static native long RsMsgSrcId_print__SWIG_1(long jarg1, RsMsgSrcId jarg1_, long jarg2);
  public final static native boolean RsMsgSrcId_serialise(long jarg1, RsMsgSrcId jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMsgSrcId_serial_size(long jarg1, RsMsgSrcId jarg1_, boolean jarg2);
  public final static native void delete_RsMsgSrcId(long jarg1);
  public final static native void RsMsgSrcId_clear(long jarg1, RsMsgSrcId jarg1_);
  public final static native void RsMsgSrcId_msgId_set(long jarg1, RsMsgSrcId jarg1_, long jarg2);
  public final static native long RsMsgSrcId_msgId_get(long jarg1, RsMsgSrcId jarg1_);
  public final static native void RsMsgSrcId_srcId_set(long jarg1, RsMsgSrcId jarg1_, long jarg2);
  public final static native long RsMsgSrcId_srcId_get(long jarg1, RsMsgSrcId jarg1_);
  public final static native long new_RsPublicMsgInviteConfigItem();
  public final static native boolean RsPublicMsgInviteConfigItem_serialise(long jarg1, RsPublicMsgInviteConfigItem jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsPublicMsgInviteConfigItem_serial_size(long jarg1, RsPublicMsgInviteConfigItem jarg1_, boolean jarg2);
  public final static native long RsPublicMsgInviteConfigItem_print__SWIG_0(long jarg1, RsPublicMsgInviteConfigItem jarg1_, long jarg2, int jarg3);
  public final static native long RsPublicMsgInviteConfigItem_print__SWIG_1(long jarg1, RsPublicMsgInviteConfigItem jarg1_, long jarg2);
  public final static native void delete_RsPublicMsgInviteConfigItem(long jarg1);
  public final static native void RsPublicMsgInviteConfigItem_clear(long jarg1, RsPublicMsgInviteConfigItem jarg1_);
  public final static native void RsPublicMsgInviteConfigItem_hash_set(long jarg1, RsPublicMsgInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPublicMsgInviteConfigItem_hash_get(long jarg1, RsPublicMsgInviteConfigItem jarg1_);
  public final static native void RsPublicMsgInviteConfigItem_time_stamp_set(long jarg1, RsPublicMsgInviteConfigItem jarg1_, long jarg2);
  public final static native long RsPublicMsgInviteConfigItem_time_stamp_get(long jarg1, RsPublicMsgInviteConfigItem jarg1_);
  public final static native long new_RsMsgParentId();
  public final static native long RsMsgParentId_print__SWIG_0(long jarg1, RsMsgParentId jarg1_, long jarg2, int jarg3);
  public final static native long RsMsgParentId_print__SWIG_1(long jarg1, RsMsgParentId jarg1_, long jarg2);
  public final static native boolean RsMsgParentId_serialise(long jarg1, RsMsgParentId jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native long RsMsgParentId_serial_size(long jarg1, RsMsgParentId jarg1_, boolean jarg2);
  public final static native void delete_RsMsgParentId(long jarg1);
  public final static native void RsMsgParentId_clear(long jarg1, RsMsgParentId jarg1_);
  public final static native void RsMsgParentId_msgId_set(long jarg1, RsMsgParentId jarg1_, long jarg2);
  public final static native long RsMsgParentId_msgId_get(long jarg1, RsMsgParentId jarg1_);
  public final static native void RsMsgParentId_msgParentId_set(long jarg1, RsMsgParentId jarg1_, long jarg2);
  public final static native long RsMsgParentId_msgParentId_get(long jarg1, RsMsgParentId jarg1_);
  public final static native long new_RsMsgSerialiser__SWIG_0(boolean jarg1);
  public final static native long new_RsMsgSerialiser__SWIG_1();
  public final static native long new_RsMsgSerialiser__SWIG_2(int jarg1);
  public final static native void delete_RsMsgSerialiser(long jarg1);
  public final static native long RsMsgSerialiser_size(long jarg1, RsMsgSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsMsgSerialiser_serialise(long jarg1, RsMsgSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsMsgSerialiser_deserialise(long jarg1, RsMsgSerialiser jarg1_, long jarg2, long jarg3);
  public final static native int AndOp_get();
  public final static native int OrOp_get();
  public final static native int XorOp_get();
  public final static native int ContainsAnyStrings_get();
  public final static native int ContainsAllStrings_get();
  public final static native int EqualsString_get();
  public final static native int Equals_get();
  public final static native int GreaterEquals_get();
  public final static native int Greater_get();
  public final static native int SmallerEquals_get();
  public final static native int Smaller_get();
  public final static native int InRange_get();
  public final static native void LinearizedExpression__tokens_set(long jarg1, LinearizedExpression jarg1_, long jarg2);
  public final static native long LinearizedExpression__tokens_get(long jarg1, LinearizedExpression jarg1_);
  public final static native void LinearizedExpression__ints_set(long jarg1, LinearizedExpression jarg1_, long jarg2);
  public final static native long LinearizedExpression__ints_get(long jarg1, LinearizedExpression jarg1_);
  public final static native void LinearizedExpression__strings_set(long jarg1, LinearizedExpression jarg1_, long jarg2);
  public final static native long LinearizedExpression__strings_get(long jarg1, LinearizedExpression jarg1_);
  public final static native int LinearizedExpression_EXPR_DATE_get();
  public final static native int LinearizedExpression_EXPR_POP_get();
  public final static native int LinearizedExpression_EXPR_SIZE_get();
  public final static native int LinearizedExpression_EXPR_HASH_get();
  public final static native int LinearizedExpression_EXPR_NAME_get();
  public final static native int LinearizedExpression_EXPR_PATH_get();
  public final static native int LinearizedExpression_EXPR_EXT_get();
  public final static native int LinearizedExpression_EXPR_COMP_get();
  public final static native int LinearizedExpression_EXPR_SIZE_MB_get();
  public final static native long LinearizedExpression_toExpr(long jarg1, LinearizedExpression jarg1_);
  public final static native long new_LinearizedExpression();
  public final static native void delete_LinearizedExpression(long jarg1);
  public final static native boolean Expression_eval(long jarg1, Expression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void delete_Expression(long jarg1);
  public final static native void Expression_linearize(long jarg1, Expression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native long new_CompoundExpression(int jarg1, long jarg2, Expression jarg2_, long jarg3, Expression jarg3_);
  public final static native boolean CompoundExpression_eval(long jarg1, CompoundExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void delete_CompoundExpression(long jarg1);
  public final static native void CompoundExpression_linearize(long jarg1, CompoundExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void StringExpression_linearize(long jarg1, StringExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_StringExpression(long jarg1);
  public final static native long new_CompareCharIC();
  public final static native void delete_CompareCharIC(long jarg1);
  public final static native long new_NameExpression(int jarg1, long jarg2, boolean jarg3);
  public final static native boolean NameExpression_eval(long jarg1, NameExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void NameExpression_linearize(long jarg1, NameExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_NameExpression(long jarg1);
  public final static native long new_PathExpression(int jarg1, long jarg2, boolean jarg3);
  public final static native boolean PathExpression_eval(long jarg1, PathExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void PathExpression_linearize(long jarg1, PathExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_PathExpression(long jarg1);
  public final static native long new_ExtExpression(int jarg1, long jarg2, boolean jarg3);
  public final static native boolean ExtExpression_eval(long jarg1, ExtExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void ExtExpression_linearize(long jarg1, ExtExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_ExtExpression(long jarg1);
  public final static native long new_HashExpression(int jarg1, long jarg2);
  public final static native boolean HashExpression_eval(long jarg1, HashExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void HashExpression_linearize(long jarg1, HashExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_HashExpression(long jarg1);
  public final static native long new_DateExpression__SWIG_0(int jarg1, int jarg2);
  public final static native long new_DateExpression__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native boolean DateExpression_eval(long jarg1, DateExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void DateExpression_linearize(long jarg1, DateExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_DateExpression(long jarg1);
  public final static native long new_SizeExpression__SWIG_0(int jarg1, int jarg2);
  public final static native long new_SizeExpression__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native boolean SizeExpression_eval(long jarg1, SizeExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void SizeExpression_linearize(long jarg1, SizeExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_SizeExpression(long jarg1);
  public final static native long new_SizeExpressionMB__SWIG_0(int jarg1, int jarg2);
  public final static native long new_SizeExpressionMB__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native boolean SizeExpressionMB_eval(long jarg1, SizeExpressionMB jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void SizeExpressionMB_linearize(long jarg1, SizeExpressionMB jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_SizeExpressionMB(long jarg1);
  public final static native long new_PopExpression__SWIG_0(int jarg1, int jarg2);
  public final static native long new_PopExpression__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native long new_PopExpression__SWIG_2(long jarg1, LinearizedExpression jarg1_);
  public final static native boolean PopExpression_eval(long jarg1, PopExpression jarg1_, long jarg2, FileEntry jarg2_);
  public final static native void PopExpression_linearize(long jarg1, PopExpression jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native void delete_PopExpression(long jarg1);
  public final static native short RS_TURTLE_SUBTYPE_STRING_SEARCH_REQUEST_get();
  public final static native short RS_TURTLE_SUBTYPE_SEARCH_RESULT_get();
  public final static native short RS_TURTLE_SUBTYPE_OPEN_TUNNEL_get();
  public final static native short RS_TURTLE_SUBTYPE_TUNNEL_OK_get();
  public final static native short RS_TURTLE_SUBTYPE_CLOSE_TUNNEL_get();
  public final static native short RS_TURTLE_SUBTYPE_TUNNEL_CLOSED_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_REQUEST_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_DATA_get();
  public final static native short RS_TURTLE_SUBTYPE_REGEXP_SEARCH_REQUEST_get();
  public final static native short RS_TURTLE_SUBTYPE_GENERIC_DATA_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_MAP_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_MAP_REQUEST_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_CRC_get();
  public final static native short RS_TURTLE_SUBTYPE_FILE_CRC_REQUEST_get();
  public final static native short RS_TURTLE_SUBTYPE_CHUNK_CRC_get();
  public final static native short RS_TURTLE_SUBTYPE_CHUNK_CRC_REQUEST_get();
  public final static native boolean RsTurtleItem_serialize(long jarg1, RsTurtleItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleItem_serial_size(long jarg1, RsTurtleItem jarg1_);
  public final static native void RsTurtleItem_clear(long jarg1, RsTurtleItem jarg1_);
  public final static native void delete_RsTurtleItem(long jarg1);
  public final static native void RsTurtleSearchResultItem_request_id_set(long jarg1, RsTurtleSearchResultItem jarg1_, long jarg2);
  public final static native long RsTurtleSearchResultItem_request_id_get(long jarg1, RsTurtleSearchResultItem jarg1_);
  public final static native void RsTurtleSearchResultItem_depth_set(long jarg1, RsTurtleSearchResultItem jarg1_, int jarg2);
  public final static native int RsTurtleSearchResultItem_depth_get(long jarg1, RsTurtleSearchResultItem jarg1_);
  public final static native void RsTurtleSearchResultItem_result_set(long jarg1, RsTurtleSearchResultItem jarg1_, long jarg2);
  public final static native long RsTurtleSearchResultItem_result_get(long jarg1, RsTurtleSearchResultItem jarg1_);
  public final static native long RsTurtleSearchResultItem_print(long jarg1, RsTurtleSearchResultItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleSearchResultItem(long jarg1);
  public final static native long RsTurtleSearchRequestItem_clone(long jarg1, RsTurtleSearchRequestItem jarg1_);
  public final static native void RsTurtleSearchRequestItem_performLocalSearch(long jarg1, RsTurtleSearchRequestItem jarg1_, long jarg2);
  public final static native void RsTurtleSearchRequestItem_request_id_set(long jarg1, RsTurtleSearchRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleSearchRequestItem_request_id_get(long jarg1, RsTurtleSearchRequestItem jarg1_);
  public final static native void RsTurtleSearchRequestItem_depth_set(long jarg1, RsTurtleSearchRequestItem jarg1_, int jarg2);
  public final static native int RsTurtleSearchRequestItem_depth_get(long jarg1, RsTurtleSearchRequestItem jarg1_);
  public final static native void delete_RsTurtleSearchRequestItem(long jarg1);
  public final static native void RsTurtleStringSearchRequestItem_match_string_set(long jarg1, RsTurtleStringSearchRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleStringSearchRequestItem_match_string_get(long jarg1, RsTurtleStringSearchRequestItem jarg1_);
  public final static native long RsTurtleStringSearchRequestItem_clone(long jarg1, RsTurtleStringSearchRequestItem jarg1_);
  public final static native void RsTurtleStringSearchRequestItem_performLocalSearch(long jarg1, RsTurtleStringSearchRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleStringSearchRequestItem_print(long jarg1, RsTurtleStringSearchRequestItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleStringSearchRequestItem(long jarg1);
  public final static native void RsTurtleRegExpSearchRequestItem_expr_set(long jarg1, RsTurtleRegExpSearchRequestItem jarg1_, long jarg2, LinearizedExpression jarg2_);
  public final static native long RsTurtleRegExpSearchRequestItem_expr_get(long jarg1, RsTurtleRegExpSearchRequestItem jarg1_);
  public final static native long RsTurtleRegExpSearchRequestItem_clone(long jarg1, RsTurtleRegExpSearchRequestItem jarg1_);
  public final static native void RsTurtleRegExpSearchRequestItem_performLocalSearch(long jarg1, RsTurtleRegExpSearchRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleRegExpSearchRequestItem_print(long jarg1, RsTurtleRegExpSearchRequestItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleRegExpSearchRequestItem(long jarg1);
  public final static native void RsTurtleOpenTunnelItem_file_hash_set(long jarg1, RsTurtleOpenTunnelItem jarg1_, long jarg2);
  public final static native long RsTurtleOpenTunnelItem_file_hash_get(long jarg1, RsTurtleOpenTunnelItem jarg1_);
  public final static native void RsTurtleOpenTunnelItem_request_id_set(long jarg1, RsTurtleOpenTunnelItem jarg1_, long jarg2);
  public final static native long RsTurtleOpenTunnelItem_request_id_get(long jarg1, RsTurtleOpenTunnelItem jarg1_);
  public final static native void RsTurtleOpenTunnelItem_partial_tunnel_id_set(long jarg1, RsTurtleOpenTunnelItem jarg1_, long jarg2);
  public final static native long RsTurtleOpenTunnelItem_partial_tunnel_id_get(long jarg1, RsTurtleOpenTunnelItem jarg1_);
  public final static native void RsTurtleOpenTunnelItem_depth_set(long jarg1, RsTurtleOpenTunnelItem jarg1_, int jarg2);
  public final static native int RsTurtleOpenTunnelItem_depth_get(long jarg1, RsTurtleOpenTunnelItem jarg1_);
  public final static native long RsTurtleOpenTunnelItem_print(long jarg1, RsTurtleOpenTunnelItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleOpenTunnelItem(long jarg1);
  public final static native void RsTurtleTunnelOkItem_tunnel_id_set(long jarg1, RsTurtleTunnelOkItem jarg1_, long jarg2);
  public final static native long RsTurtleTunnelOkItem_tunnel_id_get(long jarg1, RsTurtleTunnelOkItem jarg1_);
  public final static native void RsTurtleTunnelOkItem_request_id_set(long jarg1, RsTurtleTunnelOkItem jarg1_, long jarg2);
  public final static native long RsTurtleTunnelOkItem_request_id_get(long jarg1, RsTurtleTunnelOkItem jarg1_);
  public final static native long RsTurtleTunnelOkItem_print(long jarg1, RsTurtleTunnelOkItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleTunnelOkItem(long jarg1);
  public final static native long RsTurtleGenericTunnelItem_DIRECTION_CLIENT_get();
  public final static native long RsTurtleGenericTunnelItem_DIRECTION_SERVER_get();
  public final static native boolean RsTurtleGenericTunnelItem_shouldStampTunnel(long jarg1, RsTurtleGenericTunnelItem jarg1_);
  public final static native long RsTurtleGenericTunnelItem_tunnelId(long jarg1, RsTurtleGenericTunnelItem jarg1_);
  public final static native long RsTurtleGenericTunnelItem_travelingDirection(long jarg1, RsTurtleGenericTunnelItem jarg1_);
  public final static native void RsTurtleGenericTunnelItem_setTravelingDirection(long jarg1, RsTurtleGenericTunnelItem jarg1_, long jarg2);
  public final static native void RsTurtleGenericTunnelItem_direction_set(long jarg1, RsTurtleGenericTunnelItem jarg1_, long jarg2);
  public final static native long RsTurtleGenericTunnelItem_direction_get(long jarg1, RsTurtleGenericTunnelItem jarg1_);
  public final static native void RsTurtleGenericTunnelItem_tunnel_id_set(long jarg1, RsTurtleGenericTunnelItem jarg1_, long jarg2);
  public final static native long RsTurtleGenericTunnelItem_tunnel_id_get(long jarg1, RsTurtleGenericTunnelItem jarg1_);
  public final static native void delete_RsTurtleGenericTunnelItem(long jarg1);
  public final static native void delete_RsTurtleGenericDataItem(long jarg1);
  public final static native boolean RsTurtleGenericDataItem_shouldStampTunnel(long jarg1, RsTurtleGenericDataItem jarg1_);
  public final static native void RsTurtleGenericDataItem_data_size_set(long jarg1, RsTurtleGenericDataItem jarg1_, long jarg2);
  public final static native long RsTurtleGenericDataItem_data_size_get(long jarg1, RsTurtleGenericDataItem jarg1_);
  public final static native void RsTurtleGenericDataItem_data_bytes_set(long jarg1, RsTurtleGenericDataItem jarg1_, long jarg2);
  public final static native long RsTurtleGenericDataItem_data_bytes_get(long jarg1, RsTurtleGenericDataItem jarg1_);
  public final static native long RsTurtleGenericDataItem_print(long jarg1, RsTurtleGenericDataItem jarg1_, long jarg2, int jarg3);
  public final static native long new_RsTurtleSerialiser();
  public final static native long RsTurtleSerialiser_size(long jarg1, RsTurtleSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsTurtleSerialiser_serialise(long jarg1, RsTurtleSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsTurtleSerialiser_deserialise(long jarg1, RsTurtleSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void RsTurtleSerialiser_registerClientService(long jarg1, RsTurtleSerialiser jarg1_, long jarg2, RsTurtleClientService jarg2_);
  public final static native void delete_RsTurtleSerialiser(long jarg1);
  public final static native boolean RsTurtleClientService_handleTunnelRequest(long jarg1, RsTurtleClientService jarg1_, long jarg2, long jarg3);
  public final static native void RsTurtleClientService_receiveTurtleData(long jarg1, RsTurtleClientService jarg1_, long jarg2, RsTurtleGenericTunnelItem jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long RsTurtleClientService_deserialiseItem(long jarg1, RsTurtleClientService jarg1_, long jarg2, long jarg3);
  public final static native void RsTurtleClientService_addVirtualPeer(long jarg1, RsTurtleClientService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RsTurtleClientService_removeVirtualPeer(long jarg1, RsTurtleClientService jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsTurtleClientService(long jarg1);
  public final static native int RS_MSG_BOXMASK_get();
  public final static native int RS_MSG_OUTGOING_get();
  public final static native int RS_MSG_PENDING_get();
  public final static native int RS_MSG_DRAFT_get();
  public final static native int RS_MSG_INBOX_get();
  public final static native int RS_MSG_SENTBOX_get();
  public final static native int RS_MSG_OUTBOX_get();
  public final static native int RS_MSG_DRAFTBOX_get();
  public final static native int RS_MSG_NEW_get();
  public final static native int RS_MSG_TRASH_get();
  public final static native int RS_MSG_UNREAD_BY_USER_get();
  public final static native int RS_MSG_REPLIED_get();
  public final static native int RS_MSG_FORWARDED_get();
  public final static native int RS_MSG_STAR_get();
  public final static native int RS_MSG_USER_REQUEST_get();
  public final static native int RS_MSG_FRIEND_RECOMMENDATION_get();
  public final static native int RS_MSG_SYSTEM_get();
  public final static native int RS_MSG_ENCRYPTED_get();
  public final static native int RS_MSG_SIGNATURE_CHECKS_get();
  public final static native int RS_MSG_SIGNED_get();
  public final static native int RS_MSG_LOAD_EMBEDDED_IMAGES_get();
  public final static native int RS_MSG_DECRYPTED_get();
  public final static native int RS_CHAT_LOBBY_EVENT_PEER_LEFT_get();
  public final static native int RS_CHAT_LOBBY_EVENT_PEER_STATUS_get();
  public final static native int RS_CHAT_LOBBY_EVENT_PEER_JOINED_get();
  public final static native int RS_CHAT_LOBBY_EVENT_PEER_CHANGE_NICKNAME_get();
  public final static native int RS_CHAT_LOBBY_EVENT_KEEP_ALIVE_get();
  public final static native int RS_MSGTAGTYPE_IMPORTANT_get();
  public final static native int RS_MSGTAGTYPE_WORK_get();
  public final static native int RS_MSGTAGTYPE_PERSONAL_get();
  public final static native int RS_MSGTAGTYPE_TODO_get();
  public final static native int RS_MSGTAGTYPE_LATER_get();
  public final static native int RS_MSGTAGTYPE_USER_get();
  public final static native int RS_CHAT_LOBBY_PRIVACY_LEVEL_CHALLENGE_get();
  public final static native int RS_CHAT_LOBBY_PRIVACY_LEVEL_PUBLIC_get();
  public final static native int RS_CHAT_LOBBY_PRIVACY_LEVEL_PRIVATE_get();
  public final static native long new_MessageInfo();
  public final static native void MessageInfo_msgId_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msgId_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_srcId_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_srcId_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_msgflags_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msgflags_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_msgto_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msgto_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_msgcc_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msgcc_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_msgbcc_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msgbcc_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_title_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_title_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_msg_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_msg_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_attach_title_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_attach_title_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_attach_comment_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_attach_comment_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_files_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_files_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_encryption_keys_set(long jarg1, MessageInfo jarg1_, long jarg2);
  public final static native long MessageInfo_encryption_keys_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_size_set(long jarg1, MessageInfo jarg1_, int jarg2);
  public final static native int MessageInfo_size_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_count_set(long jarg1, MessageInfo jarg1_, int jarg2);
  public final static native int MessageInfo_count_get(long jarg1, MessageInfo jarg1_);
  public final static native void MessageInfo_ts_set(long jarg1, MessageInfo jarg1_, int jarg2);
  public final static native int MessageInfo_ts_get(long jarg1, MessageInfo jarg1_);
  public final static native void delete_MessageInfo(long jarg1);
  public final static native long new_MsgInfoSummary();
  public final static native void MsgInfoSummary_msgId_set(long jarg1, MsgInfoSummary jarg1_, long jarg2);
  public final static native long MsgInfoSummary_msgId_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void MsgInfoSummary_srcId_set(long jarg1, MsgInfoSummary jarg1_, long jarg2);
  public final static native long MsgInfoSummary_srcId_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void MsgInfoSummary_msgflags_set(long jarg1, MsgInfoSummary jarg1_, long jarg2);
  public final static native long MsgInfoSummary_msgflags_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void MsgInfoSummary_title_set(long jarg1, MsgInfoSummary jarg1_, long jarg2);
  public final static native long MsgInfoSummary_title_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void MsgInfoSummary_count_set(long jarg1, MsgInfoSummary jarg1_, int jarg2);
  public final static native int MsgInfoSummary_count_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void MsgInfoSummary_ts_set(long jarg1, MsgInfoSummary jarg1_, long jarg2);
  public final static native long MsgInfoSummary_ts_get(long jarg1, MsgInfoSummary jarg1_);
  public final static native void delete_MsgInfoSummary(long jarg1);
  public final static native long new_MsgTagInfo();
  public final static native void MsgTagInfo_msgId_set(long jarg1, MsgTagInfo jarg1_, long jarg2);
  public final static native long MsgTagInfo_msgId_get(long jarg1, MsgTagInfo jarg1_);
  public final static native void MsgTagInfo_tagIds_set(long jarg1, MsgTagInfo jarg1_, long jarg2);
  public final static native long MsgTagInfo_tagIds_get(long jarg1, MsgTagInfo jarg1_);
  public final static native void delete_MsgTagInfo(long jarg1);
  public final static native long new_MsgTagType();
  public final static native void MsgTagType_types_set(long jarg1, MsgTagType jarg1_, long jarg2);
  public final static native long MsgTagType_types_get(long jarg1, MsgTagType jarg1_);
  public final static native void delete_MsgTagType(long jarg1);
  public final static native int RS_CHAT_PUBLIC_get();
  public final static native int RS_CHAT_PRIVATE_get();
  public final static native int RS_CHAT_AVATAR_AVAILABLE_get();
  public final static native int RS_DISTANT_CHAT_STATUS_UNKNOWN_get();
  public final static native int RS_DISTANT_CHAT_STATUS_TUNNEL_DN_get();
  public final static native int RS_DISTANT_CHAT_STATUS_TUNNEL_OK_get();
  public final static native int RS_DISTANT_CHAT_STATUS_CAN_TALK_get();
  public final static native int RS_DISTANT_CHAT_STATUS_REMOTELY_CLOSED_get();
  public final static native int RS_DISTANT_CHAT_ERROR_NO_ERROR_get();
  public final static native int RS_DISTANT_CHAT_ERROR_DECRYPTION_FAILED_get();
  public final static native int RS_DISTANT_CHAT_ERROR_SIGNATURE_MISMATCH_get();
  public final static native int RS_DISTANT_CHAT_ERROR_UNKNOWN_KEY_get();
  public final static native int RS_DISTANT_CHAT_ERROR_UNKNOWN_HASH_get();
  public final static native int RS_DISTANT_CHAT_FLAG_SIGNED_get();
  public final static native int RS_DISTANT_CHAT_FLAG_SIGNATURE_OK_get();
  public final static native void ChatInfo_rsid_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_rsid_get(long jarg1, ChatInfo jarg1_);
  public final static native void ChatInfo_peer_nickname_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_peer_nickname_get(long jarg1, ChatInfo jarg1_);
  public final static native void ChatInfo_chatflags_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_chatflags_get(long jarg1, ChatInfo jarg1_);
  public final static native void ChatInfo_sendTime_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_sendTime_get(long jarg1, ChatInfo jarg1_);
  public final static native void ChatInfo_recvTime_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_recvTime_get(long jarg1, ChatInfo jarg1_);
  public final static native void ChatInfo_msg_set(long jarg1, ChatInfo jarg1_, long jarg2);
  public final static native long ChatInfo_msg_get(long jarg1, ChatInfo jarg1_);
  public final static native long new_ChatInfo();
  public final static native void delete_ChatInfo(long jarg1);
  public final static native void ChatLobbyInvite_lobby_id_set(long jarg1, ChatLobbyInvite jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ChatLobbyInvite_lobby_id_get(long jarg1, ChatLobbyInvite jarg1_);
  public final static native void ChatLobbyInvite_peer_id_set(long jarg1, ChatLobbyInvite jarg1_, long jarg2);
  public final static native long ChatLobbyInvite_peer_id_get(long jarg1, ChatLobbyInvite jarg1_);
  public final static native void ChatLobbyInvite_lobby_name_set(long jarg1, ChatLobbyInvite jarg1_, long jarg2);
  public final static native long ChatLobbyInvite_lobby_name_get(long jarg1, ChatLobbyInvite jarg1_);
  public final static native void ChatLobbyInvite_lobby_topic_set(long jarg1, ChatLobbyInvite jarg1_, long jarg2);
  public final static native long ChatLobbyInvite_lobby_topic_get(long jarg1, ChatLobbyInvite jarg1_);
  public final static native void ChatLobbyInvite_lobby_privacy_level_set(long jarg1, ChatLobbyInvite jarg1_, long jarg2);
  public final static native long ChatLobbyInvite_lobby_privacy_level_get(long jarg1, ChatLobbyInvite jarg1_);
  public final static native long new_ChatLobbyInvite();
  public final static native void delete_ChatLobbyInvite(long jarg1);
  public final static native long new_VisibleChatLobbyRecord();
  public final static native void VisibleChatLobbyRecord_lobby_id_set(long jarg1, VisibleChatLobbyRecord jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger VisibleChatLobbyRecord_lobby_id_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_lobby_name_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_lobby_name_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_lobby_topic_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_lobby_topic_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_participating_friends_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_participating_friends_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_total_number_of_peers_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_total_number_of_peers_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_last_report_time_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_last_report_time_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void VisibleChatLobbyRecord_lobby_privacy_level_set(long jarg1, VisibleChatLobbyRecord jarg1_, long jarg2);
  public final static native long VisibleChatLobbyRecord_lobby_privacy_level_get(long jarg1, VisibleChatLobbyRecord jarg1_);
  public final static native void delete_VisibleChatLobbyRecord(long jarg1);
  public final static native void ChatLobbyInfo_lobby_id_set(long jarg1, ChatLobbyInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ChatLobbyInfo_lobby_id_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_lobby_name_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_lobby_name_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_lobby_topic_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_lobby_topic_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_participating_friends_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_participating_friends_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_nick_name_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_nick_name_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_lobby_privacy_level_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_lobby_privacy_level_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_nick_names_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_nick_names_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native void ChatLobbyInfo_last_activity_set(long jarg1, ChatLobbyInfo jarg1_, long jarg2);
  public final static native long ChatLobbyInfo_last_activity_get(long jarg1, ChatLobbyInfo jarg1_);
  public final static native long new_ChatLobbyInfo();
  public final static native void delete_ChatLobbyInfo(long jarg1);
  public final static native void DistantChatInviteInfo_hash_set(long jarg1, DistantChatInviteInfo jarg1_, long jarg2);
  public final static native long DistantChatInviteInfo_hash_get(long jarg1, DistantChatInviteInfo jarg1_);
  public final static native void DistantChatInviteInfo_encrypted_radix64_string_set(long jarg1, DistantChatInviteInfo jarg1_, long jarg2);
  public final static native long DistantChatInviteInfo_encrypted_radix64_string_get(long jarg1, DistantChatInviteInfo jarg1_);
  public final static native void DistantChatInviteInfo_destination_pgp_id_set(long jarg1, DistantChatInviteInfo jarg1_, long jarg2);
  public final static native long DistantChatInviteInfo_destination_pgp_id_get(long jarg1, DistantChatInviteInfo jarg1_);
  public final static native void DistantChatInviteInfo_time_of_validity_set(long jarg1, DistantChatInviteInfo jarg1_, long jarg2);
  public final static native long DistantChatInviteInfo_time_of_validity_get(long jarg1, DistantChatInviteInfo jarg1_);
  public final static native void DistantChatInviteInfo_invite_flags_set(long jarg1, DistantChatInviteInfo jarg1_, long jarg2);
  public final static native long DistantChatInviteInfo_invite_flags_get(long jarg1, DistantChatInviteInfo jarg1_);
  public final static native long new_DistantChatInviteInfo();
  public final static native void delete_DistantChatInviteInfo(long jarg1);
  public final static native void rsMsgs_set(long jarg1, RsMsgs jarg1_);
  public final static native long rsMsgs_get();
  public final static native void DistantOfflineMessengingInvite_issuer_pgp_id_set(long jarg1, DistantOfflineMessengingInvite jarg1_, long jarg2);
  public final static native long DistantOfflineMessengingInvite_issuer_pgp_id_get(long jarg1, DistantOfflineMessengingInvite jarg1_);
  public final static native void DistantOfflineMessengingInvite_hash_set(long jarg1, DistantOfflineMessengingInvite jarg1_, long jarg2);
  public final static native long DistantOfflineMessengingInvite_hash_get(long jarg1, DistantOfflineMessengingInvite jarg1_);
  public final static native void DistantOfflineMessengingInvite_time_of_validity_set(long jarg1, DistantOfflineMessengingInvite jarg1_, long jarg2);
  public final static native long DistantOfflineMessengingInvite_time_of_validity_get(long jarg1, DistantOfflineMessengingInvite jarg1_);
  public final static native long new_DistantOfflineMessengingInvite();
  public final static native void delete_DistantOfflineMessengingInvite(long jarg1);
  public final static native void delete_RsMsgs(long jarg1);
  public final static native boolean RsMsgs_getMessageSummaries(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_getMessage(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, MessageInfo jarg3_);
  public final static native void RsMsgs_getMessageCount(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean RsMsgs_decryptMessage(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_MessageSend(long jarg1, RsMsgs jarg1_, long jarg2, MessageInfo jarg2_);
  public final static native boolean RsMsgs_SystemMessage(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsMsgs_MessageToDraft(long jarg1, RsMsgs jarg1_, long jarg2, MessageInfo jarg2_, long jarg3);
  public final static native boolean RsMsgs_MessageToTrash(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_getMsgParentId(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_MessageDelete(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_MessageRead(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_MessageReplied(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_MessageForwarded(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_MessageStar(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_MessageLoadEmbeddedImages(long jarg1, RsMsgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsMsgs_getMessageTagTypes(long jarg1, RsMsgs jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native boolean RsMsgs_setMessageTagType(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsMsgs_removeMessageTagType(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_getMessageTag(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, MsgTagInfo jarg3_);
  public final static native boolean RsMsgs_setMessageTag(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsMsgs_resetMessageStandardTagTypes(long jarg1, RsMsgs jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native boolean RsMsgs_createDistantOfflineMessengingInvite(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_getDistantOfflineMessengingInvites(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_enableDistantMessaging(long jarg1, RsMsgs jarg1_, boolean jarg2);
  public final static native boolean RsMsgs_distantMessagingEnabled(long jarg1, RsMsgs jarg1_);
  public final static native boolean RsMsgs_getDistantMessageHash(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_sendPublicChat(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_sendPrivateChat(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native int RsMsgs_getPublicChatQueueCount(long jarg1, RsMsgs jarg1_);
  public final static native boolean RsMsgs_getPublicChatQueue(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native int RsMsgs_getPrivateChatQueueCount(long jarg1, RsMsgs jarg1_, boolean jarg2);
  public final static native boolean RsMsgs_getPrivateChatQueueIds(long jarg1, RsMsgs jarg1_, boolean jarg2, long jarg3);
  public final static native boolean RsMsgs_getPrivateChatQueue(long jarg1, RsMsgs jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean RsMsgs_clearPrivateChatQueue(long jarg1, RsMsgs jarg1_, boolean jarg2, long jarg3);
  public final static native void RsMsgs_sendStatusString(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native void RsMsgs_sendGroupChatStatusString(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_setCustomStateString(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native long RsMsgs_getCustomStateString__SWIG_0(long jarg1, RsMsgs jarg1_);
  public final static native long RsMsgs_getCustomStateString__SWIG_1(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_getAvatarData(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RsMsgs_setOwnAvatarData(long jarg1, RsMsgs jarg1_, long jarg2, int jarg3);
  public final static native void RsMsgs_getOwnAvatarData(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_joinVisibleChatLobby(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2);
  public final static native boolean RsMsgs_isLobbyId(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_getVirtualPeerId(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native void RsMsgs_getChatLobbyList(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_getListOfNearbyChatLobbies(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_invitePeerToLobby(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean RsMsgs_acceptLobbyInvite(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2);
  public final static native void RsMsgs_denyLobbyInvite(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2);
  public final static native void RsMsgs_getPendingChatLobbyInvites(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_unsubscribeChatLobby(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2);
  public final static native boolean RsMsgs_setNickNameForChatLobby(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean RsMsgs_getNickNameForChatLobby(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean RsMsgs_setDefaultNickNameForChatLobby(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_getDefaultNickNameForChatLobby(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native void RsMsgs_setLobbyAutoSubscribe(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native boolean RsMsgs_getLobbyAutoSubscribe(long jarg1, RsMsgs jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsMsgs_createChatLobby(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsMsgs_createDistantChatInvite(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsMsgs_getDistantChatInviteList(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_initiateDistantChatConnexion__SWIG_0(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsMsgs_initiateDistantChatConnexion__SWIG_1(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsMsgs_getDistantChatStatus(long jarg1, RsMsgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsMsgs_closeDistantChatConnexion(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native boolean RsMsgs_removeDistantChatInvite(long jarg1, RsMsgs jarg1_, long jarg2);
  public final static native long new_p3ChatService(long jarg1, p3LinkMgr jarg1_, long jarg2, p3HistoryMgr jarg2_);
  public final static native int p3ChatService_tick(long jarg1, p3ChatService jarg1_);
  public final static native int p3ChatService_status(long jarg1, p3ChatService jarg1_);
  public final static native void p3ChatService_statusChange(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native int p3ChatService_sendPublicChat(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_sendPrivateChat(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3);
  public final static native void p3ChatService_sendStatusString(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3);
  public final static native void p3ChatService_sendGroupChatStatusString(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native long p3ChatService_getCustomStateString(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native void p3ChatService_setOwnCustomStateString(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native long p3ChatService_getOwnCustomStateString(long jarg1, p3ChatService jarg1_);
  public final static native void p3ChatService_getAvatarJpegData(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3ChatService_setOwnAvatarJpegData(long jarg1, p3ChatService jarg1_, long jarg2, int jarg3);
  public final static native void p3ChatService_getOwnAvatarJpegData(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3);
  public final static native int p3ChatService_getPublicChatQueueCount(long jarg1, p3ChatService jarg1_);
  public final static native boolean p3ChatService_getPublicChatQueue(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native int p3ChatService_getPrivateChatQueueCount(long jarg1, p3ChatService jarg1_, boolean jarg2);
  public final static native boolean p3ChatService_getPrivateChatQueueIds(long jarg1, p3ChatService jarg1_, boolean jarg2, long jarg3);
  public final static native boolean p3ChatService_getPrivateChatQueue(long jarg1, p3ChatService jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean p3ChatService_checkForMessageSecurity(long jarg1, RsChatMsgItem jarg1_);
  public final static native boolean p3ChatService_clearPrivateChatQueue(long jarg1, p3ChatService jarg1_, boolean jarg2, long jarg3);
  public final static native boolean p3ChatService_getVirtualPeerId(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3ChatService_isLobbyId(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3);
  public final static native void p3ChatService_getChatLobbyList(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_acceptLobbyInvite(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2);
  public final static native void p3ChatService_denyLobbyInvite(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2);
  public final static native void p3ChatService_getPendingChatLobbyInvites(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native void p3ChatService_invitePeerToLobby__SWIG_0(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3, boolean jarg4);
  public final static native void p3ChatService_invitePeerToLobby__SWIG_1(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native void p3ChatService_unsubscribeChatLobby(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2);
  public final static native boolean p3ChatService_setNickNameForChatLobby(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3ChatService_getNickNameForChatLobby(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3ChatService_setDefaultNickNameForChatLobby(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_getDefaultNickNameForChatLobby(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native void p3ChatService_setLobbyAutoSubscribe(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native boolean p3ChatService_getLobbyAutoSubscribe(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2);
  public final static native void p3ChatService_sendLobbyStatusString(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native java.math.BigInteger p3ChatService_createChatLobby(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void p3ChatService_getListOfNearbyChatLobbies(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_joinVisibleChatLobby(long jarg1, p3ChatService jarg1_, java.math.BigInteger jarg2);
  public final static native void p3ChatService_connectToTurtleRouter(long jarg1, p3ChatService jarg1_, long jarg2, p3turtle jarg2_);
  public final static native boolean p3ChatService_createDistantChatInvite(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3ChatService_getDistantChatInviteList(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_initiateDistantChatConnexion__SWIG_0(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3ChatService_initiateDistantChatConnexion__SWIG_1(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3ChatService_closeDistantChatConnexion(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_removeDistantChatInvite(long jarg1, p3ChatService jarg1_, long jarg2);
  public final static native boolean p3ChatService_getDistantChatStatus(long jarg1, p3ChatService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void delete_p3ChatService(long jarg1);
  public final static native long new_chatServiceTest();
  public final static native void delete_chatServiceTest(long jarg1);
  public final static native void chatServiceTest_runTests(long jarg1, chatServiceTest jarg1_);
  public final static native void chatServiceTest_insertChatItems(long jarg1, chatServiceTest jarg1_);
  public final static native boolean TestUtils_createRandomFile(long jarg1, java.math.BigInteger jarg2);
  public final static native long TestUtils_createRandomFileHash();
  public final static native long TestUtils_createRandomSSLId();
  public final static native long TestUtils_createRandomPGPId();
  public final static native long new_TestUtils();
  public final static native void delete_TestUtils(long jarg1);
  public final static native short RS_PKT_SUBTYPE_CHANNEL_MSG_get();
  public final static native short RS_PKT_SUBTYPE_CHANNEL_READ_STATUS_get();
  public final static native short RS_PKT_SUBTYPE_CHANNEL_DEST_DIR_get();
  public final static native long new_RsChannelMsg();
  public final static native void delete_RsChannelMsg(long jarg1);
  public final static native void RsChannelMsg_clear(long jarg1, RsChannelMsg jarg1_);
  public final static native long RsChannelMsg_print__SWIG_0(long jarg1, RsChannelMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsChannelMsg_print__SWIG_1(long jarg1, RsChannelMsg jarg1_, long jarg2);
  public final static native void RsChannelMsg_subject_set(long jarg1, RsChannelMsg jarg1_, long jarg2);
  public final static native long RsChannelMsg_subject_get(long jarg1, RsChannelMsg jarg1_);
  public final static native void RsChannelMsg_message_set(long jarg1, RsChannelMsg jarg1_, long jarg2);
  public final static native long RsChannelMsg_message_get(long jarg1, RsChannelMsg jarg1_);
  public final static native void RsChannelMsg_attachment_set(long jarg1, RsChannelMsg jarg1_, long jarg2, RsTlvFileSet jarg2_);
  public final static native long RsChannelMsg_attachment_get(long jarg1, RsChannelMsg jarg1_);
  public final static native void RsChannelMsg_thumbnail_set(long jarg1, RsChannelMsg jarg1_, long jarg2, RsTlvImage jarg2_);
  public final static native long RsChannelMsg_thumbnail_get(long jarg1, RsChannelMsg jarg1_);
  public final static native long new_RsChannelReadStatus();
  public final static native void delete_RsChannelReadStatus(long jarg1);
  public final static native void RsChannelReadStatus_clear(long jarg1, RsChannelReadStatus jarg1_);
  public final static native long RsChannelReadStatus_print(long jarg1, RsChannelReadStatus jarg1_, long jarg2, int jarg3);
  public final static native void RsChannelReadStatus_channelId_set(long jarg1, RsChannelReadStatus jarg1_, long jarg2);
  public final static native long RsChannelReadStatus_channelId_get(long jarg1, RsChannelReadStatus jarg1_);
  public final static native void RsChannelReadStatus_msgReadStatus_set(long jarg1, RsChannelReadStatus jarg1_, long jarg2);
  public final static native long RsChannelReadStatus_msgReadStatus_get(long jarg1, RsChannelReadStatus jarg1_);
  public final static native void RsChannelReadStatus_destination_directory_set(long jarg1, RsChannelReadStatus jarg1_, long jarg2);
  public final static native long RsChannelReadStatus_destination_directory_get(long jarg1, RsChannelReadStatus jarg1_);
  public final static native long new_RsChannelDestDirConfigItem();
  public final static native void delete_RsChannelDestDirConfigItem(long jarg1);
  public final static native void RsChannelDestDirConfigItem_clear(long jarg1, RsChannelDestDirConfigItem jarg1_);
  public final static native long RsChannelDestDirConfigItem_print(long jarg1, RsChannelDestDirConfigItem jarg1_, long jarg2, int jarg3);
  public final static native void RsChannelDestDirConfigItem_dest_dirs_set(long jarg1, RsChannelDestDirConfigItem jarg1_, long jarg2);
  public final static native long RsChannelDestDirConfigItem_dest_dirs_get(long jarg1, RsChannelDestDirConfigItem jarg1_);
  public final static native long new_RsChannelSerialiser();
  public final static native void delete_RsChannelSerialiser(long jarg1);
  public final static native long RsChannelSerialiser_size(long jarg1, RsChannelSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsChannelSerialiser_serialise(long jarg1, RsChannelSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsChannelSerialiser_deserialise(long jarg1, RsChannelSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_BLOG_MSG_get();
  public final static native long new_RsBlogMsg();
  public final static native void delete_RsBlogMsg(long jarg1);
  public final static native void RsBlogMsg_clear(long jarg1, RsBlogMsg jarg1_);
  public final static native long RsBlogMsg_print__SWIG_0(long jarg1, RsBlogMsg jarg1_, long jarg2, int jarg3);
  public final static native long RsBlogMsg_print__SWIG_1(long jarg1, RsBlogMsg jarg1_, long jarg2);
  public final static native void RsBlogMsg_subject_set(long jarg1, RsBlogMsg jarg1_, long jarg2);
  public final static native long RsBlogMsg_subject_get(long jarg1, RsBlogMsg jarg1_);
  public final static native void RsBlogMsg_message_set(long jarg1, RsBlogMsg jarg1_, long jarg2);
  public final static native long RsBlogMsg_message_get(long jarg1, RsBlogMsg jarg1_);
  public final static native void RsBlogMsg_graphic_set_set(long jarg1, RsBlogMsg jarg1_, long jarg2);
  public final static native long RsBlogMsg_graphic_set_get(long jarg1, RsBlogMsg jarg1_);
  public final static native long new_RsBlogSerialiser();
  public final static native void delete_RsBlogSerialiser(long jarg1);
  public final static native long RsBlogSerialiser_size(long jarg1, RsBlogSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsBlogSerialiser_serialise(long jarg1, RsBlogSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsBlogSerialiser_deserialise(long jarg1, RsBlogSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long init_item__SWIG_14(long jarg1, RsDistribGrp jarg1_);
  public final static native long init_item__SWIG_15(long jarg1, RsDistribGrpKey jarg1_);
  public final static native long init_item__SWIG_16(long jarg1, RsDistribSignedMsg jarg1_);
  public final static native long init_item__SWIG_17(long jarg1, RsChannelMsg jarg1_);
  public final static native long init_item__SWIG_18(long jarg1, RsForumMsg jarg1_);
  public final static native long init_item__SWIG_19(long jarg1, RsForumReadStatus jarg1_);
  public final static native long init_item__SWIG_20(long jarg1, RsBlogMsg jarg1_);
  public final static native long init_item__SWIG_21(long jarg1, RsGxsPhotoAlbumItem jarg1_);
  public final static native long init_item__SWIG_22(long jarg1, RsGxsPhotoPhotoItem jarg1_);
  public final static native long init_item__SWIG_25(long jarg1, RsNxsSyncGrp jarg1_);
  public final static native long init_item__SWIG_26(long jarg1, RsNxsSyncMsg jarg1_);
  public final static native long init_item__SWIG_27(long jarg1, RsNxsSyncGrpItem jarg1_);
  public final static native long init_item__SWIG_28(long jarg1, RsNxsSyncMsgItem jarg1_);
  public final static native long init_item__SWIG_29(long jarg1, RsNxsTransac jarg1_);
  public final static native long init_item__SWIG_30(long jarg1, CompressedChunkMap jarg1_);
  public final static native long init_item__SWIG_31(long jarg1, RsPeerNetItem jarg1_);
  public final static native long init_item__SWIG_32(long jarg1, RsPeerOldNetItem jarg1_);
  public final static native long init_item__SWIG_33(long jarg1, RsPeerGroupItem jarg1_);
  public final static native long init_item__SWIG_34(long jarg1, RsPeerStunItem jarg1_);
  public final static native long init_item__SWIG_35(long jarg1, RsCacheConfig jarg1_);
  public final static native long init_item__SWIG_36(long jarg1, RsFileTransfer jarg1_);
  public final static native long init_item__SWIG_37(long jarg1, RsChatMsgItem jarg1_);
  public final static native long init_item__SWIG_38(long jarg1, RsChatStatusItem jarg1_);
  public final static native long init_item__SWIG_39(long jarg1, RsChatAvatarItem jarg1_);
  public final static native long init_item__SWIG_40(long jarg1, RsMsgItem jarg1_);
  public final static native long init_item__SWIG_41(long jarg1, RsMsgTagType jarg1_);
  public final static native long init_item__SWIG_42(long jarg1, RsMsgTags jarg1_);
  public final static native long init_item__SWIG_43(long jarg1, RsMsgSrcId jarg1_);
  public final static native long new_RsStatusItem();
  public final static native void delete_RsStatusItem(long jarg1);
  public final static native void RsStatusItem_clear(long jarg1, RsStatusItem jarg1_);
  public final static native long RsStatusItem_print__SWIG_0(long jarg1, RsStatusItem jarg1_, long jarg2, int jarg3);
  public final static native long RsStatusItem_print__SWIG_1(long jarg1, RsStatusItem jarg1_, long jarg2);
  public final static native void RsStatusItem_sendTime_set(long jarg1, RsStatusItem jarg1_, long jarg2);
  public final static native long RsStatusItem_sendTime_get(long jarg1, RsStatusItem jarg1_);
  public final static native void RsStatusItem_status_set(long jarg1, RsStatusItem jarg1_, long jarg2);
  public final static native long RsStatusItem_status_get(long jarg1, RsStatusItem jarg1_);
  public final static native void RsStatusItem_recvTime_set(long jarg1, RsStatusItem jarg1_, long jarg2);
  public final static native long RsStatusItem_recvTime_get(long jarg1, RsStatusItem jarg1_);
  public final static native long new_RsStatusSerialiser();
  public final static native void delete_RsStatusSerialiser(long jarg1);
  public final static native long RsStatusSerialiser_size(long jarg1, RsStatusSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsStatusSerialiser_serialise(long jarg1, RsStatusSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsStatusSerialiser_deserialise(long jarg1, RsStatusSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long init_item__SWIG_44(long jarg1, RsStatusItem jarg1_);
  public final static native long new_UdpStack(long jarg1);
  public final static native boolean UdpStack_resetAddress(long jarg1, UdpStack jarg1_, long jarg2);
  public final static native void delete_UdpStack(long jarg1);
  public final static native long new_rsUdpStack__SWIG_0(long jarg1);
  public final static native long new_rsUdpStack__SWIG_1(int jarg1, long jarg2);
  public final static native boolean rsUdpStack_resetListener(long jarg1, rsUdpStack jarg1_, long jarg2);
  public final static native void delete_rsUdpStack(long jarg1);
  public final static native long new_rsFixedUdpStack__SWIG_0(long jarg1);
  public final static native long new_rsFixedUdpStack__SWIG_1(int jarg1, long jarg2);
  public final static native boolean rsFixedUdpStack_resetListener(long jarg1, rsFixedUdpStack jarg1_, long jarg2);
  public final static native void delete_rsFixedUdpStack(long jarg1);
  public final static native void delete_UdpPeer(long jarg1);
  public final static native void UdpPeer_recvPkt(long jarg1, UdpPeer jarg1_, long jarg2, int jarg3);
  public final static native long new_UdpPeerReceiver(long jarg1);
  public final static native void delete_UdpPeerReceiver(long jarg1);
  public final static native int UdpPeerReceiver_addUdpPeer(long jarg1, UdpPeerReceiver jarg1_, long jarg2, UdpPeer jarg2_, long jarg3);
  public final static native int UdpPeerReceiver_removeUdpPeer(long jarg1, UdpPeerReceiver jarg1_, long jarg2, UdpPeer jarg2_);
  public final static native int UdpPeerReceiver_recvPkt(long jarg1, UdpPeerReceiver jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native int UdpPeerReceiver_status(long jarg1, UdpPeerReceiver jarg1_, long jarg2);
  public final static native int UdpRecvTest_recvPkt(long jarg1, UdpRecvTest jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native int UdpRecvTest_status(long jarg1, UdpRecvTest jarg1_, long jarg2);
  public final static native long new_UdpRecvTest();
  public final static native void delete_UdpRecvTest(long jarg1);
  public final static native long new_UdpPeerTest(long jarg1);
  public final static native void UdpPeerTest_recvPkt(long jarg1, UdpPeerTest jarg1_, long jarg2, int jarg3);
  public final static native void UdpPeerTest_raddr_set(long jarg1, UdpPeerTest jarg1_, long jarg2);
  public final static native long UdpPeerTest_raddr_get(long jarg1, UdpPeerTest jarg1_);
  public final static native void delete_UdpPeerTest(long jarg1);
  public final static native void delete_ftDataSend(long jarg1);
  public final static native boolean ftDataSend_sendDataRequest(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataSend_sendData(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataSend_sendChunkMapRequest(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataSend_sendChunkMap(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataSend_sendCRC32MapRequest(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataSend_sendCRC32Map(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataSend_sendSingleChunkCRCRequest(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataSend_sendSingleChunkCRC(long jarg1, ftDataSend jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native void delete_ftDataRecv(long jarg1);
  public final static native boolean ftDataRecv_recvData(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataRecv_recvDataRequest(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataRecv_recvChunkMapRequest(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataRecv_recvChunkMap(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataRecv_recvCRC32MapRequest(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataRecv_recvCRC32Map(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataRecv_recvSingleChunkCRCRequest(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataRecv_recvSingleChunkCRC(long jarg1, ftDataRecv jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native long new_ftDataSendPair(long jarg1, ftDataRecv jarg1_);
  public final static native void delete_ftDataSendPair(long jarg1);
  public final static native boolean ftDataSendPair_sendDataRequest(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataSendPair_sendData(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataSendPair_sendChunkMapRequest(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataSendPair_sendChunkMap(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataSendPair_sendCRC32MapRequest(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataSendPair_sendCRC32Map(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void ftDataSendPair_mDataRecv_set(long jarg1, ftDataSendPair jarg1_, long jarg2, ftDataRecv jarg2_);
  public final static native long ftDataSendPair_mDataRecv_get(long jarg1, ftDataSendPair jarg1_);
  public final static native boolean ftDataSendPair_sendSingleChunkCRCRequest(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataSendPair_sendSingleChunkCRC(long jarg1, ftDataSendPair jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native void delete_ftDataSendDummy(long jarg1);
  public final static native boolean ftDataSendDummy_sendDataRequest(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataSendDummy_sendData(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataSendDummy_sendChunkMapRequest(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataSendDummy_sendChunkMap(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataSendDummy_sendCRC32MapRequest(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataSendDummy_sendCRC32Map(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataSendDummy_sendSingleChunkCRCRequest(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataSendDummy_sendSingleChunkCRC(long jarg1, ftDataSendDummy jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native long new_ftDataSendDummy();
  public final static native void delete_ftDataRecvDummy(long jarg1);
  public final static native boolean ftDataRecvDummy_recvData(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataRecvDummy_recvDataRequest(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataRecvDummy_recvChunkMapRequest(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataRecvDummy_recvChunkMap(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataRecvDummy_recvCRC32MapRequest(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataRecvDummy_recvCRC32Map(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_);
  public final static native boolean ftDataRecvDummy_recvSingleChunkCrcRequest(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataRecvDummy_recvSingleChunkCrc(long jarg1, ftDataRecvDummy jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native long new_hubItem__SWIG_0();
  public final static native long new_hubItem__SWIG_1(long jarg1, long jarg2, P3Pipe jarg2_, long jarg3, p3LinkMgr jarg3_);
  public final static native void hubItem_mPeerId_set(long jarg1, hubItem jarg1_, long jarg2);
  public final static native long hubItem_mPeerId_get(long jarg1, hubItem jarg1_);
  public final static native void hubItem_mPQI_set(long jarg1, hubItem jarg1_, long jarg2, P3Pipe jarg2_);
  public final static native long hubItem_mPQI_get(long jarg1, hubItem jarg1_);
  public final static native void hubItem_mLinkMgr_set(long jarg1, hubItem jarg1_, long jarg2, p3LinkMgr jarg2_);
  public final static native long hubItem_mLinkMgr_get(long jarg1, hubItem jarg1_);
  public final static native void delete_hubItem(long jarg1);
  public final static native long new_P3Hub(long jarg1, long jarg2, RsSerialiser jarg2_);
  public final static native void P3Hub_addP3Pipe(long jarg1, P3Hub jarg1_, long jarg2, long jarg3, P3Pipe jarg3_, long jarg4, p3LinkMgr jarg4_);
  public final static native void P3Hub_run(long jarg1, P3Hub jarg1_);
  public final static native void delete_P3Hub(long jarg1);
  public final static native long new_PQIPipe(long jarg1);
  public final static native int PQIPipe_SendItem(long jarg1, PQIPipe jarg1_, long jarg2, RsItem jarg2_);
  public final static native long PQIPipe_GetItem(long jarg1, PQIPipe jarg1_);
  public final static native long PQIPipe_PopSentItem(long jarg1, PQIPipe jarg1_);
  public final static native int PQIPipe_PushRecvdItem(long jarg1, PQIPipe jarg1_, long jarg2, RsItem jarg2_);
  public final static native void delete_PQIPipe(long jarg1);
  public final static native long new_P3Pipe();
  public final static native void delete_P3Pipe(long jarg1);
  public final static native int P3Pipe_tick(long jarg1, P3Pipe jarg1_);
  public final static native int P3Pipe_status(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_RequestedSearch(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetSearchResult(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileRequest(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileData(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetRsRawItem(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileChunkMapRequest(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileChunkMap(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileCRC32MapRequest(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileCRC32Map(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileSingleChunkCrcRequest(long jarg1, P3Pipe jarg1_);
  public final static native long P3Pipe_GetFileSingleChunkCrc(long jarg1, P3Pipe jarg1_);
  public final static native int P3Pipe_SearchSpecific(long jarg1, P3Pipe jarg1_, long jarg2, RsCacheRequest jarg2_);
  public final static native int P3Pipe_SendSearchResult(long jarg1, P3Pipe jarg1_, long jarg2, RsCacheItem jarg2_);
  public final static native int P3Pipe_SendFileRequest(long jarg1, P3Pipe jarg1_, long jarg2, RsFileRequest jarg2_);
  public final static native int P3Pipe_SendFileData(long jarg1, P3Pipe jarg1_, long jarg2, RsFileData jarg2_);
  public final static native int P3Pipe_SendRsRawItem(long jarg1, P3Pipe jarg1_, long jarg2, RsRawItem jarg2_);
  public final static native int P3Pipe_SendFileChunkMapRequest(long jarg1, P3Pipe jarg1_, long jarg2, RsFileChunkMapRequest jarg2_);
  public final static native int P3Pipe_SendFileChunkMap(long jarg1, P3Pipe jarg1_, long jarg2, RsFileChunkMap jarg2_);
  public final static native int P3Pipe_SendFileCRC32MapRequest(long jarg1, P3Pipe jarg1_, long jarg2, RsFileCRC32MapRequest jarg2_);
  public final static native int P3Pipe_SendFileCRC32Map(long jarg1, P3Pipe jarg1_, long jarg2, RsFileCRC32Map jarg2_);
  public final static native int P3Pipe_SendFileSingleChunkCrcRequest(long jarg1, P3Pipe jarg1_, long jarg2, RsFileSingleChunkCrcRequest jarg2_);
  public final static native int P3Pipe_SendFileSingleChunkCrc(long jarg1, P3Pipe jarg1_, long jarg2, RsFileSingleChunkCrc jarg2_);
  public final static native long P3Pipe_PopSentItem(long jarg1, P3Pipe jarg1_);
  public final static native int P3Pipe_PushRecvdItem(long jarg1, P3Pipe jarg1_, long jarg2, RsItem jarg2_);
  public final static native long new_ftSearchDummy();
  public final static native void delete_ftSearchDummy(long jarg1);
  public final static native boolean ftSearchDummy_search(long jarg1, ftSearchDummy jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native long new_RsGxsFile();
  public final static native void RsGxsFile_mName_set(long jarg1, RsGxsFile jarg1_, long jarg2);
  public final static native long RsGxsFile_mName_get(long jarg1, RsGxsFile jarg1_);
  public final static native void RsGxsFile_mHash_set(long jarg1, RsGxsFile jarg1_, long jarg2);
  public final static native long RsGxsFile_mHash_get(long jarg1, RsGxsFile jarg1_);
  public final static native void RsGxsFile_mSize_set(long jarg1, RsGxsFile jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsGxsFile_mSize_get(long jarg1, RsGxsFile jarg1_);
  public final static native void delete_RsGxsFile(long jarg1);
  public final static native long new_RsGxsImage__SWIG_0();
  public final static native void delete_RsGxsImage(long jarg1);
  public final static native long new_RsGxsImage__SWIG_1(long jarg1, RsGxsImage jarg1_);
  public final static native long RsGxsImage_allocate(long jarg1);
  public final static native void RsGxsImage_release(long jarg1);
  public final static native void RsGxsImage_take(long jarg1, RsGxsImage jarg1_, long jarg2, long jarg3);
  public final static native void RsGxsImage_copy(long jarg1, RsGxsImage jarg1_, long jarg2, long jarg3);
  public final static native void RsGxsImage_clear(long jarg1, RsGxsImage jarg1_);
  public final static native void RsGxsImage_shallowClear(long jarg1, RsGxsImage jarg1_);
  public final static native void RsGxsImage_mData_set(long jarg1, RsGxsImage jarg1_, long jarg2);
  public final static native long RsGxsImage_mData_get(long jarg1, RsGxsImage jarg1_);
  public final static native void RsGxsImage_mSize_set(long jarg1, RsGxsImage jarg1_, long jarg2);
  public final static native long RsGxsImage_mSize_get(long jarg1, RsGxsImage jarg1_);
  public final static native int GXS_VOTE_NONE_get();
  public final static native int GXS_VOTE_DOWN_get();
  public final static native int GXS_VOTE_UP_get();
  public final static native long GXS_MSG_STATUS_GXSCOMMENT_MASK_get();
  public final static native long GXS_MSG_STATUS_VOTE_MASK_get();
  public final static native long GXS_MSG_STATUS_VOTE_UP_get();
  public final static native long GXS_MSG_STATUS_VOTE_DOWN_get();
  public final static native long new_RsGxsVote();
  public final static native void RsGxsVote_mMeta_set(long jarg1, RsGxsVote jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsVote_mMeta_get(long jarg1, RsGxsVote jarg1_);
  public final static native void RsGxsVote_mVoteType_set(long jarg1, RsGxsVote jarg1_, long jarg2);
  public final static native long RsGxsVote_mVoteType_get(long jarg1, RsGxsVote jarg1_);
  public final static native void delete_RsGxsVote(long jarg1);
  public final static native long new_RsGxsComment();
  public final static native void RsGxsComment_mMeta_set(long jarg1, RsGxsComment jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsComment_mMeta_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mComment_set(long jarg1, RsGxsComment jarg1_, long jarg2);
  public final static native long RsGxsComment_mComment_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mUpVotes_set(long jarg1, RsGxsComment jarg1_, long jarg2);
  public final static native long RsGxsComment_mUpVotes_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mDownVotes_set(long jarg1, RsGxsComment jarg1_, long jarg2);
  public final static native long RsGxsComment_mDownVotes_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mScore_set(long jarg1, RsGxsComment jarg1_, double jarg2);
  public final static native double RsGxsComment_mScore_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mOwnVote_set(long jarg1, RsGxsComment jarg1_, long jarg2);
  public final static native long RsGxsComment_mOwnVote_get(long jarg1, RsGxsComment jarg1_);
  public final static native void RsGxsComment_mVotes_set(long jarg1, RsGxsComment jarg1_, long jarg2);
  public final static native long RsGxsComment_mVotes_get(long jarg1, RsGxsComment jarg1_);
  public final static native void delete_RsGxsComment(long jarg1);
  public final static native void delete_RsGxsCommentService(long jarg1);
  public final static native boolean RsGxsCommentService_getCommentData(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsCommentService_getRelatedComments(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsCommentService_createComment(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3, RsGxsComment jarg3_);
  public final static native boolean RsGxsCommentService_createVote(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3, RsGxsVote jarg3_);
  public final static native boolean RsGxsCommentService_acknowledgeComment(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsCommentService_acknowledgeVote(long jarg1, RsGxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native void rsPosted_set(long jarg1, RsPosted jarg1_);
  public final static native long rsPosted_get();
  public final static native long new_RsPostedGroup();
  public final static native void RsPostedGroup_mMeta_set(long jarg1, RsPostedGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsPostedGroup_mMeta_get(long jarg1, RsPostedGroup jarg1_);
  public final static native void RsPostedGroup_mDescription_set(long jarg1, RsPostedGroup jarg1_, long jarg2);
  public final static native long RsPostedGroup_mDescription_get(long jarg1, RsPostedGroup jarg1_);
  public final static native void delete_RsPostedGroup(long jarg1);
  public final static native int RSPOSTED_PERIOD_YEAR_get();
  public final static native int RSPOSTED_PERIOD_MONTH_get();
  public final static native int RSPOSTED_PERIOD_WEEK_get();
  public final static native int RSPOSTED_PERIOD_DAY_get();
  public final static native int RSPOSTED_PERIOD_HOUR_get();
  public final static native int RSPOSTED_VIEWMODE_LATEST_get();
  public final static native int RSPOSTED_VIEWMODE_TOP_get();
  public final static native int RSPOSTED_VIEWMODE_HOT_get();
  public final static native int RSPOSTED_VIEWMODE_COMMENTS_get();
  public final static native void delete_RsPosted(long jarg1);
  public final static native boolean RsPosted_getGroupData(long jarg1, RsPosted jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPosted_getPostData(long jarg1, RsPosted jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPosted_getRelatedPosts(long jarg1, RsPosted jarg1_, long jarg2, long jarg3);
  public final static native void RsPosted_setMessageReadStatus(long jarg1, RsPosted jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsPosted_createGroup(long jarg1, RsPosted jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_);
  public final static native boolean RsPosted_createPost(long jarg1, RsPosted jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native long new_RsPostedPost();
  public final static native boolean RsPostedPost_calculateScores(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native void RsPostedPost_mMeta_set(long jarg1, RsPostedPost jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsPostedPost_mMeta_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mLink_set(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native long RsPostedPost_mLink_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mNotes_set(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native long RsPostedPost_mNotes_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mHaveVoted_set(long jarg1, RsPostedPost jarg1_, boolean jarg2);
  public final static native boolean RsPostedPost_mHaveVoted_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mUpVotes_set(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native long RsPostedPost_mUpVotes_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mDownVotes_set(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native long RsPostedPost_mDownVotes_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mComments_set(long jarg1, RsPostedPost jarg1_, long jarg2);
  public final static native long RsPostedPost_mComments_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mHotScore_set(long jarg1, RsPostedPost jarg1_, double jarg2);
  public final static native double RsPostedPost_mHotScore_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mTopScore_set(long jarg1, RsPostedPost jarg1_, double jarg2);
  public final static native double RsPostedPost_mTopScore_get(long jarg1, RsPostedPost jarg1_);
  public final static native void RsPostedPost_mNewScore_set(long jarg1, RsPostedPost jarg1_, double jarg2);
  public final static native double RsPostedPost_mNewScore_get(long jarg1, RsPostedPost jarg1_);
  public final static native void delete_RsPostedPost(long jarg1);
  public final static native long VoteHolder_VOTE_ERROR_get();
  public final static native long VoteHolder_VOTE_QUEUED_get();
  public final static native long VoteHolder_VOTE_SUBMITTED_get();
  public final static native long VoteHolder_VOTE_READY_get();
  public final static native long new_VoteHolder__SWIG_0();
  public final static native long new_VoteHolder__SWIG_1(long jarg1, RsGxsVote jarg1_, long jarg2);
  public final static native void VoteHolder_mVote_set(long jarg1, VoteHolder jarg1_, long jarg2, RsGxsVote jarg2_);
  public final static native long VoteHolder_mVote_get(long jarg1, VoteHolder jarg1_);
  public final static native void VoteHolder_mVoteToken_set(long jarg1, VoteHolder jarg1_, long jarg2);
  public final static native long VoteHolder_mVoteToken_get(long jarg1, VoteHolder jarg1_);
  public final static native void VoteHolder_mReqToken_set(long jarg1, VoteHolder jarg1_, long jarg2);
  public final static native long VoteHolder_mReqToken_get(long jarg1, VoteHolder jarg1_);
  public final static native void VoteHolder_mStatus_set(long jarg1, VoteHolder jarg1_, long jarg2);
  public final static native long VoteHolder_mStatus_get(long jarg1, VoteHolder jarg1_);
  public final static native void delete_VoteHolder(long jarg1);
  public final static native long new_p3GxsCommentService(long jarg1, RsGenExchange jarg1_, int jarg2);
  public final static native void p3GxsCommentService_comment_tick(long jarg1, p3GxsCommentService jarg1_);
  public final static native boolean p3GxsCommentService_getGxsCommentData(long jarg1, p3GxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsCommentService_getGxsRelatedComments(long jarg1, p3GxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsCommentService_createGxsComment(long jarg1, p3GxsCommentService jarg1_, long jarg2, long jarg3, RsGxsComment jarg3_);
  public final static native boolean p3GxsCommentService_createGxsVote(long jarg1, p3GxsCommentService jarg1_, long jarg2, long jarg3, RsGxsVote jarg3_);
  public final static native boolean p3GxsCommentService_acknowledgeVote(long jarg1, p3GxsCommentService jarg1_, long jarg2, long jarg3);
  public final static native double p3GxsCommentService_calculateBestScore(int jarg1, int jarg2);
  public final static native void delete_p3GxsCommentService(long jarg1);
  public final static native long new_RsTickEvent();
  public final static native void RsTickEvent_tick_events(long jarg1, RsTickEvent jarg1_);
  public final static native void RsTickEvent_schedule_now__SWIG_0(long jarg1, RsTickEvent jarg1_, long jarg2);
  public final static native void RsTickEvent_schedule_now__SWIG_1(long jarg1, RsTickEvent jarg1_, long jarg2, long jarg3);
  public final static native void RsTickEvent_schedule_event(long jarg1, RsTickEvent jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RsTickEvent_schedule_in__SWIG_0(long jarg1, RsTickEvent jarg1_, long jarg2, long jarg3);
  public final static native void RsTickEvent_schedule_in__SWIG_1(long jarg1, RsTickEvent jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int RsTickEvent_event_count(long jarg1, RsTickEvent jarg1_, long jarg2);
  public final static native boolean RsTickEvent_prev_event_ago(long jarg1, RsTickEvent jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsTickEvent(long jarg1);
  public final static native long new_PostStats__SWIG_0();
  public final static native long new_PostStats__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native void PostStats_increment(long jarg1, PostStats jarg1_, long jarg2, PostStats jarg2_);
  public final static native void PostStats_up_votes_set(long jarg1, PostStats jarg1_, int jarg2);
  public final static native int PostStats_up_votes_get(long jarg1, PostStats jarg1_);
  public final static native void PostStats_down_votes_set(long jarg1, PostStats jarg1_, int jarg2);
  public final static native int PostStats_down_votes_get(long jarg1, PostStats jarg1_);
  public final static native void PostStats_comments_set(long jarg1, PostStats jarg1_, int jarg2);
  public final static native int PostStats_comments_get(long jarg1, PostStats jarg1_);
  public final static native void PostStats_voters_set(long jarg1, PostStats jarg1_, long jarg2);
  public final static native long PostStats_voters_get(long jarg1, PostStats jarg1_);
  public final static native void delete_PostStats(long jarg1);
  public final static native boolean encodePostedCache(long jarg1, long jarg2, PostStats jarg2_);
  public final static native boolean extractPostedCache(long jarg1, long jarg2, PostStats jarg2_);
  public final static native long new_p3Posted(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native void p3Posted_service_tick(long jarg1, p3Posted jarg1_);
  public final static native boolean p3Posted_getGroupData(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Posted_getPostData(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Posted_getRelatedPosts(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native void p3Posted_setMessageReadStatus(long jarg1, p3Posted jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3Posted_createGroup(long jarg1, p3Posted jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_);
  public final static native boolean p3Posted_createPost(long jarg1, p3Posted jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean p3Posted_getCommentData(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Posted_getRelatedComments(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Posted_createComment(long jarg1, p3Posted jarg1_, long jarg2, long jarg3, RsGxsComment jarg3_);
  public final static native boolean p3Posted_createVote(long jarg1, p3Posted jarg1_, long jarg2, long jarg3, RsGxsVote jarg3_);
  public final static native boolean p3Posted_acknowledgeComment(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Posted_acknowledgeVote(long jarg1, p3Posted jarg1_, long jarg2, long jarg3);
  public final static native void delete_p3Posted(long jarg1);
  public final static native long new_p3MsgService(long jarg1, p3LinkMgr jarg1_);
  public final static native boolean p3MsgService_getMessageSummaries(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native boolean p3MsgService_getMessage(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, MessageInfo jarg3_);
  public final static native void p3MsgService_getMessageCount(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean p3MsgService_decryptMessage(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native boolean p3MsgService_removeMsgId(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native boolean p3MsgService_markMsgIdRead(long jarg1, p3MsgService jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3MsgService_setMsgFlag(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3MsgService_getMsgParentId(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3MsgService_setMsgParentId(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3MsgService_MessageSend(long jarg1, p3MsgService jarg1_, long jarg2, MessageInfo jarg2_);
  public final static native boolean p3MsgService_SystemMessage(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3MsgService_MessageToDraft(long jarg1, p3MsgService jarg1_, long jarg2, MessageInfo jarg2_, long jarg3);
  public final static native boolean p3MsgService_MessageToTrash(long jarg1, p3MsgService jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3MsgService_getMessageTagTypes(long jarg1, p3MsgService jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native boolean p3MsgService_setMessageTagType(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3MsgService_removeMessageTagType(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native boolean p3MsgService_getMessageTag(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, MsgTagInfo jarg3_);
  public final static native boolean p3MsgService_setMessageTag(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3MsgService_resetMessageStandardTagTypes(long jarg1, p3MsgService jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native void p3MsgService_loadWelcomeMsg(long jarg1, p3MsgService jarg1_);
  public final static native int p3MsgService_tick(long jarg1, p3MsgService jarg1_);
  public final static native int p3MsgService_status(long jarg1, p3MsgService jarg1_);
  public final static native long p3MsgService_setupSerialiser(long jarg1, p3MsgService jarg1_);
  public final static native boolean p3MsgService_saveList(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3MsgService_loadList(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native void p3MsgService_saveDone(long jarg1, p3MsgService jarg1_);
  public final static native void p3MsgService_statusChange(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native int p3MsgService_checkOutgoingMessages(long jarg1, p3MsgService jarg1_);
  public final static native void p3MsgService_connectToTurtleRouter(long jarg1, p3MsgService jarg1_, long jarg2, p3turtle jarg2_);
  public final static native boolean p3MsgService_createDistantOfflineMessengingInvite(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3MsgService_getDistantOfflineMessengingInvites(long jarg1, p3MsgService jarg1_, long jarg2);
  public final static native void p3MsgService_enableDistantMessaging(long jarg1, p3MsgService jarg1_, boolean jarg2);
  public final static native boolean p3MsgService_distantMessagingEnabled(long jarg1, p3MsgService jarg1_);
  public final static native boolean p3MsgService_getDistantMessageHash(long jarg1, p3MsgService jarg1_, long jarg2, long jarg3);
  public final static native void p3MsgService_sendPrivateMsgItem(long jarg1, p3MsgService jarg1_, long jarg2, RsMsgItem jarg2_);
  public final static native void delete_p3MsgService(long jarg1);
  public final static native void rsPhoto_set(long jarg1, RsPhoto jarg1_);
  public final static native long rsPhoto_get();
  public final static native int RSPHOTO_MODE_NEW_get();
  public final static native int RSPHOTO_MODE_OWN_get();
  public final static native int RSPHOTO_MODE_REMOTE_get();
  public final static native long new_RsPhotoThumbnail();
  public final static native boolean RsPhotoThumbnail_deleteImage(long jarg1, RsPhotoThumbnail jarg1_);
  public final static native boolean RsPhotoThumbnail_copyFrom(long jarg1, RsPhotoThumbnail jarg1_, long jarg2, RsPhotoThumbnail jarg2_);
  public final static native void RsPhotoThumbnail_data_set(long jarg1, RsPhotoThumbnail jarg1_, long jarg2);
  public final static native long RsPhotoThumbnail_data_get(long jarg1, RsPhotoThumbnail jarg1_);
  public final static native void RsPhotoThumbnail_size_set(long jarg1, RsPhotoThumbnail jarg1_, int jarg2);
  public final static native int RsPhotoThumbnail_size_get(long jarg1, RsPhotoThumbnail jarg1_);
  public final static native void RsPhotoThumbnail_type_set(long jarg1, RsPhotoThumbnail jarg1_, long jarg2);
  public final static native long RsPhotoThumbnail_type_get(long jarg1, RsPhotoThumbnail jarg1_);
  public final static native void delete_RsPhotoThumbnail(long jarg1);
  public final static native int RSPHOTO_FLAGS_ATTRIB_TITLE_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_CAPTION_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_DESC_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_PHOTOGRAPHER_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_WHERE_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_WHEN_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_OTHER_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_CATEGORY_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_HASHTAGS_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_ORDER_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_THUMBNAIL_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_MODE_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_AUTHOR_get();
  public final static native int RSPHOTO_FLAGS_ATTRIB_PHOTO_get();
  public final static native void RsPhotoPhoto_mMeta_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsPhotoPhoto_mMeta_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native long new_RsPhotoPhoto();
  public final static native void RsPhotoPhoto_mCaption_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mCaption_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mDescription_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mDescription_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mPhotographer_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mPhotographer_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mWhere_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mWhere_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mWhen_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mWhen_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mOther_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mOther_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mCategory_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mCategory_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mHashTags_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mHashTags_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mSetFlags_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mSetFlags_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mOrder_set(long jarg1, RsPhotoPhoto jarg1_, int jarg2);
  public final static native int RsPhotoPhoto_mOrder_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mThumbnail_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2, RsPhotoThumbnail jarg2_);
  public final static native long RsPhotoPhoto_mThumbnail_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mMode_set(long jarg1, RsPhotoPhoto jarg1_, int jarg2);
  public final static native int RsPhotoPhoto_mMode_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_path_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_path_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void RsPhotoPhoto_mModFlags_set(long jarg1, RsPhotoPhoto jarg1_, long jarg2);
  public final static native long RsPhotoPhoto_mModFlags_get(long jarg1, RsPhotoPhoto jarg1_);
  public final static native void delete_RsPhotoPhoto(long jarg1);
  public final static native void RsPhotoAlbumShare_mShareType_set(long jarg1, RsPhotoAlbumShare jarg1_, long jarg2);
  public final static native long RsPhotoAlbumShare_mShareType_get(long jarg1, RsPhotoAlbumShare jarg1_);
  public final static native void RsPhotoAlbumShare_mShareGroupId_set(long jarg1, RsPhotoAlbumShare jarg1_, long jarg2);
  public final static native long RsPhotoAlbumShare_mShareGroupId_get(long jarg1, RsPhotoAlbumShare jarg1_);
  public final static native void RsPhotoAlbumShare_mPublishKey_set(long jarg1, RsPhotoAlbumShare jarg1_, long jarg2);
  public final static native long RsPhotoAlbumShare_mPublishKey_get(long jarg1, RsPhotoAlbumShare jarg1_);
  public final static native void RsPhotoAlbumShare_mCommentMode_set(long jarg1, RsPhotoAlbumShare jarg1_, long jarg2);
  public final static native long RsPhotoAlbumShare_mCommentMode_get(long jarg1, RsPhotoAlbumShare jarg1_);
  public final static native void RsPhotoAlbumShare_mResizeMode_set(long jarg1, RsPhotoAlbumShare jarg1_, long jarg2);
  public final static native long RsPhotoAlbumShare_mResizeMode_get(long jarg1, RsPhotoAlbumShare jarg1_);
  public final static native long new_RsPhotoAlbumShare();
  public final static native void delete_RsPhotoAlbumShare(long jarg1);
  public final static native long new_RsPhotoAlbum();
  public final static native void RsPhotoAlbum_mMeta_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsPhotoAlbum_mMeta_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mCaption_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mCaption_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mDescription_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mDescription_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mPhotographer_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mPhotographer_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mWhere_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mWhere_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mWhen_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mWhen_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mOther_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mOther_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mCategory_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mCategory_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mHashTags_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mHashTags_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mThumbnail_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2, RsPhotoThumbnail jarg2_);
  public final static native long RsPhotoAlbum_mThumbnail_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mMode_set(long jarg1, RsPhotoAlbum jarg1_, int jarg2);
  public final static native int RsPhotoAlbum_mMode_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mPhotoPath_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mPhotoPath_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mShareOptions_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2, RsPhotoAlbumShare jarg2_);
  public final static native long RsPhotoAlbum_mShareOptions_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mSetFlags_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mSetFlags_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void RsPhotoAlbum_mModFlags_set(long jarg1, RsPhotoAlbum jarg1_, long jarg2);
  public final static native long RsPhotoAlbum_mModFlags_get(long jarg1, RsPhotoAlbum jarg1_);
  public final static native void delete_RsPhotoAlbum(long jarg1);
  public final static native long new_RsPhotoComment__SWIG_0();
  public final static native long new_RsPhotoComment__SWIG_1(long jarg1, RsGxsPhotoCommentItem jarg1_);
  public final static native void RsPhotoComment_mMeta_set(long jarg1, RsPhotoComment jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsPhotoComment_mMeta_get(long jarg1, RsPhotoComment jarg1_);
  public final static native void RsPhotoComment_mComment_set(long jarg1, RsPhotoComment jarg1_, long jarg2);
  public final static native long RsPhotoComment_mComment_get(long jarg1, RsPhotoComment jarg1_);
  public final static native void RsPhotoComment_mCommentFlag_set(long jarg1, RsPhotoComment jarg1_, long jarg2);
  public final static native long RsPhotoComment_mCommentFlag_get(long jarg1, RsPhotoComment jarg1_);
  public final static native void delete_RsPhotoComment(long jarg1);
  public final static native long RsPhoto_FLAG_MSG_TYPE_PHOTO_POST_get();
  public final static native long RsPhoto_FLAG_MSG_TYPE_PHOTO_COMMENT_get();
  public final static native long RsPhoto_FLAG_MSG_TYPE_MASK_get();
  public final static native void delete_RsPhoto(long jarg1);
  public final static native boolean RsPhoto_updated(long jarg1, RsPhoto jarg1_);
  public final static native void RsPhoto_groupsChanged(long jarg1, RsPhoto jarg1_, long jarg2);
  public final static native void RsPhoto_msgsChanged(long jarg1, RsPhoto jarg1_, long jarg2);
  public final static native long RsPhoto_getTokenService(long jarg1, RsPhoto jarg1_);
  public final static native boolean RsPhoto_getGroupList(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getMsgList(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getGroupSummary(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getMsgSummary(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getAlbum(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getPhoto(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getPhotoComment(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_getPhotoRelatedComment(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_submitAlbumDetails(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3, RsPhotoAlbum jarg3_);
  public final static native boolean RsPhoto_submitPhoto(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3, RsPhotoPhoto jarg3_);
  public final static native boolean RsPhoto_submitComment(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3, RsPhotoComment jarg3_);
  public final static native boolean RsPhoto_subscribeToAlbum(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsPhoto_acknowledgeMsg(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPhoto_acknowledgeGrp(long jarg1, RsPhoto jarg1_, long jarg2, long jarg3);
  public final static native long new_p3PhotoService(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native long p3PhotoService_photoAuthenPolicy();
  public final static native boolean p3PhotoService_updated(long jarg1, p3PhotoService jarg1_);
  public final static native void p3PhotoService_service_tick(long jarg1, p3PhotoService jarg1_);
  public final static native void p3PhotoService_groupsChanged(long jarg1, p3PhotoService jarg1_, long jarg2);
  public final static native void p3PhotoService_msgsChanged(long jarg1, p3PhotoService jarg1_, long jarg2);
  public final static native long p3PhotoService_getTokenService(long jarg1, p3PhotoService jarg1_);
  public final static native boolean p3PhotoService_getGroupList(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getMsgList(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getGroupSummary(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getMsgSummary(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getAlbum(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getPhoto(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getPhotoComment(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_getPhotoRelatedComment(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_submitAlbumDetails(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3, RsPhotoAlbum jarg3_);
  public final static native boolean p3PhotoService_submitPhoto(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3, RsPhotoPhoto jarg3_);
  public final static native boolean p3PhotoService_submitComment(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3, RsPhotoComment jarg3_);
  public final static native boolean p3PhotoService_subscribeToAlbum(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3PhotoService_acknowledgeMsg(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PhotoService_acknowledgeGrp(long jarg1, p3PhotoService jarg1_, long jarg2, long jarg3);
  public final static native void delete_p3PhotoService(long jarg1);
  public final static native int GXS_REQUEST_STATUS_FAILED_get();
  public final static native int GXS_REQUEST_STATUS_PENDING_get();
  public final static native int GXS_REQUEST_STATUS_PARTIAL_get();
  public final static native int GXS_REQUEST_STATUS_FINISHED_INCOMPLETE_get();
  public final static native int GXS_REQUEST_STATUS_COMPLETE_get();
  public final static native int GXS_REQUEST_STATUS_DONE_get();
  public final static native int GXS_REQUEST_TYPE_GROUPS_get();
  public final static native int GXS_REQUEST_TYPE_MSGS_get();
  public final static native int GXS_REQUEST_TYPE_MSGRELATED_get();
  public final static native void gxsRequest_token_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_token_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_reqTime_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_reqTime_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_ansType_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_ansType_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_reqType_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_reqType_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_Options_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_Options_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_status_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_status_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_inList_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_inList_get(long jarg1, gxsRequest jarg1_);
  public final static native void gxsRequest_outList_set(long jarg1, gxsRequest jarg1_, long jarg2);
  public final static native long gxsRequest_outList_get(long jarg1, gxsRequest jarg1_);
  public final static native long new_gxsRequest();
  public final static native void delete_gxsRequest(long jarg1);
  public final static native boolean p3GxsServiceVEG_generateToken(long jarg1, p3GxsServiceVEG jarg1_, long jarg2);
  public final static native boolean p3GxsServiceVEG_storeRequest(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3GxsServiceVEG_clearRequest(long jarg1, p3GxsServiceVEG jarg1_, long jarg2);
  public final static native boolean p3GxsServiceVEG_updateRequestStatus(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_updateRequestInList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_updateRequestOutList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_checkRequestStatus(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3GxsServiceVEG_tokenList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2);
  public final static native boolean p3GxsServiceVEG_popRequestInList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_popRequestOutList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_loadRequestOutList(long jarg1, p3GxsServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsServiceVEG_fakeprocessrequests(long jarg1, p3GxsServiceVEG jarg1_);
  public final static native void delete_p3GxsServiceVEG(long jarg1);
  public final static native long new_GxsDataProxyVEG();
  public final static native boolean GxsDataProxyVEG_getGroupList(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean GxsDataProxyVEG_getMsgList(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean GxsDataProxyVEG_getMsgRelatedList(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean GxsDataProxyVEG_createGroup(long jarg1, GxsDataProxyVEG jarg1_, long jarg2);
  public final static native boolean GxsDataProxyVEG_createMsg(long jarg1, GxsDataProxyVEG jarg1_, long jarg2);
  public final static native boolean GxsDataProxyVEG_convertGroupToMetaData(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, RsGroupMetaData jarg3_);
  public final static native boolean GxsDataProxyVEG_convertMsgToMetaData(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, RsMsgMetaData jarg3_);
  public final static native boolean GxsDataProxyVEG_getGroupSummary__SWIG_0(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean GxsDataProxyVEG_getMsgSummary__SWIG_0(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean GxsDataProxyVEG_getGroupSummary__SWIG_1(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, RsGroupMetaData jarg3_);
  public final static native boolean GxsDataProxyVEG_getMsgSummary__SWIG_1(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, RsMsgMetaData jarg3_);
  public final static native boolean GxsDataProxyVEG_getGroupData(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean GxsDataProxyVEG_getMsgData(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean GxsDataProxyVEG_isUniqueGroup(long jarg1, GxsDataProxyVEG jarg1_, long jarg2);
  public final static native boolean GxsDataProxyVEG_isUniqueMsg(long jarg1, GxsDataProxyVEG jarg1_, long jarg2);
  public final static native boolean GxsDataProxyVEG_setMessageStatus(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean GxsDataProxyVEG_setGroupStatus(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean GxsDataProxyVEG_setGroupSubscribeFlags(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean GxsDataProxyVEG_setMessageServiceString(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean GxsDataProxyVEG_setGroupServiceString(long jarg1, GxsDataProxyVEG jarg1_, long jarg2, long jarg3);
  public final static native void delete_GxsDataProxyVEG(long jarg1);
  public final static native long new_p3GxsDataServiceVEG(int jarg1, long jarg2, GxsDataProxyVEG jarg2_);
  public final static native boolean p3GxsDataServiceVEG_fakeprocessrequests(long jarg1, p3GxsDataServiceVEG jarg1_);
  public final static native void delete_p3GxsDataServiceVEG(long jarg1);
  public final static native void rsPostedVEG_set(long jarg1, RsPostedVEG jarg1_);
  public final static native long rsPostedVEG_get();
  public final static native long new_RsPostedMsg(long jarg1);
  public final static native void RsPostedMsg_mMeta_set(long jarg1, RsPostedMsg jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsPostedMsg_mMeta_get(long jarg1, RsPostedMsg jarg1_);
  public final static native void RsPostedMsg_postedType_set(long jarg1, RsPostedMsg jarg1_, long jarg2);
  public final static native long RsPostedMsg_postedType_get(long jarg1, RsPostedMsg jarg1_);
  public final static native void delete_RsPostedMsg(long jarg1);
  public final static native int RSPOSTED_MSGTYPE_POST_get();
  public final static native int RSPOSTED_MSGTYPE_VOTE_get();
  public final static native int RSPOSTED_MSGTYPE_COMMENT_get();
  public final static native long new_RsPostedVote();
  public final static native void delete_RsPostedVote(long jarg1);
  public final static native long new_RsPostedComment();
  public final static native void RsPostedComment_mComment_set(long jarg1, RsPostedComment jarg1_, long jarg2);
  public final static native long RsPostedComment_mComment_get(long jarg1, RsPostedComment jarg1_);
  public final static native void delete_RsPostedComment(long jarg1);
  public final static native void delete_RsPostedVEG(long jarg1);
  public final static native boolean RsPostedVEG_getGroup(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_);
  public final static native boolean RsPostedVEG_getPost(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean RsPostedVEG_getComment(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedComment jarg3_);
  public final static native boolean RsPostedVEG_submitGroup(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_, boolean jarg4);
  public final static native boolean RsPostedVEG_submitPost(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_, boolean jarg4);
  public final static native boolean RsPostedVEG_submitVote(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedVote jarg3_, boolean jarg4);
  public final static native boolean RsPostedVEG_submitComment(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedComment jarg3_, boolean jarg4);
  public final static native boolean RsPostedVEG_requestRanking(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPostedVEG_getRankedPost(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean RsPostedVEG_extractPostedCache(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsPostedVEG_setViewMode(long jarg1, RsPostedVEG jarg1_, long jarg2);
  public final static native boolean RsPostedVEG_setViewPeriod(long jarg1, RsPostedVEG jarg1_, long jarg2);
  public final static native boolean RsPostedVEG_setViewRange(long jarg1, RsPostedVEG jarg1_, long jarg2, long jarg3);
  public final static native float RsPostedVEG_calcPostScore(long jarg1, RsPostedVEG jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native boolean PostedDataProxy_addGroup(long jarg1, PostedDataProxy jarg1_, long jarg2, RsPostedGroup jarg2_);
  public final static native boolean PostedDataProxy_addPost(long jarg1, PostedDataProxy jarg1_, long jarg2, RsPostedPost jarg2_);
  public final static native boolean PostedDataProxy_addVote(long jarg1, PostedDataProxy jarg1_, long jarg2, RsPostedVote jarg2_);
  public final static native boolean PostedDataProxy_addComment(long jarg1, PostedDataProxy jarg1_, long jarg2, RsPostedComment jarg2_);
  public final static native boolean PostedDataProxy_getGroup(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_);
  public final static native boolean PostedDataProxy_getPost(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean PostedDataProxy_getVote(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsPostedVote jarg3_);
  public final static native boolean PostedDataProxy_getComment(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsPostedComment jarg3_);
  public final static native boolean PostedDataProxy_convertGroupToMetaData(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsGroupMetaData jarg3_);
  public final static native boolean PostedDataProxy_convertMsgToMetaData(long jarg1, PostedDataProxy jarg1_, long jarg2, long jarg3, RsMsgMetaData jarg3_);
  public final static native long new_PostedDataProxy();
  public final static native void delete_PostedDataProxy(long jarg1);
  public final static native long new_p3PostedServiceVEG(int jarg1);
  public final static native int p3PostedServiceVEG_tick(long jarg1, p3PostedServiceVEG jarg1_);
  public final static native boolean p3PostedServiceVEG_updated(long jarg1, p3PostedServiceVEG jarg1_);
  public final static native boolean p3PostedServiceVEG_requestGroupInfo(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3PostedServiceVEG_requestMsgInfo(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3PostedServiceVEG_requestMsgRelatedInfo(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3PostedServiceVEG_getGroupList(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_getMsgList(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_getGroupSummary(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_getMsgSummary(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_getGroup(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_);
  public final static native boolean p3PostedServiceVEG_getPost(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean p3PostedServiceVEG_getComment(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedComment jarg3_);
  public final static native long p3PostedServiceVEG_requestStatus(long jarg1, p3PostedServiceVEG jarg1_, long jarg2);
  public final static native boolean p3PostedServiceVEG_cancelRequest(long jarg1, p3PostedServiceVEG jarg1_, long jarg2);
  public final static native boolean p3PostedServiceVEG_setMessageStatus(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PostedServiceVEG_setGroupStatus(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PostedServiceVEG_setGroupSubscribeFlags(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PostedServiceVEG_setMessageServiceString(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_setGroupServiceString(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_groupRestoreKeys(long jarg1, p3PostedServiceVEG jarg1_, long jarg2);
  public final static native boolean p3PostedServiceVEG_groupShareKeys(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_submitGroup(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedGroup jarg3_, boolean jarg4);
  public final static native boolean p3PostedServiceVEG_submitPost(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_, boolean jarg4);
  public final static native boolean p3PostedServiceVEG_submitVote(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedVote jarg3_, boolean jarg4);
  public final static native boolean p3PostedServiceVEG_submitComment(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedComment jarg3_, boolean jarg4);
  public final static native boolean p3PostedServiceVEG_setViewMode(long jarg1, p3PostedServiceVEG jarg1_, long jarg2);
  public final static native boolean p3PostedServiceVEG_setViewPeriod(long jarg1, p3PostedServiceVEG jarg1_, long jarg2);
  public final static native boolean p3PostedServiceVEG_setViewRange(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_requestRanking(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3);
  public final static native boolean p3PostedServiceVEG_getRankedPost(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, RsPostedPost jarg3_);
  public final static native boolean p3PostedServiceVEG_encodePostedCache(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3PostedServiceVEG_extractPostedCache(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native float p3PostedServiceVEG_calcPostScore(long jarg1, p3PostedServiceVEG jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native void delete_p3PostedServiceVEG(long jarg1);
  public final static native int RS_PKT_SUBTYPE_BWCTRL_ALLOWED_ITEM_get();
  public final static native long new_RsBwCtrlAllowedItem();
  public final static native void delete_RsBwCtrlAllowedItem(long jarg1);
  public final static native void RsBwCtrlAllowedItem_clear(long jarg1, RsBwCtrlAllowedItem jarg1_);
  public final static native long RsBwCtrlAllowedItem_print__SWIG_0(long jarg1, RsBwCtrlAllowedItem jarg1_, long jarg2, int jarg3);
  public final static native long RsBwCtrlAllowedItem_print__SWIG_1(long jarg1, RsBwCtrlAllowedItem jarg1_, long jarg2);
  public final static native void RsBwCtrlAllowedItem_allowedBw_set(long jarg1, RsBwCtrlAllowedItem jarg1_, long jarg2);
  public final static native long RsBwCtrlAllowedItem_allowedBw_get(long jarg1, RsBwCtrlAllowedItem jarg1_);
  public final static native long new_RsBwCtrlSerialiser();
  public final static native void delete_RsBwCtrlSerialiser(long jarg1);
  public final static native long RsBwCtrlSerialiser_size(long jarg1, RsBwCtrlSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsBwCtrlSerialiser_serialise(long jarg1, RsBwCtrlSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsBwCtrlSerialiser_deserialise(long jarg1, RsBwCtrlSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void rsConfig_set(long jarg1, RsServerConfig jarg1_);
  public final static native long rsConfig_get();
  public final static native int RSNET_NETWORK_UNKNOWN_get();
  public final static native int RSNET_NETWORK_RESTARTING_get();
  public final static native int RSNET_NETWORK_OFFLINE_get();
  public final static native int RSNET_NETWORK_LOCALNET_get();
  public final static native int RSNET_NETWORK_BEHINDNAT_get();
  public final static native int RSNET_NETWORK_EXTERNALIP_get();
  public final static native int RSNET_NATTYPE_NONE_get();
  public final static native int RSNET_NATTYPE_UNKNOWN_get();
  public final static native int RSNET_NATTYPE_SYMMETRIC_get();
  public final static native int RSNET_NATTYPE_DETERM_SYM_get();
  public final static native int RSNET_NATTYPE_RESTRICTED_CONE_get();
  public final static native int RSNET_NATTYPE_FULL_CONE_get();
  public final static native int RSNET_NATTYPE_OTHER_get();
  public final static native int RSNET_NATHOLE_UNKNOWN_get();
  public final static native int RSNET_NATHOLE_NONE_get();
  public final static native int RSNET_NATHOLE_UPNP_get();
  public final static native int RSNET_NATHOLE_NATPMP_get();
  public final static native int RSNET_NATHOLE_FORWARDED_get();
  public final static native int RSNET_CONNECT_NONE_get();
  public final static native int RSNET_CONNECT_ACCEPT_TCP_get();
  public final static native int RSNET_CONNECT_OUTGOING_TCP_get();
  public final static native int RSNET_CONNECT_DIRECT_UDP_get();
  public final static native int RSNET_CONNECT_PROXY_UDP_get();
  public final static native int RSNET_CONNECT_RELAY_UDP_get();
  public final static native int RSNET_NETSTATE_BAD_UNKNOWN_get();
  public final static native int RSNET_NETSTATE_BAD_OFFLINE_get();
  public final static native int RSNET_NETSTATE_BAD_NATSYM_get();
  public final static native int RSNET_NETSTATE_BAD_NODHT_NAT_get();
  public final static native int RSNET_NETSTATE_WARNING_RESTART_get();
  public final static native int RSNET_NETSTATE_WARNING_NATTED_get();
  public final static native int RSNET_NETSTATE_WARNING_NODHT_get();
  public final static native int RSNET_NETSTATE_GOOD_get();
  public final static native int RSNET_NETSTATE_ADV_FORWARD_get();
  public final static native int RSNET_NETSTATE_ADV_DARK_FORWARD_get();
  public final static native int UPNP_STATE_UNINITIALISED_get();
  public final static native int UPNP_STATE_UNAVAILABILE_get();
  public final static native int UPNP_STATE_READY_get();
  public final static native int UPNP_STATE_FAILED_TCP_get();
  public final static native int UPNP_STATE_FAILED_UDP_get();
  public final static native int UPNP_STATE_ACTIVE_get();
  public final static native int RSCONFIG_USER_LEVEL_NEW_get();
  public final static native int RSCONFIG_USER_LEVEL_BASIC_get();
  public final static native int RSCONFIG_USER_LEVEL_CASUAL_get();
  public final static native int RSCONFIG_USER_LEVEL_POWER_get();
  public final static native int RSCONFIG_USER_LEVEL_OVERRIDE_get();
  public final static native int RS_CONFIG_ADVANCED_get();
  public final static native int RS_OPMODE_FULL_get();
  public final static native int RS_OPMODE_NOTURTLE_get();
  public final static native int RS_OPMODE_GAMING_get();
  public final static native int RS_OPMODE_MINIMAL_get();
  public final static native long new_RsConfigStartup();
  public final static native void RsConfigStartup_promptAtBoot_set(long jarg1, RsConfigStartup jarg1_, int jarg2);
  public final static native int RsConfigStartup_promptAtBoot_get(long jarg1, RsConfigStartup jarg1_);
  public final static native void delete_RsConfigStartup(long jarg1);
  public final static native long new_RsConfigDataRates();
  public final static native void RsConfigDataRates_mRateIn_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mRateIn_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mRateMaxIn_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mRateMaxIn_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mAllocIn_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mAllocIn_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mAllocTs_set(long jarg1, RsConfigDataRates jarg1_, long jarg2);
  public final static native long RsConfigDataRates_mAllocTs_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mRateOut_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mRateOut_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mRateMaxOut_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mRateMaxOut_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mAllowedOut_set(long jarg1, RsConfigDataRates jarg1_, float jarg2);
  public final static native float RsConfigDataRates_mAllowedOut_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mAllowedTs_set(long jarg1, RsConfigDataRates jarg1_, long jarg2);
  public final static native long RsConfigDataRates_mAllowedTs_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mQueueIn_set(long jarg1, RsConfigDataRates jarg1_, int jarg2);
  public final static native int RsConfigDataRates_mQueueIn_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void RsConfigDataRates_mQueueOut_set(long jarg1, RsConfigDataRates jarg1_, int jarg2);
  public final static native int RsConfigDataRates_mQueueOut_get(long jarg1, RsConfigDataRates jarg1_);
  public final static native void delete_RsConfigDataRates(long jarg1);
  public final static native long new_RsConfigNetStatus();
  public final static native void RsConfigNetStatus_ownId_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_ownId_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_ownName_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_ownName_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_localAddr_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_localAddr_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_localPort_set(long jarg1, RsConfigNetStatus jarg1_, int jarg2);
  public final static native int RsConfigNetStatus_localPort_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_extAddr_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_extAddr_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_extPort_set(long jarg1, RsConfigNetStatus jarg1_, int jarg2);
  public final static native int RsConfigNetStatus_extPort_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_extDynDns_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_extDynDns_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_firewalled_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_firewalled_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_forwardPort_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_forwardPort_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_DHTActive_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_DHTActive_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_uPnPActive_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_uPnPActive_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_uPnPState_set(long jarg1, RsConfigNetStatus jarg1_, int jarg2);
  public final static native int RsConfigNetStatus_uPnPState_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netLocalOk_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_netLocalOk_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netUpnpOk_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_netUpnpOk_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netDhtOk_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_netDhtOk_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netStunOk_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_netStunOk_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netExtAddressOk_set(long jarg1, RsConfigNetStatus jarg1_, boolean jarg2);
  public final static native boolean RsConfigNetStatus_netExtAddressOk_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netDhtNetSize_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_netDhtNetSize_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void RsConfigNetStatus_netDhtRsNetSize_set(long jarg1, RsConfigNetStatus jarg1_, long jarg2);
  public final static native long RsConfigNetStatus_netDhtRsNetSize_get(long jarg1, RsConfigNetStatus jarg1_);
  public final static native void delete_RsConfigNetStatus(long jarg1);
  public final static native void delete_RsServerConfig(long jarg1);
  public final static native int RsServerConfig_getConfigNetStatus(long jarg1, RsServerConfig jarg1_, long jarg2, RsConfigNetStatus jarg2_);
  public final static native int RsServerConfig_getTotalBandwidthRates(long jarg1, RsServerConfig jarg1_, long jarg2, RsConfigDataRates jarg2_);
  public final static native int RsServerConfig_getAllBandwidthRates(long jarg1, RsServerConfig jarg1_, long jarg2);
  public final static native long RsServerConfig_getUserLevel(long jarg1, RsServerConfig jarg1_);
  public final static native long RsServerConfig_getNetState(long jarg1, RsServerConfig jarg1_);
  public final static native long RsServerConfig_getNetworkMode(long jarg1, RsServerConfig jarg1_);
  public final static native long RsServerConfig_getNatTypeMode(long jarg1, RsServerConfig jarg1_);
  public final static native long RsServerConfig_getNatHoleMode(long jarg1, RsServerConfig jarg1_);
  public final static native long RsServerConfig_getConnectModes(long jarg1, RsServerConfig jarg1_);
  public final static native boolean RsServerConfig_getConfigurationOption(long jarg1, RsServerConfig jarg1_, long jarg2, long jarg3);
  public final static native boolean RsServerConfig_setConfigurationOption(long jarg1, RsServerConfig jarg1_, long jarg2, long jarg3);
  public final static native long RsServerConfig_getOperatingMode(long jarg1, RsServerConfig jarg1_);
  public final static native boolean RsServerConfig_setOperatingMode(long jarg1, RsServerConfig jarg1_, long jarg2);
  public final static native int RsServerConfig_SetMaxDataRates(long jarg1, RsServerConfig jarg1_, int jarg2, int jarg3);
  public final static native int RsServerConfig_GetMaxDataRates(long jarg1, RsServerConfig jarg1_, long jarg2, long jarg3);
  public final static native int RsServerConfig_GetCurrentDataRates(long jarg1, RsServerConfig jarg1_, long jarg2, long jarg3);
  public final static native void rsBandwidthControl_set(long jarg1, p3BandwidthControl jarg1_);
  public final static native long rsBandwidthControl_get();
  public final static native long new_BwCtrlData();
  public final static native void BwCtrlData_mRates_set(long jarg1, BwCtrlData jarg1_, long jarg2, RsBwRates jarg2_);
  public final static native long BwCtrlData_mRates_get(long jarg1, BwCtrlData jarg1_);
  public final static native void BwCtrlData_mRateUpdateTs_set(long jarg1, BwCtrlData jarg1_, long jarg2);
  public final static native long BwCtrlData_mRateUpdateTs_get(long jarg1, BwCtrlData jarg1_);
  public final static native void BwCtrlData_mAllocated_set(long jarg1, BwCtrlData jarg1_, long jarg2);
  public final static native long BwCtrlData_mAllocated_get(long jarg1, BwCtrlData jarg1_);
  public final static native void BwCtrlData_mLastSend_set(long jarg1, BwCtrlData jarg1_, long jarg2);
  public final static native long BwCtrlData_mLastSend_get(long jarg1, BwCtrlData jarg1_);
  public final static native void BwCtrlData_mAllowedOut_set(long jarg1, BwCtrlData jarg1_, long jarg2);
  public final static native long BwCtrlData_mAllowedOut_get(long jarg1, BwCtrlData jarg1_);
  public final static native void BwCtrlData_mLastRecvd_set(long jarg1, BwCtrlData jarg1_, long jarg2);
  public final static native long BwCtrlData_mLastRecvd_get(long jarg1, BwCtrlData jarg1_);
  public final static native void delete_BwCtrlData(long jarg1);
  public final static native long new_p3BandwidthControl(long jarg1, pqipersongrp jarg1_);
  public final static native int p3BandwidthControl_tick(long jarg1, p3BandwidthControl jarg1_);
  public final static native int p3BandwidthControl_status(long jarg1, p3BandwidthControl jarg1_);
  public final static native int p3BandwidthControl_getTotalBandwidthRates(long jarg1, p3BandwidthControl jarg1_, long jarg2, RsConfigDataRates jarg2_);
  public final static native int p3BandwidthControl_getAllBandwidthRates(long jarg1, p3BandwidthControl jarg1_, long jarg2);
  public final static native void p3BandwidthControl_statusChange(long jarg1, p3BandwidthControl jarg1_, long jarg2);
  public final static native void delete_p3BandwidthControl(long jarg1);
  public final static native void rsWire_set(long jarg1, RsWire jarg1_);
  public final static native long rsWire_get();
  public final static native void RsWireGroup_mMeta_set(long jarg1, RsWireGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsWireGroup_mMeta_get(long jarg1, RsWireGroup jarg1_);
  public final static native void RsWireGroup_mDescription_set(long jarg1, RsWireGroup jarg1_, long jarg2);
  public final static native long RsWireGroup_mDescription_get(long jarg1, RsWireGroup jarg1_);
  public final static native long new_RsWireGroup();
  public final static native void delete_RsWireGroup(long jarg1);
  public final static native long new_RsWirePlace();
  public final static native void delete_RsWirePlace(long jarg1);
  public final static native void RsWirePulse_mMeta_set(long jarg1, RsWirePulse jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsWirePulse_mMeta_get(long jarg1, RsWirePulse jarg1_);
  public final static native void RsWirePulse_mPulseText_set(long jarg1, RsWirePulse jarg1_, long jarg2);
  public final static native long RsWirePulse_mPulseText_get(long jarg1, RsWirePulse jarg1_);
  public final static native void RsWirePulse_mHashTags_set(long jarg1, RsWirePulse jarg1_, long jarg2);
  public final static native long RsWirePulse_mHashTags_get(long jarg1, RsWirePulse jarg1_);
  public final static native long new_RsWirePulse();
  public final static native void delete_RsWirePulse(long jarg1);
  public final static native void delete_RsWire(long jarg1);
  public final static native boolean RsWire_getGroupData(long jarg1, RsWire jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWire_getPulseData(long jarg1, RsWire jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWire_createGroup(long jarg1, RsWire jarg1_, long jarg2, long jarg3, RsWireGroup jarg3_);
  public final static native boolean RsWire_createPulse(long jarg1, RsWire jarg1_, long jarg2, long jarg3, RsWirePulse jarg3_);
  public final static native long new_p3Wire(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native long p3Wire_wireAuthenPolicy();
  public final static native void p3Wire_service_tick(long jarg1, p3Wire jarg1_);
  public final static native boolean p3Wire_getGroupData(long jarg1, p3Wire jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wire_getPulseData(long jarg1, p3Wire jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wire_createGroup(long jarg1, p3Wire jarg1_, long jarg2, long jarg3, RsWireGroup jarg3_);
  public final static native boolean p3Wire_createPulse(long jarg1, p3Wire jarg1_, long jarg2, long jarg3, RsWirePulse jarg3_);
  public final static native void delete_p3Wire(long jarg1);
  public final static native int DEFAULT_MEM_CACHE_SIZE_get();
  public final static native boolean SSBit_load(long jarg1, SSBit jarg1_, long jarg2);
  public final static native long SSBit_save(long jarg1, SSBit jarg1_);
  public final static native void delete_SSBit(long jarg1);
  public final static native long new_SSGxsIdPgp();
  public final static native boolean SSGxsIdPgp_load(long jarg1, SSGxsIdPgp jarg1_, long jarg2);
  public final static native long SSGxsIdPgp_save(long jarg1, SSGxsIdPgp jarg1_);
  public final static native void SSGxsIdPgp_idKnown_set(long jarg1, SSGxsIdPgp jarg1_, boolean jarg2);
  public final static native boolean SSGxsIdPgp_idKnown_get(long jarg1, SSGxsIdPgp jarg1_);
  public final static native void SSGxsIdPgp_lastCheckTs_set(long jarg1, SSGxsIdPgp jarg1_, long jarg2);
  public final static native long SSGxsIdPgp_lastCheckTs_get(long jarg1, SSGxsIdPgp jarg1_);
  public final static native void SSGxsIdPgp_checkAttempts_set(long jarg1, SSGxsIdPgp jarg1_, long jarg2);
  public final static native long SSGxsIdPgp_checkAttempts_get(long jarg1, SSGxsIdPgp jarg1_);
  public final static native void SSGxsIdPgp_pgpId_set(long jarg1, SSGxsIdPgp jarg1_, long jarg2);
  public final static native long SSGxsIdPgp_pgpId_get(long jarg1, SSGxsIdPgp jarg1_);
  public final static native void delete_SSGxsIdPgp(long jarg1);
  public final static native long new_SSGxsIdScore();
  public final static native boolean SSGxsIdScore_load(long jarg1, SSGxsIdScore jarg1_, long jarg2);
  public final static native long SSGxsIdScore_save(long jarg1, SSGxsIdScore jarg1_);
  public final static native void SSGxsIdScore_score_set(long jarg1, SSGxsIdScore jarg1_, int jarg2);
  public final static native int SSGxsIdScore_score_get(long jarg1, SSGxsIdScore jarg1_);
  public final static native void delete_SSGxsIdScore(long jarg1);
  public final static native long new_SSGxsIdCumulator();
  public final static native boolean SSGxsIdCumulator_load(long jarg1, SSGxsIdCumulator jarg1_, long jarg2);
  public final static native long SSGxsIdCumulator_save(long jarg1, SSGxsIdCumulator jarg1_);
  public final static native void SSGxsIdCumulator_count_set(long jarg1, SSGxsIdCumulator jarg1_, long jarg2);
  public final static native long SSGxsIdCumulator_count_get(long jarg1, SSGxsIdCumulator jarg1_);
  public final static native void SSGxsIdCumulator_nullcount_set(long jarg1, SSGxsIdCumulator jarg1_, long jarg2);
  public final static native long SSGxsIdCumulator_nullcount_get(long jarg1, SSGxsIdCumulator jarg1_);
  public final static native void SSGxsIdCumulator_sum_set(long jarg1, SSGxsIdCumulator jarg1_, double jarg2);
  public final static native double SSGxsIdCumulator_sum_get(long jarg1, SSGxsIdCumulator jarg1_);
  public final static native void SSGxsIdCumulator_sumsq_set(long jarg1, SSGxsIdCumulator jarg1_, double jarg2);
  public final static native double SSGxsIdCumulator_sumsq_get(long jarg1, SSGxsIdCumulator jarg1_);
  public final static native void delete_SSGxsIdCumulator(long jarg1);
  public final static native long new_SSGxsIdGroup();
  public final static native boolean SSGxsIdGroup_load(long jarg1, SSGxsIdGroup jarg1_, long jarg2);
  public final static native long SSGxsIdGroup_save(long jarg1, SSGxsIdGroup jarg1_);
  public final static native void SSGxsIdGroup_pgp_set(long jarg1, SSGxsIdGroup jarg1_, long jarg2, SSGxsIdPgp jarg2_);
  public final static native long SSGxsIdGroup_pgp_get(long jarg1, SSGxsIdGroup jarg1_);
  public final static native void SSGxsIdGroup_score_set(long jarg1, SSGxsIdGroup jarg1_, long jarg2, SSGxsIdScore jarg2_);
  public final static native long SSGxsIdGroup_score_get(long jarg1, SSGxsIdGroup jarg1_);
  public final static native void SSGxsIdGroup_opinion_set(long jarg1, SSGxsIdGroup jarg1_, long jarg2, SSGxsIdCumulator jarg2_);
  public final static native long SSGxsIdGroup_opinion_get(long jarg1, SSGxsIdGroup jarg1_);
  public final static native void SSGxsIdGroup_reputation_set(long jarg1, SSGxsIdGroup jarg1_, long jarg2, SSGxsIdCumulator jarg2_);
  public final static native long SSGxsIdGroup_reputation_get(long jarg1, SSGxsIdGroup jarg1_);
  public final static native void delete_SSGxsIdGroup(long jarg1);
  public final static native int ID_LOCAL_STATUS_FULL_CALC_FLAG_get();
  public final static native int ID_LOCAL_STATUS_INC_CALC_FLAG_get();
  public final static native int MAX_CACHE_SIZE_get();
  public final static native long new_RsGxsIdCache__SWIG_0();
  public final static native long new_RsGxsIdCache__SWIG_1(long jarg1, RsGxsIdGroupItem jarg1_, long jarg2, RsTlvSecurityKey jarg2_);
  public final static native void RsGxsIdCache_updateServiceString(long jarg1, RsGxsIdCache jarg1_, long jarg2);
  public final static native void RsGxsIdCache_details_set(long jarg1, RsGxsIdCache jarg1_, long jarg2, RsIdentityDetails jarg2_);
  public final static native long RsGxsIdCache_details_get(long jarg1, RsGxsIdCache jarg1_);
  public final static native void RsGxsIdCache_pubkey_set(long jarg1, RsGxsIdCache jarg1_, long jarg2, RsTlvSecurityKey jarg2_);
  public final static native long RsGxsIdCache_pubkey_get(long jarg1, RsGxsIdCache jarg1_);
  public final static native void delete_RsGxsIdCache(long jarg1);
  public final static native long new_p3IdService(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_);
  public final static native long p3IdService_idAuthenPolicy();
  public final static native void p3IdService_service_tick(long jarg1, p3IdService jarg1_);
  public final static native boolean p3IdService_getGroupData(long jarg1, p3IdService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3IdService_getMsgData(long jarg1, p3IdService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3IdService_createGroup(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsGxsIdGroup jarg3_);
  public final static native boolean p3IdService_createMsg(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsGxsIdOpinion jarg3_);
  public final static native boolean p3IdService_getIdDetails(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsIdentityDetails jarg3_);
  public final static native boolean p3IdService_getOwnIds(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native boolean p3IdService_submitOpinion(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsIdOpinion jarg3_);
  public final static native boolean p3IdService_createIdentity(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsIdentityParameters jarg3_);
  public final static native boolean p3IdService_haveKey(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native boolean p3IdService_requestKey(long jarg1, p3IdService jarg1_, long jarg2, long jarg3);
  public final static native int p3IdService_getKey(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native boolean p3IdService_havePrivateKey(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native boolean p3IdService_requestPrivateKey(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native int p3IdService_getPrivateKey(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, RsTlvSecurityKey jarg3_);
  public final static native boolean p3IdService_haveReputation(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native boolean p3IdService_loadReputation(long jarg1, p3IdService jarg1_, long jarg2);
  public final static native boolean p3IdService_getReputation(long jarg1, p3IdService jarg1_, long jarg2, long jarg3, GixsReputation jarg3_);
  public final static native void delete_p3IdService(long jarg1);
  public final static native int RSDSDV_MAX_ROUTE_TABLE_get();
  public final static native long new_RsTlvDsdvEndPoint();
  public final static native void delete_RsTlvDsdvEndPoint(long jarg1);
  public final static native long RsTlvDsdvEndPoint_TlvSize(long jarg1, RsTlvDsdvEndPoint jarg1_);
  public final static native void RsTlvDsdvEndPoint_TlvClear(long jarg1, RsTlvDsdvEndPoint jarg1_);
  public final static native boolean RsTlvDsdvEndPoint_SetTlv(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvDsdvEndPoint_GetTlv(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvDsdvEndPoint_print(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvDsdvEndPoint_idType_set(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2);
  public final static native long RsTlvDsdvEndPoint_idType_get(long jarg1, RsTlvDsdvEndPoint jarg1_);
  public final static native void RsTlvDsdvEndPoint_anonChunk_set(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2);
  public final static native long RsTlvDsdvEndPoint_anonChunk_get(long jarg1, RsTlvDsdvEndPoint jarg1_);
  public final static native void RsTlvDsdvEndPoint_serviceId_set(long jarg1, RsTlvDsdvEndPoint jarg1_, long jarg2);
  public final static native long RsTlvDsdvEndPoint_serviceId_get(long jarg1, RsTlvDsdvEndPoint jarg1_);
  public final static native long new_RsTlvDsdvEntry();
  public final static native void delete_RsTlvDsdvEntry(long jarg1);
  public final static native long RsTlvDsdvEntry_TlvSize(long jarg1, RsTlvDsdvEntry jarg1_);
  public final static native void RsTlvDsdvEntry_TlvClear(long jarg1, RsTlvDsdvEntry jarg1_);
  public final static native boolean RsTlvDsdvEntry_SetTlv(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvDsdvEntry_GetTlv(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvDsdvEntry_print(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvDsdvEntry_endPoint_set(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2, RsTlvDsdvEndPoint jarg2_);
  public final static native long RsTlvDsdvEntry_endPoint_get(long jarg1, RsTlvDsdvEntry jarg1_);
  public final static native void RsTlvDsdvEntry_sequence_set(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2);
  public final static native long RsTlvDsdvEntry_sequence_get(long jarg1, RsTlvDsdvEntry jarg1_);
  public final static native void RsTlvDsdvEntry_distance_set(long jarg1, RsTlvDsdvEntry jarg1_, long jarg2);
  public final static native long RsTlvDsdvEntry_distance_get(long jarg1, RsTlvDsdvEntry jarg1_);
  public final static native long new_RsTlvDsdvEntrySet();
  public final static native void delete_RsTlvDsdvEntrySet(long jarg1);
  public final static native long RsTlvDsdvEntrySet_TlvSize(long jarg1, RsTlvDsdvEntrySet jarg1_);
  public final static native void RsTlvDsdvEntrySet_TlvClear(long jarg1, RsTlvDsdvEntrySet jarg1_);
  public final static native boolean RsTlvDsdvEntrySet_SetTlv(long jarg1, RsTlvDsdvEntrySet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvDsdvEntrySet_GetTlv(long jarg1, RsTlvDsdvEntrySet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvDsdvEntrySet_print(long jarg1, RsTlvDsdvEntrySet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvDsdvEntrySet_entries_set(long jarg1, RsTlvDsdvEntrySet jarg1_, long jarg2);
  public final static native long RsTlvDsdvEntrySet_entries_get(long jarg1, RsTlvDsdvEntrySet jarg1_);
  public final static native int RS_PKT_SUBTYPE_DSDV_ROUTE_get();
  public final static native int RS_PKT_SUBTYPE_DSDV_DATA_get();
  public final static native long new_RsDsdvRouteItem();
  public final static native void delete_RsDsdvRouteItem(long jarg1);
  public final static native void RsDsdvRouteItem_clear(long jarg1, RsDsdvRouteItem jarg1_);
  public final static native long RsDsdvRouteItem_print__SWIG_0(long jarg1, RsDsdvRouteItem jarg1_, long jarg2, int jarg3);
  public final static native long RsDsdvRouteItem_print__SWIG_1(long jarg1, RsDsdvRouteItem jarg1_, long jarg2);
  public final static native void RsDsdvRouteItem_routes_set(long jarg1, RsDsdvRouteItem jarg1_, long jarg2, RsTlvDsdvEntrySet jarg2_);
  public final static native long RsDsdvRouteItem_routes_get(long jarg1, RsDsdvRouteItem jarg1_);
  public final static native long new_RsDsdvDataItem();
  public final static native void delete_RsDsdvDataItem(long jarg1);
  public final static native void RsDsdvDataItem_clear(long jarg1, RsDsdvDataItem jarg1_);
  public final static native long RsDsdvDataItem_print__SWIG_0(long jarg1, RsDsdvDataItem jarg1_, long jarg2, int jarg3);
  public final static native long RsDsdvDataItem_print__SWIG_1(long jarg1, RsDsdvDataItem jarg1_, long jarg2);
  public final static native void RsDsdvDataItem_src_set(long jarg1, RsDsdvDataItem jarg1_, long jarg2, RsTlvDsdvEndPoint jarg2_);
  public final static native long RsDsdvDataItem_src_get(long jarg1, RsDsdvDataItem jarg1_);
  public final static native void RsDsdvDataItem_dest_set(long jarg1, RsDsdvDataItem jarg1_, long jarg2, RsTlvDsdvEndPoint jarg2_);
  public final static native long RsDsdvDataItem_dest_get(long jarg1, RsDsdvDataItem jarg1_);
  public final static native void RsDsdvDataItem_ttl_set(long jarg1, RsDsdvDataItem jarg1_, long jarg2);
  public final static native long RsDsdvDataItem_ttl_get(long jarg1, RsDsdvDataItem jarg1_);
  public final static native void RsDsdvDataItem_data_set(long jarg1, RsDsdvDataItem jarg1_, long jarg2, RsTlvBinaryData jarg2_);
  public final static native long RsDsdvDataItem_data_get(long jarg1, RsDsdvDataItem jarg1_);
  public final static native long new_RsDsdvSerialiser();
  public final static native void delete_RsDsdvSerialiser(long jarg1);
  public final static native long RsDsdvSerialiser_size(long jarg1, RsDsdvSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsDsdvSerialiser_serialise(long jarg1, RsDsdvSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsDsdvSerialiser_deserialise(long jarg1, RsDsdvSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void rsDsdv_set(long jarg1, RsDsdv jarg1_);
  public final static native long rsDsdv_get();
  public final static native int RSDSDV_IDTYPE_PEER_get();
  public final static native int RSDSDV_IDTYPE_SERVICE_get();
  public final static native int RSDSDV_IDTYPE_TEST_get();
  public final static native int RSDSDV_FLAGS_SIGNIFICANT_CHANGE_get();
  public final static native int RSDSDV_FLAGS_STABLE_ROUTE_get();
  public final static native int RSDSDV_FLAGS_NEW_ROUTE_get();
  public final static native int RSDSDV_FLAGS_OWN_SERVICE_get();
  public final static native void RsDsdvId_mIdType_set(long jarg1, RsDsdvId jarg1_, long jarg2);
  public final static native long RsDsdvId_mIdType_get(long jarg1, RsDsdvId jarg1_);
  public final static native void RsDsdvId_mAnonChunk_set(long jarg1, RsDsdvId jarg1_, long jarg2);
  public final static native long RsDsdvId_mAnonChunk_get(long jarg1, RsDsdvId jarg1_);
  public final static native void RsDsdvId_mHash_set(long jarg1, RsDsdvId jarg1_, long jarg2);
  public final static native long RsDsdvId_mHash_get(long jarg1, RsDsdvId jarg1_);
  public final static native long new_RsDsdvId();
  public final static native void delete_RsDsdvId(long jarg1);
  public final static native void RsDsdvRoute_mNextHop_set(long jarg1, RsDsdvRoute jarg1_, long jarg2);
  public final static native long RsDsdvRoute_mNextHop_get(long jarg1, RsDsdvRoute jarg1_);
  public final static native void RsDsdvRoute_mSequence_set(long jarg1, RsDsdvRoute jarg1_, long jarg2);
  public final static native long RsDsdvRoute_mSequence_get(long jarg1, RsDsdvRoute jarg1_);
  public final static native void RsDsdvRoute_mDistance_set(long jarg1, RsDsdvRoute jarg1_, long jarg2);
  public final static native long RsDsdvRoute_mDistance_get(long jarg1, RsDsdvRoute jarg1_);
  public final static native void RsDsdvRoute_mReceived_set(long jarg1, RsDsdvRoute jarg1_, long jarg2);
  public final static native long RsDsdvRoute_mReceived_get(long jarg1, RsDsdvRoute jarg1_);
  public final static native void RsDsdvRoute_mValidSince_set(long jarg1, RsDsdvRoute jarg1_, long jarg2);
  public final static native long RsDsdvRoute_mValidSince_get(long jarg1, RsDsdvRoute jarg1_);
  public final static native long new_RsDsdvRoute();
  public final static native void delete_RsDsdvRoute(long jarg1);
  public final static native void RsDsdvTableEntry_mDest_set(long jarg1, RsDsdvTableEntry jarg1_, long jarg2, RsDsdvId jarg2_);
  public final static native long RsDsdvTableEntry_mDest_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mIsStable_set(long jarg1, RsDsdvTableEntry jarg1_, boolean jarg2);
  public final static native boolean RsDsdvTableEntry_mIsStable_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mStableRoute_set(long jarg1, RsDsdvTableEntry jarg1_, long jarg2, RsDsdvRoute jarg2_);
  public final static native long RsDsdvTableEntry_mStableRoute_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mAllRoutes_set(long jarg1, RsDsdvTableEntry jarg1_, long jarg2);
  public final static native long RsDsdvTableEntry_mAllRoutes_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mFlags_set(long jarg1, RsDsdvTableEntry jarg1_, long jarg2);
  public final static native long RsDsdvTableEntry_mFlags_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mMatchedHash_set(long jarg1, RsDsdvTableEntry jarg1_, long jarg2);
  public final static native long RsDsdvTableEntry_mMatchedHash_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mMatched_set(long jarg1, RsDsdvTableEntry jarg1_, boolean jarg2);
  public final static native boolean RsDsdvTableEntry_mMatched_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native void RsDsdvTableEntry_mOwnSource_set(long jarg1, RsDsdvTableEntry jarg1_, boolean jarg2);
  public final static native boolean RsDsdvTableEntry_mOwnSource_get(long jarg1, RsDsdvTableEntry jarg1_);
  public final static native long new_RsDsdvTableEntry();
  public final static native void delete_RsDsdvTableEntry(long jarg1);
  public final static native void delete_RsDsdv(long jarg1);
  public final static native long RsDsdv_getLocalServices(long jarg1, RsDsdv jarg1_, long jarg2);
  public final static native long RsDsdv_getAllServices(long jarg1, RsDsdv jarg1_, long jarg2);
  public final static native int RsDsdv_getDsdvEntry(long jarg1, RsDsdv jarg1_, long jarg2, long jarg3, RsDsdvTableEntry jarg3_);
  public final static native int RSDSDV_MAX_DISTANCE_get();
  public final static native int RSDSDV_MAX_SEND_TABLE_get();
  public final static native long new_p3Dsdv(long jarg1, p3LinkMgr jarg1_);
  public final static native int p3Dsdv_addDsdvId(long jarg1, p3Dsdv jarg1_, long jarg2, RsDsdvId jarg2_, long jarg3);
  public final static native int p3Dsdv_dropDsdvId(long jarg1, p3Dsdv jarg1_, long jarg2, RsDsdvId jarg2_);
  public final static native int p3Dsdv_printDsdvTable(long jarg1, p3Dsdv jarg1_, long jarg2);
  public final static native int p3Dsdv_addTestService(long jarg1, p3Dsdv jarg1_);
  public final static native long p3Dsdv_getLocalServices(long jarg1, p3Dsdv jarg1_, long jarg2);
  public final static native long p3Dsdv_getAllServices(long jarg1, p3Dsdv jarg1_, long jarg2);
  public final static native int p3Dsdv_getDsdvEntry(long jarg1, p3Dsdv jarg1_, long jarg2, long jarg3, RsDsdvTableEntry jarg3_);
  public final static native int p3Dsdv_tick(long jarg1, p3Dsdv jarg1_);
  public final static native int p3Dsdv_status(long jarg1, p3Dsdv jarg1_);
  public final static native void p3Dsdv_statusChange(long jarg1, p3Dsdv jarg1_, long jarg2);
  public final static native void delete_p3Dsdv(long jarg1);
  public final static native long new_RsGameItem();
  public final static native void delete_RsGameItem(long jarg1);
  public final static native void RsGameItem_clear(long jarg1, RsGameItem jarg1_);
  public final static native long RsGameItem_print__SWIG_0(long jarg1, RsGameItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGameItem_print__SWIG_1(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native void RsGameItem_serviceId_set(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native long RsGameItem_serviceId_get(long jarg1, RsGameItem jarg1_);
  public final static native void RsGameItem_numPlayers_set(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native long RsGameItem_numPlayers_get(long jarg1, RsGameItem jarg1_);
  public final static native void RsGameItem_msg_set(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native long RsGameItem_msg_get(long jarg1, RsGameItem jarg1_);
  public final static native void RsGameItem_gameId_set(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native long RsGameItem_gameId_get(long jarg1, RsGameItem jarg1_);
  public final static native void RsGameItem_gameComment_set(long jarg1, RsGameItem jarg1_, long jarg2);
  public final static native long RsGameItem_gameComment_get(long jarg1, RsGameItem jarg1_);
  public final static native void RsGameItem_players_set(long jarg1, RsGameItem jarg1_, long jarg2, RsTlvPeerIdSet jarg2_);
  public final static native long RsGameItem_players_get(long jarg1, RsGameItem jarg1_);
  public final static native long new_RsGameSerialiser();
  public final static native void delete_RsGameSerialiser(long jarg1);
  public final static native long RsGameSerialiser_size(long jarg1, RsGameSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGameSerialiser_serialise(long jarg1, RsGameSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGameSerialiser_deserialise(long jarg1, RsGameSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void rsGameLauncher_set(long jarg1, RsGameLauncher jarg1_);
  public final static native long rsGameLauncher_get();
  public final static native void RsGameInfo_gameId_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_gameId_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_serverId_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_serverId_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_gameType_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_gameType_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_gameName_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_gameName_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_serverName_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_serverName_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_status_set(long jarg1, RsGameInfo jarg1_, long jarg2);
  public final static native long RsGameInfo_status_get(long jarg1, RsGameInfo jarg1_);
  public final static native void RsGameInfo_numPlayers_set(long jarg1, RsGameInfo jarg1_, int jarg2);
  public final static native int RsGameInfo_numPlayers_get(long jarg1, RsGameInfo jarg1_);
  public final static native long new_RsGameInfo();
  public final static native void delete_RsGameInfo(long jarg1);
  public final static native void RsGamePeer_id_set(long jarg1, RsGamePeer jarg1_, long jarg2);
  public final static native long RsGamePeer_id_get(long jarg1, RsGamePeer jarg1_);
  public final static native void RsGamePeer_invite_set(long jarg1, RsGamePeer jarg1_, boolean jarg2);
  public final static native boolean RsGamePeer_invite_get(long jarg1, RsGamePeer jarg1_);
  public final static native void RsGamePeer_interested_set(long jarg1, RsGamePeer jarg1_, boolean jarg2);
  public final static native boolean RsGamePeer_interested_get(long jarg1, RsGamePeer jarg1_);
  public final static native void RsGamePeer_play_set(long jarg1, RsGamePeer jarg1_, boolean jarg2);
  public final static native boolean RsGamePeer_play_get(long jarg1, RsGamePeer jarg1_);
  public final static native long new_RsGamePeer();
  public final static native void delete_RsGamePeer(long jarg1);
  public final static native void RsGameDetail_gameId_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_gameId_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_gameType_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_gameType_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_gameName_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_gameName_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_areServer_set(long jarg1, RsGameDetail jarg1_, boolean jarg2);
  public final static native boolean RsGameDetail_areServer_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_serverId_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_serverId_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_serverName_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_serverName_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_status_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_status_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_numPlayers_set(long jarg1, RsGameDetail jarg1_, int jarg2);
  public final static native int RsGameDetail_numPlayers_get(long jarg1, RsGameDetail jarg1_);
  public final static native void RsGameDetail_gamers_set(long jarg1, RsGameDetail jarg1_, long jarg2);
  public final static native long RsGameDetail_gamers_get(long jarg1, RsGameDetail jarg1_);
  public final static native long new_RsGameDetail();
  public final static native void delete_RsGameDetail(long jarg1);
  public final static native long RsGameLauncher_createGame(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGameLauncher_deleteGame(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_inviteGame(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_playGame(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_invitePeer(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGameLauncher_uninvitePeer(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGameLauncher_confirmPeer__SWIG_0(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3, short jarg4);
  public final static native boolean RsGameLauncher_confirmPeer__SWIG_1(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGameLauncher_unconfirmPeer(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGameLauncher_interestedPeer(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_uninterestedPeer(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_getGameList(long jarg1, RsGameLauncher jarg1_, long jarg2);
  public final static native boolean RsGameLauncher_getGameDetail(long jarg1, RsGameLauncher jarg1_, long jarg2, long jarg3, RsGameDetail jarg3_);
  public final static native void delete_RsGameLauncher(long jarg1);
  public final static native long new_gameAvail();
  public final static native void delete_gameAvail(long jarg1);
  public final static native void gameStatus_serviceId_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_serviceId_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_gameId_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_gameId_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_gameName_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_gameName_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_areServer_set(long jarg1, gameStatus jarg1_, boolean jarg2);
  public final static native boolean gameStatus_areServer_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_serverId_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_serverId_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_numPlayers_set(long jarg1, gameStatus jarg1_, int jarg2);
  public final static native int gameStatus_numPlayers_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_allowedPeers_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_allowedPeers_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_interestedPeers_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_interestedPeers_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_peerIds_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_peerIds_get(long jarg1, gameStatus jarg1_);
  public final static native void gameStatus_state_set(long jarg1, gameStatus jarg1_, long jarg2);
  public final static native long gameStatus_state_get(long jarg1, gameStatus jarg1_);
  public final static native long new_gameStatus();
  public final static native void delete_gameStatus(long jarg1);
  public final static native long new_p3GameLauncher(long jarg1, p3LinkMgr jarg1_);
  public final static native long p3GameLauncher_createGame(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GameLauncher_deleteGame(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_inviteGame(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_playGame(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_invitePeer(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GameLauncher_uninvitePeer(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GameLauncher_confirmPeer__SWIG_0(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3, short jarg4);
  public final static native boolean p3GameLauncher_confirmPeer__SWIG_1(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GameLauncher_unconfirmPeer(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GameLauncher_interestedPeer(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_uninterestedPeer(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_getGameList(long jarg1, p3GameLauncher jarg1_, long jarg2);
  public final static native boolean p3GameLauncher_getGameDetail(long jarg1, p3GameLauncher jarg1_, long jarg2, long jarg3, RsGameDetail jarg3_);
  public final static native void delete_p3GameLauncher(long jarg1);
  public final static native void rsStatus_set(long jarg1, RsStatus jarg1_);
  public final static native long rsStatus_get();
  public final static native long RS_STATUS_OFFLINE_get();
  public final static native long RS_STATUS_AWAY_get();
  public final static native long RS_STATUS_BUSY_get();
  public final static native long RS_STATUS_ONLINE_get();
  public final static native long RS_STATUS_INACTIVE_get();
  public final static native long RS_STATUS_COUNT_get();
  public final static native long new_StatusInfo();
  public final static native void StatusInfo_id_set(long jarg1, StatusInfo jarg1_, long jarg2);
  public final static native long StatusInfo_id_get(long jarg1, StatusInfo jarg1_);
  public final static native void StatusInfo_status_set(long jarg1, StatusInfo jarg1_, long jarg2);
  public final static native long StatusInfo_status_get(long jarg1, StatusInfo jarg1_);
  public final static native void StatusInfo_time_stamp_set(long jarg1, StatusInfo jarg1_, long jarg2);
  public final static native long StatusInfo_time_stamp_get(long jarg1, StatusInfo jarg1_);
  public final static native void delete_StatusInfo(long jarg1);
  public final static native boolean RsStatus_getOwnStatus(long jarg1, RsStatus jarg1_, long jarg2, StatusInfo jarg2_);
  public final static native boolean RsStatus_getStatusList(long jarg1, RsStatus jarg1_, long jarg2);
  public final static native boolean RsStatus_getStatus(long jarg1, RsStatus jarg1_, long jarg2, long jarg3, StatusInfo jarg3_);
  public final static native boolean RsStatus_sendStatus(long jarg1, RsStatus jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsStatus(long jarg1);
  public final static native long new_p3StatusService(long jarg1, p3LinkMgr jarg1_);
  public final static native void delete_p3StatusService(long jarg1);
  public final static native int p3StatusService_tick(long jarg1, p3StatusService jarg1_);
  public final static native int p3StatusService_status(long jarg1, p3StatusService jarg1_);
  public final static native void p3StatusService_statusChange(long jarg1, p3StatusService jarg1_, long jarg2);
  public final static native boolean p3StatusService_getOwnStatus(long jarg1, p3StatusService jarg1_, long jarg2, StatusInfo jarg2_);
  public final static native boolean p3StatusService_getStatusList(long jarg1, p3StatusService jarg1_, long jarg2);
  public final static native boolean p3StatusService_getStatus(long jarg1, p3StatusService jarg1_, long jarg2, long jarg3, StatusInfo jarg3_);
  public final static native boolean p3StatusService_sendStatus(long jarg1, p3StatusService jarg1_, long jarg2, long jarg3);
  public final static native long p3StatusService_setupSerialiser(long jarg1, p3StatusService jarg1_);
  public final static native boolean p3StatusService_saveList(long jarg1, p3StatusService jarg1_, long jarg2, long jarg3);
  public final static native boolean p3StatusService_loadList(long jarg1, p3StatusService jarg1_, long jarg2);
  public final static native long new_BlogInfo();
  public final static native void BlogInfo_blogId_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_blogId_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_blogName_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_blogName_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_blogDesc_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_blogDesc_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_blogFlags_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_blogFlags_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_pop_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_pop_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_pngChanImage_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_pngChanImage_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_pngImageLen_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_pngImageLen_get(long jarg1, BlogInfo jarg1_);
  public final static native void BlogInfo_lastPost_set(long jarg1, BlogInfo jarg1_, long jarg2);
  public final static native long BlogInfo_lastPost_get(long jarg1, BlogInfo jarg1_);
  public final static native void delete_BlogInfo(long jarg1);
  public final static native long new_BlogMsgInfo();
  public final static native void BlogMsgInfo_blogId_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_blogId_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_msgId_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_msgId_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_msgIdReply_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_msgIdReply_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_msgflags_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_msgflags_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_subject_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_subject_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_msg_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_msg_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_ts_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_ts_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_files_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_files_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_count_set(long jarg1, BlogMsgInfo jarg1_, long jarg2);
  public final static native long BlogMsgInfo_count_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void BlogMsgInfo_size_set(long jarg1, BlogMsgInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger BlogMsgInfo_size_get(long jarg1, BlogMsgInfo jarg1_);
  public final static native void delete_BlogMsgInfo(long jarg1);
  public final static native long new_BlogMsgSummary();
  public final static native void BlogMsgSummary_blogId_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_blogId_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_msgId_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_msgId_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_msgflags_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_msgflags_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_subject_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_subject_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_msg_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_msg_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_msgIdReply_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_msgIdReply_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_count_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_count_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void BlogMsgSummary_ts_set(long jarg1, BlogMsgSummary jarg1_, long jarg2);
  public final static native long BlogMsgSummary_ts_get(long jarg1, BlogMsgSummary jarg1_);
  public final static native void delete_BlogMsgSummary(long jarg1);
  public final static native void rsBlogs_set(long jarg1, RsBlogs jarg1_);
  public final static native long rsBlogs_get();
  public final static native void delete_RsBlogs(long jarg1);
  public final static native boolean RsBlogs_blogsChanged(long jarg1, RsBlogs jarg1_, long jarg2);
  public final static native long RsBlogs_createBlog(long jarg1, RsBlogs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean RsBlogs_getBlogInfo(long jarg1, RsBlogs jarg1_, long jarg2, long jarg3, BlogInfo jarg3_);
  public final static native boolean RsBlogs_getBlogList(long jarg1, RsBlogs jarg1_, long jarg2);
  public final static native boolean RsBlogs_getBlogMsgList(long jarg1, RsBlogs jarg1_, long jarg2, long jarg3);
  public final static native boolean RsBlogs_getBlogMessage(long jarg1, RsBlogs jarg1_, long jarg2, long jarg3, long jarg4, BlogMsgInfo jarg4_);
  public final static native boolean RsBlogs_BlogMessageSend(long jarg1, RsBlogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native boolean RsBlogs_blogSubscribe(long jarg1, RsBlogs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsBlogs_BlogMessageReply(long jarg1, RsBlogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native boolean RsBlogs_isReply(long jarg1, RsBlogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native long new_p3Blogs(int jarg1, long jarg2, CacheStrapper jarg2_, long jarg3, CacheTransfer jarg3_, long jarg4, long jarg5);
  public final static native void delete_p3Blogs(long jarg1);
  public final static native boolean p3Blogs_blogsChanged(long jarg1, p3Blogs jarg1_, long jarg2);
  public final static native long p3Blogs_createBlog(long jarg1, p3Blogs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3Blogs_getBlogInfo(long jarg1, p3Blogs jarg1_, long jarg2, long jarg3, BlogInfo jarg3_);
  public final static native boolean p3Blogs_getBlogList(long jarg1, p3Blogs jarg1_, long jarg2);
  public final static native boolean p3Blogs_getBlogMsgList(long jarg1, p3Blogs jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Blogs_getBlogMessage(long jarg1, p3Blogs jarg1_, long jarg2, long jarg3, long jarg4, BlogMsgInfo jarg4_);
  public final static native boolean p3Blogs_BlogMessageSend(long jarg1, p3Blogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native boolean p3Blogs_blogSubscribe(long jarg1, p3Blogs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Blogs_BlogMessageReply(long jarg1, p3Blogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native boolean p3Blogs_isReply(long jarg1, p3Blogs jarg1_, long jarg2, BlogMsgInfo jarg2_);
  public final static native void rsGxsForums_set(long jarg1, RsGxsForums jarg1_);
  public final static native long rsGxsForums_get();
  public final static native void RsGxsForumGroup_mMeta_set(long jarg1, RsGxsForumGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsGxsForumGroup_mMeta_get(long jarg1, RsGxsForumGroup jarg1_);
  public final static native void RsGxsForumGroup_mDescription_set(long jarg1, RsGxsForumGroup jarg1_, long jarg2);
  public final static native long RsGxsForumGroup_mDescription_get(long jarg1, RsGxsForumGroup jarg1_);
  public final static native long new_RsGxsForumGroup();
  public final static native void delete_RsGxsForumGroup(long jarg1);
  public final static native void RsGxsForumMsg_mMeta_set(long jarg1, RsGxsForumMsg jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsForumMsg_mMeta_get(long jarg1, RsGxsForumMsg jarg1_);
  public final static native void RsGxsForumMsg_mMsg_set(long jarg1, RsGxsForumMsg jarg1_, long jarg2);
  public final static native long RsGxsForumMsg_mMsg_get(long jarg1, RsGxsForumMsg jarg1_);
  public final static native long new_RsGxsForumMsg();
  public final static native void delete_RsGxsForumMsg(long jarg1);
  public final static native void delete_RsGxsForums(long jarg1);
  public final static native boolean RsGxsForums_getGroupData(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsForums_getMsgData(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsForums_getRelatedMessages(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3);
  public final static native void RsGxsForums_setMessageReadStatus(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGxsForums_createGroup(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3, RsGxsForumGroup jarg3_);
  public final static native boolean RsGxsForums_createMsg(long jarg1, RsGxsForums jarg1_, long jarg2, long jarg3, RsGxsForumMsg jarg3_);
  public final static native long new_p3GxsForums(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native void p3GxsForums_service_tick(long jarg1, p3GxsForums jarg1_);
  public final static native boolean p3GxsForums_getGroupData(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsForums_getMsgData(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsForums_getRelatedMessages(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3);
  public final static native void p3GxsForums_setMessageReadStatus(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3GxsForums_createGroup(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3, RsGxsForumGroup jarg3_);
  public final static native boolean p3GxsForums_createMsg(long jarg1, p3GxsForums jarg1_, long jarg2, long jarg3, RsGxsForumMsg jarg3_);
  public final static native void delete_p3GxsForums(long jarg1);
  public final static native short RS_PKT_SUBTYPE_DISC_REPLY_get();
  public final static native short RS_PKT_SUBTYPE_DISC_ASK_INFO_get();
  public final static native short RS_PKT_SUBTYPE_DISC_VERSION_get();
  public final static native short RS_PKT_SUBTYPE_DISC_HEARTBEAT_get();
  public final static native void delete_RsDiscItem(long jarg1);
  public final static native long new_RsDiscReply();
  public final static native void delete_RsDiscReply(long jarg1);
  public final static native void RsDiscReply_clear(long jarg1, RsDiscReply jarg1_);
  public final static native long RsDiscReply_print__SWIG_0(long jarg1, RsDiscReply jarg1_, long jarg2, int jarg3);
  public final static native long RsDiscReply_print__SWIG_1(long jarg1, RsDiscReply jarg1_, long jarg2);
  public final static native void RsDiscReply_rsPeerList_set(long jarg1, RsDiscReply jarg1_, long jarg2);
  public final static native long RsDiscReply_rsPeerList_get(long jarg1, RsDiscReply jarg1_);
  public final static native void RsDiscReply_aboutId_set(long jarg1, RsDiscReply jarg1_, long jarg2);
  public final static native long RsDiscReply_aboutId_get(long jarg1, RsDiscReply jarg1_);
  public final static native void RsDiscReply_certGPG_set(long jarg1, RsDiscReply jarg1_, long jarg2);
  public final static native long RsDiscReply_certGPG_get(long jarg1, RsDiscReply jarg1_);
  public final static native long new_RsDiscAskInfo();
  public final static native void delete_RsDiscAskInfo(long jarg1);
  public final static native void RsDiscAskInfo_clear(long jarg1, RsDiscAskInfo jarg1_);
  public final static native long RsDiscAskInfo_print__SWIG_0(long jarg1, RsDiscAskInfo jarg1_, long jarg2, int jarg3);
  public final static native long RsDiscAskInfo_print__SWIG_1(long jarg1, RsDiscAskInfo jarg1_, long jarg2);
  public final static native void RsDiscAskInfo_gpg_id_set(long jarg1, RsDiscAskInfo jarg1_, long jarg2);
  public final static native long RsDiscAskInfo_gpg_id_get(long jarg1, RsDiscAskInfo jarg1_);
  public final static native long new_RsDiscVersion();
  public final static native void delete_RsDiscVersion(long jarg1);
  public final static native void RsDiscVersion_clear(long jarg1, RsDiscVersion jarg1_);
  public final static native long RsDiscVersion_print__SWIG_0(long jarg1, RsDiscVersion jarg1_, long jarg2, int jarg3);
  public final static native long RsDiscVersion_print__SWIG_1(long jarg1, RsDiscVersion jarg1_, long jarg2);
  public final static native void RsDiscVersion_version_set(long jarg1, RsDiscVersion jarg1_, long jarg2);
  public final static native long RsDiscVersion_version_get(long jarg1, RsDiscVersion jarg1_);
  public final static native long new_RsDiscHeartbeat();
  public final static native void delete_RsDiscHeartbeat(long jarg1);
  public final static native void RsDiscHeartbeat_clear(long jarg1, RsDiscHeartbeat jarg1_);
  public final static native long RsDiscHeartbeat_print__SWIG_0(long jarg1, RsDiscHeartbeat jarg1_, long jarg2, int jarg3);
  public final static native long RsDiscHeartbeat_print__SWIG_1(long jarg1, RsDiscHeartbeat jarg1_, long jarg2);
  public final static native long new_RsDiscSerialiser();
  public final static native void delete_RsDiscSerialiser(long jarg1);
  public final static native long RsDiscSerialiser_size(long jarg1, RsDiscSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsDiscSerialiser_serialise(long jarg1, RsDiscSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsDiscSerialiser_deserialise(long jarg1, RsDiscSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_autoserver();
  public final static native void autoserver_id_set(long jarg1, autoserver jarg1_, long jarg2);
  public final static native long autoserver_id_get(long jarg1, autoserver jarg1_);
  public final static native void autoserver_localAddr_set(long jarg1, autoserver jarg1_, long jarg2);
  public final static native long autoserver_localAddr_get(long jarg1, autoserver jarg1_);
  public final static native void autoserver_remoteAddr_set(long jarg1, autoserver jarg1_, long jarg2);
  public final static native long autoserver_remoteAddr_get(long jarg1, autoserver jarg1_);
  public final static native void autoserver_ts_set(long jarg1, autoserver jarg1_, long jarg2);
  public final static native long autoserver_ts_get(long jarg1, autoserver jarg1_);
  public final static native void autoserver_discFlags_set(long jarg1, autoserver jarg1_, long jarg2);
  public final static native long autoserver_discFlags_get(long jarg1, autoserver jarg1_);
  public final static native void delete_autoserver(long jarg1);
  public final static native long new_autoneighbour();
  public final static native void autoneighbour_authoritative_set(long jarg1, autoneighbour jarg1_, boolean jarg2);
  public final static native boolean autoneighbour_authoritative_get(long jarg1, autoneighbour jarg1_);
  public final static native void autoneighbour_validAddrs_set(long jarg1, autoneighbour jarg1_, boolean jarg2);
  public final static native boolean autoneighbour_validAddrs_get(long jarg1, autoneighbour jarg1_);
  public final static native void autoneighbour_neighbour_of_set(long jarg1, autoneighbour jarg1_, long jarg2);
  public final static native long autoneighbour_neighbour_of_get(long jarg1, autoneighbour jarg1_);
  public final static native void delete_autoneighbour(long jarg1);
  public final static native long new_p3disc(long jarg1, p3PeerMgr jarg1_, long jarg2, p3LinkMgr jarg2_, long jarg3, p3NetMgr jarg3_, long jarg4, pqipersongrp jarg4_);
  public final static native void p3disc_statusChange(long jarg1, p3disc jarg1_, long jarg2);
  public final static native int p3disc_tick(long jarg1, p3disc jarg1_);
  public final static native boolean p3disc_potentialGPGproxies(long jarg1, p3disc jarg1_, long jarg2, long jarg3);
  public final static native boolean p3disc_potentialproxies(long jarg1, p3disc jarg1_, long jarg2, long jarg3);
  public final static native void p3disc_getversions(long jarg1, p3disc jarg1_, long jarg2);
  public final static native void p3disc_getWaitingDiscCount(long jarg1, p3disc jarg1_, long jarg2, long jarg3);
  public final static native long p3disc_getGPGOperation(long jarg1, p3disc jarg1_);
  public final static native void p3disc_setGPGOperation(long jarg1, p3disc jarg1_, long jarg2, AuthGPGOperation jarg2_);
  public final static native void delete_p3disc(long jarg1);
  public final static native void rsGxsChannels_set(long jarg1, RsGxsChannels jarg1_);
  public final static native long rsGxsChannels_get();
  public final static native void RsGxsChannelGroup_mMeta_set(long jarg1, RsGxsChannelGroup jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsGxsChannelGroup_mMeta_get(long jarg1, RsGxsChannelGroup jarg1_);
  public final static native void RsGxsChannelGroup_mDescription_set(long jarg1, RsGxsChannelGroup jarg1_, long jarg2);
  public final static native long RsGxsChannelGroup_mDescription_get(long jarg1, RsGxsChannelGroup jarg1_);
  public final static native void RsGxsChannelGroup_mImage_set(long jarg1, RsGxsChannelGroup jarg1_, long jarg2, RsGxsImage jarg2_);
  public final static native long RsGxsChannelGroup_mImage_get(long jarg1, RsGxsChannelGroup jarg1_);
  public final static native void RsGxsChannelGroup_mAutoDownload_set(long jarg1, RsGxsChannelGroup jarg1_, boolean jarg2);
  public final static native boolean RsGxsChannelGroup_mAutoDownload_get(long jarg1, RsGxsChannelGroup jarg1_);
  public final static native long new_RsGxsChannelGroup();
  public final static native void delete_RsGxsChannelGroup(long jarg1);
  public final static native void RsGxsChannelPost_mMeta_set(long jarg1, RsGxsChannelPost jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsGxsChannelPost_mMeta_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native void RsGxsChannelPost_mMsg_set(long jarg1, RsGxsChannelPost jarg1_, long jarg2);
  public final static native long RsGxsChannelPost_mMsg_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native void RsGxsChannelPost_mFiles_set(long jarg1, RsGxsChannelPost jarg1_, long jarg2);
  public final static native long RsGxsChannelPost_mFiles_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native void RsGxsChannelPost_mCount_set(long jarg1, RsGxsChannelPost jarg1_, long jarg2);
  public final static native long RsGxsChannelPost_mCount_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native void RsGxsChannelPost_mSize_set(long jarg1, RsGxsChannelPost jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsGxsChannelPost_mSize_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native void RsGxsChannelPost_mThumbnail_set(long jarg1, RsGxsChannelPost jarg1_, long jarg2, RsGxsImage jarg2_);
  public final static native long RsGxsChannelPost_mThumbnail_get(long jarg1, RsGxsChannelPost jarg1_);
  public final static native long new_RsGxsChannelPost();
  public final static native void delete_RsGxsChannelPost(long jarg1);
  public final static native void delete_RsGxsChannels(long jarg1);
  public final static native boolean RsGxsChannels_getGroupData(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsChannels_getPostData(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsChannels_getRelatedPosts(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3);
  public final static native void RsGxsChannels_setMessageReadStatus(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGxsChannels_setChannelAutoDownload(long jarg1, RsGxsChannels jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsGxsChannels_getChannelAutoDownload(long jarg1, RsGxsChannels jarg1_, long jarg2);
  public final static native boolean RsGxsChannels_subscribeToGroup(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean RsGxsChannels_createGroup(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3, RsGxsChannelGroup jarg3_);
  public final static native boolean RsGxsChannels_createPost(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3, RsGxsChannelPost jarg3_);
  public final static native boolean RsGxsChannels_ExtraFileHash(long jarg1, RsGxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsChannels_ExtraFileRemove(long jarg1, RsGxsChannels jarg1_, long jarg2);
  public final static native boolean SSGxsChannelGroup_load(long jarg1, SSGxsChannelGroup jarg1_, long jarg2);
  public final static native long SSGxsChannelGroup_save(long jarg1, SSGxsChannelGroup jarg1_);
  public final static native void SSGxsChannelGroup_mAutoDownload_set(long jarg1, SSGxsChannelGroup jarg1_, boolean jarg2);
  public final static native boolean SSGxsChannelGroup_mAutoDownload_get(long jarg1, SSGxsChannelGroup jarg1_);
  public final static native long new_SSGxsChannelGroup();
  public final static native void delete_SSGxsChannelGroup(long jarg1);
  public final static native long new_p3GxsChannels(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native void p3GxsChannels_service_tick(long jarg1, p3GxsChannels jarg1_);
  public final static native boolean p3GxsChannels_getGroupData(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_getPostData(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_getRelatedPosts(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_createGroup(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, RsGxsChannelGroup jarg3_);
  public final static native boolean p3GxsChannels_createPost(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, RsGxsChannelPost jarg3_);
  public final static native boolean p3GxsChannels_setChannelAutoDownload(long jarg1, p3GxsChannels jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3GxsChannels_getChannelAutoDownload(long jarg1, p3GxsChannels jarg1_, long jarg2);
  public final static native boolean p3GxsChannels_getCommentData(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_getRelatedComments(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_createComment(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, RsGxsComment jarg3_);
  public final static native boolean p3GxsChannels_createVote(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, RsGxsVote jarg3_);
  public final static native boolean p3GxsChannels_acknowledgeComment(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_acknowledgeVote(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_subscribeToGroup(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native void p3GxsChannels_setMessageProcessedStatus(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native void p3GxsChannels_setMessageReadStatus(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3GxsChannels_ExtraFileHash(long jarg1, p3GxsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsChannels_ExtraFileRemove(long jarg1, p3GxsChannels jarg1_, long jarg2);
  public final static native void delete_p3GxsChannels(long jarg1);
  public final static native void rsWiki_set(long jarg1, RsWiki jarg1_);
  public final static native long rsWiki_get();
  public final static native int FLAG_MSG_TYPE_WIKI_SNAPSHOT_get();
  public final static native int FLAG_MSG_TYPE_WIKI_COMMENT_get();
  public final static native void CollectionRef_KeyWord_set(long jarg1, CollectionRef jarg1_, long jarg2);
  public final static native long CollectionRef_KeyWord_get(long jarg1, CollectionRef jarg1_);
  public final static native void CollectionRef_CollectionId_set(long jarg1, CollectionRef jarg1_, long jarg2);
  public final static native long CollectionRef_CollectionId_get(long jarg1, CollectionRef jarg1_);
  public final static native long new_CollectionRef();
  public final static native void delete_CollectionRef(long jarg1);
  public final static native void RsWikiCollection_mMeta_set(long jarg1, RsWikiCollection jarg1_, long jarg2, RsGroupMetaData jarg2_);
  public final static native long RsWikiCollection_mMeta_get(long jarg1, RsWikiCollection jarg1_);
  public final static native void RsWikiCollection_mDescription_set(long jarg1, RsWikiCollection jarg1_, long jarg2);
  public final static native long RsWikiCollection_mDescription_get(long jarg1, RsWikiCollection jarg1_);
  public final static native void RsWikiCollection_mCategory_set(long jarg1, RsWikiCollection jarg1_, long jarg2);
  public final static native long RsWikiCollection_mCategory_get(long jarg1, RsWikiCollection jarg1_);
  public final static native void RsWikiCollection_mHashTags_set(long jarg1, RsWikiCollection jarg1_, long jarg2);
  public final static native long RsWikiCollection_mHashTags_get(long jarg1, RsWikiCollection jarg1_);
  public final static native long new_RsWikiCollection();
  public final static native void delete_RsWikiCollection(long jarg1);
  public final static native void RsWikiSnapshot_mMeta_set(long jarg1, RsWikiSnapshot jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsWikiSnapshot_mMeta_get(long jarg1, RsWikiSnapshot jarg1_);
  public final static native void RsWikiSnapshot_mPage_set(long jarg1, RsWikiSnapshot jarg1_, long jarg2);
  public final static native long RsWikiSnapshot_mPage_get(long jarg1, RsWikiSnapshot jarg1_);
  public final static native void RsWikiSnapshot_mHashTags_set(long jarg1, RsWikiSnapshot jarg1_, long jarg2);
  public final static native long RsWikiSnapshot_mHashTags_get(long jarg1, RsWikiSnapshot jarg1_);
  public final static native long new_RsWikiSnapshot();
  public final static native void delete_RsWikiSnapshot(long jarg1);
  public final static native void RsWikiComment_mMeta_set(long jarg1, RsWikiComment jarg1_, long jarg2, RsMsgMetaData jarg2_);
  public final static native long RsWikiComment_mMeta_get(long jarg1, RsWikiComment jarg1_);
  public final static native void RsWikiComment_mComment_set(long jarg1, RsWikiComment jarg1_, long jarg2);
  public final static native long RsWikiComment_mComment_get(long jarg1, RsWikiComment jarg1_);
  public final static native long new_RsWikiComment();
  public final static native void delete_RsWikiComment(long jarg1);
  public final static native void delete_RsWiki(long jarg1);
  public final static native boolean RsWiki_getCollections(long jarg1, RsWiki jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWiki_getSnapshots(long jarg1, RsWiki jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWiki_getComments(long jarg1, RsWiki jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWiki_getRelatedSnapshots(long jarg1, RsWiki jarg1_, long jarg2, long jarg3);
  public final static native boolean RsWiki_submitCollection(long jarg1, RsWiki jarg1_, long jarg2, long jarg3, RsWikiCollection jarg3_);
  public final static native boolean RsWiki_submitSnapshot(long jarg1, RsWiki jarg1_, long jarg2, long jarg3, RsWikiSnapshot jarg3_);
  public final static native boolean RsWiki_submitComment(long jarg1, RsWiki jarg1_, long jarg2, long jarg3, RsWikiComment jarg3_);
  public final static native long new_p3Wiki(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, RsGixs jarg3_);
  public final static native long p3Wiki_wikiAuthenPolicy();
  public final static native void p3Wiki_service_tick(long jarg1, p3Wiki jarg1_);
  public final static native boolean p3Wiki_getCollections(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wiki_getSnapshots(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wiki_getComments(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wiki_getRelatedSnapshots(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Wiki_submitCollection(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3, RsWikiCollection jarg3_);
  public final static native boolean p3Wiki_submitSnapshot(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3, RsWikiSnapshot jarg3_);
  public final static native boolean p3Wiki_submitComment(long jarg1, p3Wiki jarg1_, long jarg2, long jarg3, RsWikiComment jarg3_);
  public final static native void delete_p3Wiki(long jarg1);
  public final static native long new_RsGxsCircleCache();
  public final static native boolean RsGxsCircleCache_loadBaseCircle(long jarg1, RsGxsCircleCache jarg1_, long jarg2, RsGxsCircleGroup jarg2_);
  public final static native boolean RsGxsCircleCache_loadSubCircle(long jarg1, RsGxsCircleCache jarg1_, long jarg2, RsGxsCircleCache jarg2_);
  public final static native boolean RsGxsCircleCache_getAllowedPeersList(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native boolean RsGxsCircleCache_isAllowedPeer(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native boolean RsGxsCircleCache_addAllowedPeer(long jarg1, RsGxsCircleCache jarg1_, long jarg2, long jarg3);
  public final static native boolean RsGxsCircleCache_addLocalFriend(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native void RsGxsCircleCache_mCircleId_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mCircleId_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mCircleName_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mCircleName_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mCircleType_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mCircleType_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mIsExternal_set(long jarg1, RsGxsCircleCache jarg1_, boolean jarg2);
  public final static native boolean RsGxsCircleCache_mIsExternal_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mGroupStatus_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mGroupStatus_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mUpdateTime_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mUpdateTime_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mUnprocessedCircles_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mUnprocessedCircles_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mUnprocessedPeers_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mUnprocessedPeers_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mProcessedCircles_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mProcessedCircles_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mUnknownPeers_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mUnknownPeers_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void RsGxsCircleCache_mAllowedPeers_set(long jarg1, RsGxsCircleCache jarg1_, long jarg2);
  public final static native long RsGxsCircleCache_mAllowedPeers_get(long jarg1, RsGxsCircleCache jarg1_);
  public final static native void delete_RsGxsCircleCache(long jarg1);
  public final static native long new_p3GxsCircles(long jarg1, RsGeneralDataService jarg1_, long jarg2, RsNetworkExchangeService jarg2_, long jarg3, p3IdService jarg3_);
  public final static native boolean p3GxsCircles_getCircleDetails(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3, RsGxsCircleDetails jarg3_);
  public final static native boolean p3GxsCircles_getCircleExternalIdList(long jarg1, p3GxsCircles jarg1_, long jarg2);
  public final static native boolean p3GxsCircles_getCirclePersonalIdList(long jarg1, p3GxsCircles jarg1_, long jarg2);
  public final static native boolean p3GxsCircles_isLoaded(long jarg1, p3GxsCircles jarg1_, long jarg2);
  public final static native boolean p3GxsCircles_loadCircle(long jarg1, p3GxsCircles jarg1_, long jarg2);
  public final static native int p3GxsCircles_canSend(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3);
  public final static native int p3GxsCircles_canReceive(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsCircles_recipients(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsCircles_getGroupData(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GxsCircles_createGroup(long jarg1, p3GxsCircles jarg1_, long jarg2, long jarg3, RsGxsCircleGroup jarg3_);
  public final static native void p3GxsCircles_service_tick(long jarg1, p3GxsCircles jarg1_);
  public final static native void delete_p3GxsCircles(long jarg1);
  public final static native long new_RsTlvBanListEntry();
  public final static native void delete_RsTlvBanListEntry(long jarg1);
  public final static native long RsTlvBanListEntry_TlvSize(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native void RsTlvBanListEntry_TlvClear(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native boolean RsTlvBanListEntry_SetTlv(long jarg1, RsTlvBanListEntry jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvBanListEntry_GetTlv(long jarg1, RsTlvBanListEntry jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvBanListEntry_print(long jarg1, RsTlvBanListEntry jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvBanListEntry_addr_set(long jarg1, RsTlvBanListEntry jarg1_, long jarg2);
  public final static native long RsTlvBanListEntry_addr_get(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native void RsTlvBanListEntry_level_set(long jarg1, RsTlvBanListEntry jarg1_, long jarg2);
  public final static native long RsTlvBanListEntry_level_get(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native void RsTlvBanListEntry_reason_set(long jarg1, RsTlvBanListEntry jarg1_, long jarg2);
  public final static native long RsTlvBanListEntry_reason_get(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native void RsTlvBanListEntry_age_set(long jarg1, RsTlvBanListEntry jarg1_, long jarg2);
  public final static native long RsTlvBanListEntry_age_get(long jarg1, RsTlvBanListEntry jarg1_);
  public final static native long new_RsTlvBanList();
  public final static native void delete_RsTlvBanList(long jarg1);
  public final static native long RsTlvBanList_TlvSize(long jarg1, RsTlvBanList jarg1_);
  public final static native void RsTlvBanList_TlvClear(long jarg1, RsTlvBanList jarg1_);
  public final static native boolean RsTlvBanList_SetTlv(long jarg1, RsTlvBanList jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvBanList_GetTlv(long jarg1, RsTlvBanList jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvBanList_print(long jarg1, RsTlvBanList jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvBanList_entries_set(long jarg1, RsTlvBanList jarg1_, long jarg2);
  public final static native long RsTlvBanList_entries_get(long jarg1, RsTlvBanList jarg1_);
  public final static native int RS_PKT_SUBTYPE_BANLIST_ITEM_get();
  public final static native long new_RsBanListItem();
  public final static native void delete_RsBanListItem(long jarg1);
  public final static native void RsBanListItem_clear(long jarg1, RsBanListItem jarg1_);
  public final static native long RsBanListItem_print__SWIG_0(long jarg1, RsBanListItem jarg1_, long jarg2, int jarg3);
  public final static native long RsBanListItem_print__SWIG_1(long jarg1, RsBanListItem jarg1_, long jarg2);
  public final static native void RsBanListItem_peerList_set(long jarg1, RsBanListItem jarg1_, long jarg2, RsTlvBanList jarg2_);
  public final static native long RsBanListItem_peerList_get(long jarg1, RsBanListItem jarg1_);
  public final static native long new_RsBanListSerialiser();
  public final static native void delete_RsBanListSerialiser(long jarg1);
  public final static native long RsBanListSerialiser_size(long jarg1, RsBanListSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsBanListSerialiser_serialise(long jarg1, RsBanListSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsBanListSerialiser_deserialise(long jarg1, RsBanListSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void BanListPeer_addr_set(long jarg1, BanListPeer jarg1_, long jarg2);
  public final static native long BanListPeer_addr_get(long jarg1, BanListPeer jarg1_);
  public final static native void BanListPeer_reason_set(long jarg1, BanListPeer jarg1_, long jarg2);
  public final static native long BanListPeer_reason_get(long jarg1, BanListPeer jarg1_);
  public final static native void BanListPeer_level_set(long jarg1, BanListPeer jarg1_, int jarg2);
  public final static native int BanListPeer_level_get(long jarg1, BanListPeer jarg1_);
  public final static native void BanListPeer_mTs_set(long jarg1, BanListPeer jarg1_, long jarg2);
  public final static native long BanListPeer_mTs_get(long jarg1, BanListPeer jarg1_);
  public final static native long new_BanListPeer();
  public final static native void delete_BanListPeer(long jarg1);
  public final static native void BanList_mPeerId_set(long jarg1, BanList jarg1_, long jarg2);
  public final static native long BanList_mPeerId_get(long jarg1, BanList jarg1_);
  public final static native void BanList_mLastUpdate_set(long jarg1, BanList jarg1_, long jarg2);
  public final static native long BanList_mLastUpdate_get(long jarg1, BanList jarg1_);
  public final static native void BanList_mBanPeers_set(long jarg1, BanList jarg1_, long jarg2);
  public final static native long BanList_mBanPeers_get(long jarg1, BanList jarg1_);
  public final static native long new_BanList();
  public final static native void delete_BanList(long jarg1);
  public final static native long new_p3BanList(long jarg1, p3LinkMgr jarg1_, long jarg2, p3NetMgr jarg2_);
  public final static native void p3BanList_updatePeer(long jarg1, p3BanList jarg1_, long jarg2, long jarg3, int jarg4, int jarg5, int jarg6);
  public final static native int p3BanList_tick(long jarg1, p3BanList jarg1_);
  public final static native int p3BanList_status(long jarg1, p3BanList jarg1_);
  public final static native int p3BanList_sendPackets(long jarg1, p3BanList jarg1_);
  public final static native boolean p3BanList_processIncoming(long jarg1, p3BanList jarg1_);
  public final static native boolean p3BanList_recvBanItem(long jarg1, p3BanList jarg1_, long jarg2, RsBanListItem jarg2_);
  public final static native boolean p3BanList_addBanEntry(long jarg1, p3BanList jarg1_, long jarg2, long jarg3, int jarg4, long jarg5, long jarg6);
  public final static native void p3BanList_sendBanLists(long jarg1, p3BanList jarg1_);
  public final static native int p3BanList_sendBanSet(long jarg1, p3BanList jarg1_, long jarg2);
  public final static native void delete_p3BanList(long jarg1);
  public final static native void StoredGame_gameId_set(long jarg1, StoredGame jarg1_, long jarg2);
  public final static native long StoredGame_gameId_get(long jarg1, StoredGame jarg1_);
  public final static native void StoredGame_startTime_set(long jarg1, StoredGame jarg1_, long jarg2);
  public final static native long StoredGame_startTime_get(long jarg1, StoredGame jarg1_);
  public final static native void StoredGame_peerIds_set(long jarg1, StoredGame jarg1_, long jarg2);
  public final static native long StoredGame_peerIds_get(long jarg1, StoredGame jarg1_);
  public final static native long new_StoredGame();
  public final static native void delete_StoredGame(long jarg1);
  public final static native long new_p3GameService(int jarg1, long jarg2, int jarg3, int jarg4, long jarg5, p3GameLauncher jarg5_);
  public final static native void delete_p3GameService(long jarg1);
  public final static native void p3GameService_getSavedGames(long jarg1, p3GameService jarg1_, long jarg2);
  public final static native void p3GameService_startGame(long jarg1, p3GameService jarg1_, long jarg2, StoredGame jarg2_, boolean jarg3);
  public final static native void p3GameService_quitGame(long jarg1, p3GameService jarg1_, long jarg2);
  public final static native void p3GameService_deleteGame(long jarg1, p3GameService jarg1_, long jarg2);
  public final static native int p3GameService_getServiceId(long jarg1, p3GameService jarg1_);
  public final static native long p3GameService_getGameName(long jarg1, p3GameService jarg1_);
  public final static native int p3GameService_getMinPlayers(long jarg1, p3GameService jarg1_);
  public final static native int p3GameService_getMaxPlayers(long jarg1, p3GameService jarg1_);
  public final static native long p3GameService_getLauncher(long jarg1, p3GameService jarg1_);
  public final static native int CHANNEL_MSG_STATUS_MASK_get();
  public final static native int CHANNEL_MSG_STATUS_READ_get();
  public final static native int CHANNEL_MSG_STATUS_UNREAD_BY_USER_get();
  public final static native int CHANNEL_MSG_STATUS_DOWLOADED_get();
  public final static native long new_ChannelInfo();
  public final static native void ChannelInfo_channelId_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_channelId_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_channelName_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_channelName_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_channelDesc_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_channelDesc_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_channelFlags_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_channelFlags_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_pop_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_pop_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_autoDownload_set(long jarg1, ChannelInfo jarg1_, boolean jarg2);
  public final static native boolean ChannelInfo_autoDownload_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_pngChanImage_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_pngChanImage_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_pngImageLen_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_pngImageLen_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_lastPost_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_lastPost_get(long jarg1, ChannelInfo jarg1_);
  public final static native void ChannelInfo_destination_directory_set(long jarg1, ChannelInfo jarg1_, long jarg2);
  public final static native long ChannelInfo_destination_directory_get(long jarg1, ChannelInfo jarg1_);
  public final static native void delete_ChannelInfo(long jarg1);
  public final static native long new_ChannelMsgThumbnail();
  public final static native void ChannelMsgThumbnail_image_thumbnail_set(long jarg1, ChannelMsgThumbnail jarg1_, long jarg2);
  public final static native long ChannelMsgThumbnail_image_thumbnail_get(long jarg1, ChannelMsgThumbnail jarg1_);
  public final static native void ChannelMsgThumbnail_im_thumbnail_size_set(long jarg1, ChannelMsgThumbnail jarg1_, int jarg2);
  public final static native int ChannelMsgThumbnail_im_thumbnail_size_get(long jarg1, ChannelMsgThumbnail jarg1_);
  public final static native void delete_ChannelMsgThumbnail(long jarg1);
  public final static native long new_ChannelMsgInfo();
  public final static native void ChannelMsgInfo_channelId_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_channelId_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_msgId_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_msgId_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_msgflags_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_msgflags_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_subject_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_subject_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_msg_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_msg_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_ts_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_ts_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_files_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_files_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_count_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2);
  public final static native long ChannelMsgInfo_count_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_size_set(long jarg1, ChannelMsgInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ChannelMsgInfo_size_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void ChannelMsgInfo_thumbnail_set(long jarg1, ChannelMsgInfo jarg1_, long jarg2, ChannelMsgThumbnail jarg2_);
  public final static native long ChannelMsgInfo_thumbnail_get(long jarg1, ChannelMsgInfo jarg1_);
  public final static native void delete_ChannelMsgInfo(long jarg1);
  public final static native long new_ChannelMsgSummary();
  public final static native void ChannelMsgSummary_channelId_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_channelId_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_msgId_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_msgId_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_msgflags_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_msgflags_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_subject_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_subject_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_msg_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_msg_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_count_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_count_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void ChannelMsgSummary_ts_set(long jarg1, ChannelMsgSummary jarg1_, long jarg2);
  public final static native long ChannelMsgSummary_ts_get(long jarg1, ChannelMsgSummary jarg1_);
  public final static native void delete_ChannelMsgSummary(long jarg1);
  public final static native void rsChannels_set(long jarg1, RsChannels jarg1_);
  public final static native long rsChannels_get();
  public final static native void delete_RsChannels(long jarg1);
  public final static native boolean RsChannels_channelsChanged(long jarg1, RsChannels jarg1_, long jarg2);
  public final static native long RsChannels_createChannel(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean RsChannels_getChannelInfo(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, ChannelInfo jarg3_);
  public final static native boolean RsChannels_getChannelList(long jarg1, RsChannels jarg1_, long jarg2);
  public final static native boolean RsChannels_getChannelMsgList(long jarg1, RsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsChannels_getChannelMessage(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4, ChannelMsgInfo jarg4_);
  public final static native boolean RsChannels_setMessageStatus(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsChannels_getMessageStatus(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsChannels_getMessageCount(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsChannels_ChannelMessageSend(long jarg1, RsChannels jarg1_, long jarg2, ChannelMsgInfo jarg2_);
  public final static native boolean RsChannels_channelSubscribe(long jarg1, RsChannels jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native boolean RsChannels_channelExtraFileHash(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native boolean RsChannels_channelExtraFileRemove(long jarg1, RsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsChannels_channelRestoreKeys(long jarg1, RsChannels jarg1_, long jarg2);
  public final static native boolean RsChannels_channelShareKeys(long jarg1, RsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsChannels_channelEditInfo(long jarg1, RsChannels jarg1_, long jarg2, long jarg3, ChannelInfo jarg3_);
  public final static native void RsChannels_getPubKeysAvailableGrpIds(long jarg1, RsChannels jarg1_, long jarg2);
  public final static native boolean RsChannels_channelSetAutoDl(long jarg1, RsChannels jarg1_, long jarg2, boolean jarg3);
  public final static native boolean RsChannels_channelSetDestinationDirectory(long jarg1, RsChannels jarg1_, long jarg2, long jarg3);
  public final static native boolean RsChannels_channelGetAutoDl(long jarg1, RsChannels jarg1_, long jarg2, long jarg3);
  public final static native int RS_CHAN_STATUS_MASK_get();
  public final static native int RS_CHAN_STATUS_AUTO_DL_get();
  public final static native long new_p3Channels(int jarg1, long jarg2, CacheStrapper jarg2_, long jarg3, CacheTransfer jarg3_, long jarg4, RsFiles jarg4_, long jarg5, long jarg6, long jarg7);
  public final static native void delete_p3Channels(long jarg1);
  public final static native void p3Channels_cleanUpOldFiles(long jarg1, p3Channels jarg1_);
  public final static native boolean p3Channels_channelsChanged(long jarg1, p3Channels jarg1_, long jarg2);
  public final static native long p3Channels_createChannel(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3Channels_getChannelInfo(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, ChannelInfo jarg3_);
  public final static native boolean p3Channels_getChannelList(long jarg1, p3Channels jarg1_, long jarg2);
  public final static native boolean p3Channels_getChannelMsgList(long jarg1, p3Channels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Channels_getChannelMessage(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4, ChannelMsgInfo jarg4_);
  public final static native boolean p3Channels_ChannelMessageSend(long jarg1, p3Channels jarg1_, long jarg2, ChannelMsgInfo jarg2_);
  public final static native boolean p3Channels_setMessageStatus(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Channels_getMessageStatus(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Channels_getMessageCount(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Channels_channelSubscribe(long jarg1, p3Channels jarg1_, long jarg2, boolean jarg3, boolean jarg4);
  public final static native boolean p3Channels_channelExtraFileHash(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native boolean p3Channels_channelExtraFileRemove(long jarg1, p3Channels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Channels_channelRestoreKeys(long jarg1, p3Channels jarg1_, long jarg2);
  public final static native boolean p3Channels_channelShareKeys(long jarg1, p3Channels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Channels_channelEditInfo(long jarg1, p3Channels jarg1_, long jarg2, long jarg3, ChannelInfo jarg3_);
  public final static native void p3Channels_getPubKeysAvailableGrpIds(long jarg1, p3Channels jarg1_, long jarg2);
  public final static native boolean p3Channels_channelSetAutoDl(long jarg1, p3Channels jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Channels_channelGetAutoDl(long jarg1, p3Channels jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Channels_channelSetDestinationDirectory(long jarg1, p3Channels jarg1_, long jarg2, long jarg3);
  public final static native int TESTID_get();
  public final static native int TESTID2_get();
  public final static native long new_CacheTestSource(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native void delete_CacheTestSource(long jarg1);
  public final static native long new_CacheTestStore(long jarg1, CacheTransfer jarg1_, long jarg2);
  public final static native void delete_CacheTestStore(long jarg1);
  public final static native long new_CacheTestMultiSource(long jarg1, CacheStrapper jarg1_, long jarg2);
  public final static native void delete_CacheTestMultiSource(long jarg1);
  public final static native long new_CacheTestMultiStore(long jarg1, CacheTransfer jarg1_, long jarg2);
  public final static native void delete_CacheTestMultiStore(long jarg1);
  public final static native long new_FileEntry();
  public final static native void delete_FileEntry(long jarg1);
  public final static native long FileEntry_type(long jarg1, FileEntry jarg1_);
  public final static native int FileEntry_print(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native void FileEntry_name_set(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native long FileEntry_name_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_hash_set(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native long FileEntry_hash_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_size_set(long jarg1, FileEntry jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger FileEntry_size_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_modtime_set(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native long FileEntry_modtime_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_pop_set(long jarg1, FileEntry jarg1_, int jarg2);
  public final static native int FileEntry_pop_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_updtime_set(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native long FileEntry_updtime_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_parent_set(long jarg1, FileEntry jarg1_, long jarg2, DirEntry jarg2_);
  public final static native long FileEntry_parent_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_row_set(long jarg1, FileEntry jarg1_, int jarg2);
  public final static native int FileEntry_row_get(long jarg1, FileEntry jarg1_);
  public final static native void FileEntry_parent_groups_set(long jarg1, FileEntry jarg1_, long jarg2);
  public final static native long FileEntry_parent_groups_get(long jarg1, FileEntry jarg1_);
  public final static native long new_DirEntry();
  public final static native void delete_DirEntry(long jarg1);
  public final static native long DirEntry_updateDir(long jarg1, DirEntry jarg1_, long jarg2, FileEntry jarg2_, long jarg3);
  public final static native long DirEntry_updateFile(long jarg1, DirEntry jarg1_, long jarg2, FileEntry jarg2_, long jarg3);
  public final static native long DirEntry_type(long jarg1, DirEntry jarg1_);
  public final static native int DirEntry_checkParentPointers(long jarg1, DirEntry jarg1_);
  public final static native int DirEntry_updateChildRows(long jarg1, DirEntry jarg1_);
  public final static native int DirEntry_removeFile(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native int DirEntry_removeDir(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native int DirEntry_removeOldDir(long jarg1, DirEntry jarg1_, long jarg2, long jarg3);
  public final static native int DirEntry_removeOldEntries(long jarg1, DirEntry jarg1_, long jarg2, boolean jarg3);
  public final static native long DirEntry_findOldDirectory(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native long DirEntry_findDirectory(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native int DirEntry_updateDirectories(long jarg1, DirEntry jarg1_, long jarg2, int jarg3, int jarg4);
  public final static native int DirEntry_print(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native int DirEntry_saveEntry(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native void DirEntry_writeDirInfo(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native void DirEntry_writeFileInfo(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native void DirEntry_path_set(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native long DirEntry_path_get(long jarg1, DirEntry jarg1_);
  public final static native void DirEntry_subdirs_set(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native long DirEntry_subdirs_get(long jarg1, DirEntry jarg1_);
  public final static native void DirEntry_files_set(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native long DirEntry_files_get(long jarg1, DirEntry jarg1_);
  public final static native void DirEntry_most_recent_time_set(long jarg1, DirEntry jarg1_, long jarg2);
  public final static native long DirEntry_most_recent_time_get(long jarg1, DirEntry jarg1_);
  public final static native long new_PersonEntry(long jarg1);
  public final static native void delete_PersonEntry(long jarg1);
  public final static native long PersonEntry_type(long jarg1, PersonEntry jarg1_);
  public final static native void PersonEntry_id_set(long jarg1, PersonEntry jarg1_, long jarg2);
  public final static native long PersonEntry_id_get(long jarg1, PersonEntry jarg1_);
  public final static native long new_FileIndex(long jarg1);
  public final static native void delete_FileIndex(long jarg1);
  public final static native int FileIndex_setRootDirectories(long jarg1, FileIndex jarg1_, long jarg2, long jarg3);
  public final static native int FileIndex_getRootDirectories(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native long FileIndex_updateDirEntry(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, FileEntry jarg3_, long jarg4);
  public final static native long FileIndex_updateFileEntry(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, FileEntry jarg3_, long jarg4);
  public final static native long FileIndex_findOldDirectory(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native int FileIndex_removeOldDirectory(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int FileIndex_cleanOldEntries(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native int FileIndex_printFileIndex__SWIG_0(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native int FileIndex_printFileIndex__SWIG_1(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native int FileIndex_loadIndex(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4);
  public final static native int FileIndex_saveIndex(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int FileIndex_searchTerms(long jarg1, FileIndex jarg1_, long jarg2, long jarg3);
  public final static native int FileIndex_searchHash(long jarg1, FileIndex jarg1_, long jarg2, long jarg3);
  public final static native int FileIndex_searchBoolExp(long jarg1, FileIndex jarg1_, long jarg2, Expression jarg2_, long jarg3);
  public final static native void FileIndex_updateMaxModTime(long jarg1, FileIndex jarg1_);
  public final static native void FileIndex_RecursUpdateMaxModTime(long jarg1, FileIndex jarg1_, long jarg2, DirEntry jarg2_);
  public final static native void FileIndex_root_set(long jarg1, FileIndex jarg1_, long jarg2, PersonEntry jarg2_);
  public final static native long FileIndex_root_get(long jarg1, FileIndex jarg1_);
  public final static native void FileIndex__pointers_set(long jarg1);
  public final static native long FileIndex__pointers_get();
  public final static native void FileIndex_registerEntry(long jarg1);
  public final static native void FileIndex_unregisterEntry(long jarg1);
  public final static native boolean FileIndex_isValid(long jarg1);
  public final static native boolean FileIndex_extractData__SWIG_0(long jarg1, long jarg2, DirDetails jarg2_);
  public final static native long FileIndex_getType(long jarg1);
  public final static native long FileIndex_findRef(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native boolean FileIndex_extractData__SWIG_1(long jarg1, FileIndex jarg1_, long jarg2, long jarg3, DirDetails jarg3_);
  public final static native void FileIndex_updateHashIndex(long jarg1, FileIndex jarg1_);
  public final static native void FileIndex_recursUpdateHashIndex(long jarg1, FileIndex jarg1_, long jarg2, DirEntry jarg2_);
  public final static native void FileIndex__file_hashes_set(long jarg1, FileIndex jarg1_, long jarg2);
  public final static native long FileIndex__file_hashes_get(long jarg1, FileIndex jarg1_);
  public final static native void DirContentToHash_fentries_set(long jarg1, DirContentToHash jarg1_, long jarg2);
  public final static native long DirContentToHash_fentries_get(long jarg1, DirContentToHash jarg1_);
  public final static native void DirContentToHash_realpath_set(long jarg1, DirContentToHash jarg1_, long jarg2);
  public final static native long DirContentToHash_realpath_get(long jarg1, DirContentToHash jarg1_);
  public final static native void DirContentToHash_dirpath_set(long jarg1, DirContentToHash jarg1_, long jarg2);
  public final static native long DirContentToHash_dirpath_get(long jarg1, DirContentToHash jarg1_);
  public final static native long new_DirContentToHash();
  public final static native void delete_DirContentToHash(long jarg1);
  public final static native long new_HashCache(long jarg1);
  public final static native void HashCache_save(long jarg1, HashCache jarg1_);
  public final static native void HashCache_insert(long jarg1, HashCache jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native boolean HashCache_find(long jarg1, HashCache jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native void HashCache_clean(long jarg1, HashCache jarg1_);
  public final static native void HashCache_setRememberHashFilesDuration(long jarg1, HashCache jarg1_, long jarg2);
  public final static native long HashCache_rememberHashFilesDuration(long jarg1, HashCache jarg1_);
  public final static native void HashCache_clear(long jarg1, HashCache jarg1_);
  public final static native boolean HashCache_empty(long jarg1, HashCache jarg1_);
  public final static native void delete_HashCache(long jarg1);
  public final static native long new_FileIndexMonitor(long jarg1, CacheStrapper jarg1_, long jarg2, NotifyBase jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native void delete_FileIndexMonitor(long jarg1);
  public final static native boolean FileIndexMonitor_findLocalFile(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8);
  public final static native int FileIndexMonitor_SearchKeywords(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int FileIndexMonitor_SearchBoolExp(long jarg1, FileIndexMonitor jarg1_, long jarg2, Expression jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native int FileIndexMonitor_filterResults(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean FileIndexMonitor_convertSharedFilePath(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3);
  public final static native boolean FileIndexMonitor_loadLocalCache(long jarg1, FileIndexMonitor jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native boolean FileIndexMonitor_updateCache(long jarg1, FileIndexMonitor jarg1_, long jarg2, RsCacheData jarg2_, long jarg3);
  public final static native void FileIndexMonitor_run(long jarg1, FileIndexMonitor jarg1_);
  public final static native void FileIndexMonitor_updateCycle(long jarg1, FileIndexMonitor jarg1_);
  public final static native int FileIndexMonitor_RequestDirDetails__SWIG_0(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3, DirDetails jarg3_, long jarg4);
  public final static native long FileIndexMonitor_getType(long jarg1, FileIndexMonitor jarg1_, long jarg2);
  public final static native int FileIndexMonitor_RequestDirDetails__SWIG_1(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3, DirDetails jarg3_);
  public final static native void FileIndexMonitor_setSharedDirectories(long jarg1, FileIndexMonitor jarg1_, long jarg2);
  public final static native void FileIndexMonitor_getSharedDirectories(long jarg1, FileIndexMonitor jarg1_, long jarg2);
  public final static native void FileIndexMonitor_updateShareFlags(long jarg1, FileIndexMonitor jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native void FileIndexMonitor_forceDirectoryCheck(long jarg1, FileIndexMonitor jarg1_);
  public final static native void FileIndexMonitor_forceDirListsRebuildAndSend(long jarg1, FileIndexMonitor jarg1_);
  public final static native boolean FileIndexMonitor_inDirectoryCheck(long jarg1, FileIndexMonitor jarg1_);
  public final static native boolean FileIndexMonitor_cachesAvailable(long jarg1, FileIndexMonitor jarg1_, long jarg2, long jarg3);
  public final static native void rsicontrol_set(long jarg1, RsControl jarg1_);
  public final static native long rsicontrol_get();
  public final static native long InitRsConfig();
  public final static native String RsConfigDirectory(long jarg1, RsInit jarg1_);
  public final static native boolean RsConfigStartMinimised(long jarg1, RsInit jarg1_);
  public final static native void CleanupRsConfig(long jarg1, RsInit jarg1_);
  public final static native int InitRetroShare(int jarg1, long jarg2, long jarg3, RsInit jarg3_);
  public final static native boolean ValidateCertificate(long jarg1, RsInit jarg1_, long jarg2);
  public final static native boolean ValidateTrustedUser(long jarg1, RsInit jarg1_, long jarg2, long jarg3);
  public final static native boolean LoadPassword(long jarg1, RsInit jarg1_, long jarg2);
  public final static native boolean RsGenerateCertificate(long jarg1, RsInit jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean RsTryAutoLogin(long jarg1, RsInit jarg1_);
  public final static native boolean RsStoreAutoLogin(long jarg1, RsInit jarg1_);
  public final static native boolean RsClearAutoLogin(long jarg1);
  public final static native int LoadCertificates(long jarg1, RsInit jarg1_, boolean jarg2);
  public final static native long createRsControl(long jarg1, NotifyBase jarg1_);
  public final static native void delete_RsControl(long jarg1);
  public final static native int RsControl_StartupRetroShare(long jarg1, RsControl jarg1_);
  public final static native int RsControl_SetInBroadcast(long jarg1, RsControl jarg1_, long jarg2, boolean jarg3);
  public final static native int RsControl_SetInSubscribe(long jarg1, RsControl jarg1_, long jarg2, boolean jarg3);
  public final static native int RsControl_ClearInBroadcast(long jarg1, RsControl jarg1_);
  public final static native int RsControl_ClearInSubscribe(long jarg1, RsControl jarg1_);
  public final static native int RsControl_ConfigSetBootPrompt(long jarg1, RsControl jarg1_, boolean jarg2);
  public final static native void RsControl_ConfigFinalSave(long jarg1, RsControl jarg1_);
  public final static native void RsControl_rsGlobalShutDown(long jarg1, RsControl jarg1_);
  public final static native long RsControl_getNotify(long jarg1, RsControl jarg1_);
  public final static native boolean RsControl_getPeerCryptoDetails(long jarg1, RsControl jarg1_, long jarg2, long jarg3, RsPeerCryptoParams jarg3_);
  public final static native long new_NotifyBase();
  public final static native void delete_NotifyBase(long jarg1);
  public final static native void NotifyBase_notifyListPreChange(long jarg1, NotifyBase jarg1_, int jarg2, int jarg3);
  public final static native void NotifyBase_notifyListChange(long jarg1, NotifyBase jarg1_, int jarg2, int jarg3);
  public final static native void NotifyBase_notifyErrorMsg(long jarg1, NotifyBase jarg1_, int jarg2, int jarg3, long jarg4);
  public final static native void NotifyBase_notifyChatStatus(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native void NotifyBase_notifyChatLobbyEvent(long jarg1, NotifyBase jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void NotifyBase_notifyChatLobbyTimeShift(long jarg1, NotifyBase jarg1_, int jarg2);
  public final static native void NotifyBase_notifyCustomState(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native void NotifyBase_notifyHashingInfo(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native void NotifyBase_notifyTurtleSearchResult(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native void NotifyBase_notifyPeerHasNewAvatar(long jarg1, NotifyBase jarg1_, long jarg2);
  public final static native void NotifyBase_notifyOwnAvatarChanged(long jarg1, NotifyBase jarg1_);
  public final static native void NotifyBase_notifyOwnStatusMessageChanged(long jarg1, NotifyBase jarg1_);
  public final static native void NotifyBase_notifyDiskFull(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native void NotifyBase_notifyPeerStatusChanged(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native void NotifyBase_notifyPeerStatusChangedSummary(long jarg1, NotifyBase jarg1_);
  public final static native void NotifyBase_notifyForumMsgReadSatusChanged(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void NotifyBase_notifyChannelMsgReadSatusChanged(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void NotifyBase_notifyDiscInfoChanged(long jarg1, NotifyBase jarg1_);
  public final static native void NotifyBase_notifyDownloadComplete(long jarg1, NotifyBase jarg1_, long jarg2);
  public final static native void NotifyBase_notifyDownloadCompleteCount(long jarg1, NotifyBase jarg1_, long jarg2);
  public final static native void NotifyBase_notifyHistoryChanged(long jarg1, NotifyBase jarg1_, long jarg2, int jarg3);
  public final static native boolean NotifyBase_askForPassword(long jarg1, NotifyBase jarg1_, long jarg2, boolean jarg3, long jarg4);
  public final static native boolean NotifyBase_askForPluginConfirmation(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3);
  public final static native boolean NotifyBase_askForDeferredSelfSignature(long jarg1, NotifyBase jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native int NOTIFY_LIST_NEIGHBOURS_get();
  public final static native int NOTIFY_LIST_FRIENDS_get();
  public final static native int NOTIFY_LIST_SEARCHLIST_get();
  public final static native int NOTIFY_LIST_MESSAGELIST_get();
  public final static native int NOTIFY_LIST_CHANNELLIST_get();
  public final static native int NOTIFY_LIST_TRANSFERLIST_get();
  public final static native int NOTIFY_LIST_CONFIG_get();
  public final static native int NOTIFY_LIST_DIRLIST_LOCAL_get();
  public final static native int NOTIFY_LIST_DIRLIST_FRIENDS_get();
  public final static native int NOTIFY_LIST_FORUMLIST_LOCKED_get();
  public final static native int NOTIFY_LIST_MESSAGE_TAGS_get();
  public final static native int NOTIFY_LIST_PUBLIC_CHAT_get();
  public final static native int NOTIFY_LIST_PRIVATE_INCOMING_CHAT_get();
  public final static native int NOTIFY_LIST_PRIVATE_OUTGOING_CHAT_get();
  public final static native int NOTIFY_LIST_GROUPLIST_get();
  public final static native int NOTIFY_LIST_CHANNELLIST_LOCKED_get();
  public final static native int NOTIFY_LIST_CHAT_LOBBY_INVITATION_get();
  public final static native int NOTIFY_LIST_CHAT_LOBBY_LIST_get();
  public final static native int NOTIFY_TYPE_SAME_get();
  public final static native int NOTIFY_TYPE_MOD_get();
  public final static native int NOTIFY_TYPE_ADD_get();
  public final static native int NOTIFY_TYPE_DEL_get();
  public final static native long NOTIFY_HASHTYPE_EXAMINING_FILES_get();
  public final static native long NOTIFY_HASHTYPE_FINISH_get();
  public final static native long NOTIFY_HASHTYPE_HASH_FILE_get();
  public final static native long NOTIFY_HASHTYPE_SAVE_FILE_INDEX_get();
  public final static native void FileStoreResult_id_set(long jarg1, FileStoreResult jarg1_, long jarg2);
  public final static native long FileStoreResult_id_get(long jarg1, FileStoreResult jarg1_);
  public final static native void FileStoreResult_path_set(long jarg1, FileStoreResult jarg1_, long jarg2);
  public final static native long FileStoreResult_path_get(long jarg1, FileStoreResult jarg1_);
  public final static native void FileStoreResult_hash_set(long jarg1, FileStoreResult jarg1_, long jarg2);
  public final static native long FileStoreResult_hash_get(long jarg1, FileStoreResult jarg1_);
  public final static native void FileStoreResult_name_set(long jarg1, FileStoreResult jarg1_, long jarg2);
  public final static native long FileStoreResult_name_get(long jarg1, FileStoreResult jarg1_);
  public final static native long new_FileStoreResult();
  public final static native void delete_FileStoreResult(long jarg1);
  public final static native long new_NotifyCallback();
  public final static native void delete_NotifyCallback(long jarg1);
  public final static native void NotifyCallback_AboutToModify(long jarg1, NotifyCallback jarg1_);
  public final static native void NotifyCallback_ModCompleted(long jarg1, NotifyCallback jarg1_);
  public final static native long new_FileIndexStore(long jarg1, CacheStrapper jarg1_, long jarg2, CacheTransfer jarg2_, long jarg3, NotifyBase jarg3_, long jarg4, p3PeerMgr jarg4_, long jarg5, long jarg6);
  public final static native void delete_FileIndexStore(long jarg1);
  public final static native int FileIndexStore_loadCache(long jarg1, FileIndexStore jarg1_, long jarg2, RsCacheData jarg2_);
  public final static native int FileIndexStore_SearchHash(long jarg1, FileIndexStore jarg1_, long jarg2, long jarg3);
  public final static native int FileIndexStore_SearchKeywords(long jarg1, FileIndexStore jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int FileIndexStore_searchBoolExp(long jarg1, FileIndexStore jarg1_, long jarg2, Expression jarg2_, long jarg3);
  public final static native int FileIndexStore_RequestDirDetails__SWIG_0(long jarg1, FileIndexStore jarg1_, long jarg2, long jarg3, long jarg4, DirDetails jarg4_);
  public final static native int FileIndexStore_RequestDirDetails__SWIG_1(long jarg1, FileIndexStore jarg1_, long jarg2, long jarg3, DirDetails jarg3_, long jarg4);
  public final static native long FileIndexStore_getType(long jarg1, FileIndexStore jarg1_, long jarg2);
  public final static native int RS_INIT_OK_get();
  public final static native int RS_INIT_HAVE_ACCOUNT_get();
  public final static native int RS_INIT_AUTH_FAILED_get();
  public final static native int RS_INIT_BASE_DIR_ERROR_get();
  public final static native int RS_INIT_NO_KEYRING_get();
  public final static native int RS_USE_PGPSSL_get();
  public final static native void RsInit_InitRsConfig();
  public final static native int RsInit_InitRetroShare__SWIG_0(int jarg1, long jarg2, boolean jarg3);
  public final static native int RsInit_InitRetroShare__SWIG_1(int jarg1, long jarg2);
  public final static native boolean RsInit_isPortable();
  public final static native boolean RsInit_isWindowsXP();
  public final static native boolean RsInit_getPreferedAccountId(long jarg1);
  public final static native boolean RsInit_getPGPEngineFileName(long jarg1);
  public final static native boolean RsInit_getAccountIds(long jarg1);
  public final static native boolean RsInit_getAccountDetails(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsInit_ValidateCertificate(long jarg1);
  public final static native boolean RsInit_exportIdentity(long jarg1, long jarg2);
  public final static native boolean RsInit_importIdentity(long jarg1, long jarg2, long jarg3);
  public final static native boolean RsInit_collectEntropy(long jarg1);
  public final static native int RsInit_GetPGPLogins(long jarg1);
  public final static native int RsInit_GetPGPLoginDetails(long jarg1, long jarg2, long jarg3);
  public final static native boolean RsInit_GeneratePGPCertificate(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean RsInit_copyGnuPGKeyrings();
  public final static native boolean RsInit_SelectGPGAccount(long jarg1);
  public final static native boolean RsInit_LoadGPGPassword(long jarg1);
  public final static native boolean RsInit_GenerateSSLCertificate(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean RsInit_LoadPassword(long jarg1, long jarg2);
  public final static native int RsInit_LockAndLoadCertificates(boolean jarg1, long jarg2);
  public final static native long RsInit_RsConfigDirectory();
  public final static native long RsInit_RsConfigKeysDirectory();
  public final static native long RsInit_RsPGPDirectory();
  public final static native long RsInit_RsProfileConfigDirectory();
  public final static native boolean RsInit_getStartMinimised();
  public final static native long RsInit_getRetroShareLink();
  public final static native int RsInit_getSslPwdLen();
  public final static native boolean RsInit_getAutoLogin();
  public final static native void RsInit_setAutoLogin(boolean jarg1);
  public final static native boolean RsInit_RsClearAutoLogin();
  public final static native long RsInit_getRetroshareDataDirectory();
  public final static native void RsInit_unsupported_keys_set(long jarg1);
  public final static native long RsInit_unsupported_keys_get();
  public final static native long new_RsInit();
  public final static native void delete_RsInit(long jarg1);
  public final static native void rsDisc_set(long jarg1, RsDisc jarg1_);
  public final static native long rsDisc_get();
  public final static native void delete_RsDisc(long jarg1);
  public final static native boolean RsDisc_getDiscFriends(long jarg1, RsDisc jarg1_, long jarg2, long jarg3);
  public final static native boolean RsDisc_getDiscGPGFriends(long jarg1, RsDisc jarg1_, long jarg2, long jarg3);
  public final static native boolean RsDisc_getDiscVersions(long jarg1, RsDisc jarg1_, long jarg2);
  public final static native boolean RsDisc_getWaitingDiscCount(long jarg1, RsDisc jarg1_, long jarg2, long jarg3);
  public final static native String SVN_REVISION_get();
  public final static native int SVN_REVISION_NUMBER_get();
  public final static native long retroshareRevision();
  public final static native long retroshareVersion();
  public final static native void rsPlugins_set(long jarg1, RsPluginHandler jarg1_);
  public final static native long rsPlugins_get();
  public final static native int RS_PLUGIN_API_VERSION_get();
  public final static native int PLUGIN_STATUS_NO_STATUS_get();
  public final static native int PLUGIN_STATUS_REJECTED_HASH_get();
  public final static native int PLUGIN_STATUS_DLOPEN_ERROR_get();
  public final static native int PLUGIN_STATUS_MISSING_SYMBOL_get();
  public final static native int PLUGIN_STATUS_NULL_PLUGIN_get();
  public final static native int PLUGIN_STATUS_LOADED_get();
  public final static native int PLUGIN_STATUS_WRONG_API_get();
  public final static native int PLUGIN_STATUS_MISSING_API_get();
  public final static native int PLUGIN_STATUS_MISSING_SVN_get();
  public final static native long new_RsPlugInInterfaces();
  public final static native void RsPlugInInterfaces_mPeers_set(long jarg1, RsPlugInInterfaces jarg1_, long jarg2, RsPeers jarg2_);
  public final static native long RsPlugInInterfaces_mPeers_get(long jarg1, RsPlugInInterfaces jarg1_);
  public final static native void RsPlugInInterfaces_mFiles_set(long jarg1, RsPlugInInterfaces jarg1_, long jarg2, RsFiles jarg2_);
  public final static native long RsPlugInInterfaces_mFiles_get(long jarg1, RsPlugInInterfaces jarg1_);
  public final static native void delete_RsPlugInInterfaces(long jarg1);
  public final static native long RsPlugin_rs_cache_service(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_rs_pqi_service(long jarg1, RsPlugin jarg1_);
  public final static native int RsPlugin_rs_service_id(long jarg1, RsPlugin jarg1_);
  public final static native void RsPlugin_stop(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_configurationFileName(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_page(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_icon(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_config_panel(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_about_page(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_config_page(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_transfers_tab(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_transfers_tab_name(long jarg1, RsPlugin jarg1_);
  public final static native void RsPlugin_qt_sound_events(long jarg1, RsPlugin jarg1_, long jarg2);
  public final static native long RsPlugin_qt_allocate_new_popup_chat_dialog(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_qt_translator(long jarg1, RsPlugin jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsPlugin_qt_feedNotify(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_getSvnRevision(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_getShortPluginDescription(long jarg1, RsPlugin jarg1_);
  public final static native long RsPlugin_getPluginName(long jarg1, RsPlugin jarg1_);
  public final static native void RsPlugin_getPluginVersion(long jarg1, RsPlugin jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RsPlugin_setInterfaces(long jarg1, RsPlugin jarg1_, long jarg2, RsPlugInInterfaces jarg2_);
  public final static native void RsPlugin_setPlugInHandler(long jarg1, RsPlugin jarg1_, long jarg2, RsPluginHandler jarg2_);
  public final static native void delete_RsPlugin(long jarg1);
  public final static native int RsPluginHandler_nbPlugins(long jarg1, RsPluginHandler jarg1_);
  public final static native long RsPluginHandler_plugin(long jarg1, RsPluginHandler jarg1_, int jarg2);
  public final static native long RsPluginHandler_getPluginDirectories(long jarg1, RsPluginHandler jarg1_);
  public final static native void RsPluginHandler_getPluginStatus(long jarg1, RsPluginHandler jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native void RsPluginHandler_enablePlugin(long jarg1, RsPluginHandler jarg1_, long jarg2);
  public final static native void RsPluginHandler_disablePlugin(long jarg1, RsPluginHandler jarg1_, long jarg2);
  public final static native void RsPluginHandler_allowAllPlugins(long jarg1, RsPluginHandler jarg1_, boolean jarg2);
  public final static native boolean RsPluginHandler_getAllowAllPlugins(long jarg1, RsPluginHandler jarg1_);
  public final static native void RsPluginHandler_slowTickPlugins(long jarg1, RsPluginHandler jarg1_, long jarg2);
  public final static native long RsPluginHandler_getLocalCacheDir(long jarg1, RsPluginHandler jarg1_);
  public final static native long RsPluginHandler_getRemoteCacheDir(long jarg1, RsPluginHandler jarg1_);
  public final static native long RsPluginHandler_getFileServer(long jarg1, RsPluginHandler jarg1_);
  public final static native long RsPluginHandler_getLinkMgr(long jarg1, RsPluginHandler jarg1_);
  public final static native void delete_RsPluginHandler(long jarg1);
  public final static native short RS_PKT_SUBTYPE_WIKI_COLLECTION_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_WIKI_SNAPSHOT_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_WIKI_COMMENT_ITEM_get();
  public final static native long new_RsGxsWikiCollectionItem();
  public final static native void delete_RsGxsWikiCollectionItem(long jarg1);
  public final static native void RsGxsWikiCollectionItem_clear(long jarg1, RsGxsWikiCollectionItem jarg1_);
  public final static native long RsGxsWikiCollectionItem_print__SWIG_0(long jarg1, RsGxsWikiCollectionItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsWikiCollectionItem_print__SWIG_1(long jarg1, RsGxsWikiCollectionItem jarg1_, long jarg2);
  public final static native void RsGxsWikiCollectionItem_collection_set(long jarg1, RsGxsWikiCollectionItem jarg1_, long jarg2, RsWikiCollection jarg2_);
  public final static native long RsGxsWikiCollectionItem_collection_get(long jarg1, RsGxsWikiCollectionItem jarg1_);
  public final static native long new_RsGxsWikiSnapshotItem();
  public final static native void delete_RsGxsWikiSnapshotItem(long jarg1);
  public final static native void RsGxsWikiSnapshotItem_clear(long jarg1, RsGxsWikiSnapshotItem jarg1_);
  public final static native long RsGxsWikiSnapshotItem_print__SWIG_0(long jarg1, RsGxsWikiSnapshotItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsWikiSnapshotItem_print__SWIG_1(long jarg1, RsGxsWikiSnapshotItem jarg1_, long jarg2);
  public final static native void RsGxsWikiSnapshotItem_snapshot_set(long jarg1, RsGxsWikiSnapshotItem jarg1_, long jarg2, RsWikiSnapshot jarg2_);
  public final static native long RsGxsWikiSnapshotItem_snapshot_get(long jarg1, RsGxsWikiSnapshotItem jarg1_);
  public final static native long new_RsGxsWikiCommentItem();
  public final static native void delete_RsGxsWikiCommentItem(long jarg1);
  public final static native void RsGxsWikiCommentItem_clear(long jarg1, RsGxsWikiCommentItem jarg1_);
  public final static native long RsGxsWikiCommentItem_print__SWIG_0(long jarg1, RsGxsWikiCommentItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsWikiCommentItem_print__SWIG_1(long jarg1, RsGxsWikiCommentItem jarg1_, long jarg2);
  public final static native void RsGxsWikiCommentItem_comment_set(long jarg1, RsGxsWikiCommentItem jarg1_, long jarg2, RsWikiComment jarg2_);
  public final static native long RsGxsWikiCommentItem_comment_get(long jarg1, RsGxsWikiCommentItem jarg1_);
  public final static native long new_RsGxsWikiSerialiser();
  public final static native void delete_RsGxsWikiSerialiser(long jarg1);
  public final static native long RsGxsWikiSerialiser_size(long jarg1, RsGxsWikiSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsWikiSerialiser_serialise(long jarg1, RsGxsWikiSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsWikiSerialiser_deserialise(long jarg1, RsGxsWikiSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_GXSCIRCLE_GROUP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSCIRCLE_MSG_ITEM_get();
  public final static native int GXSCIRCLE_PGPIDSET_get();
  public final static native int GXSCIRCLE_GXSIDSET_get();
  public final static native int GXSCIRCLE_SUBCIRCLESET_get();
  public final static native long new_RsGxsCircleGroupItem();
  public final static native void delete_RsGxsCircleGroupItem(long jarg1);
  public final static native void RsGxsCircleGroupItem_clear(long jarg1, RsGxsCircleGroupItem jarg1_);
  public final static native long RsGxsCircleGroupItem_print__SWIG_0(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsCircleGroupItem_print__SWIG_1(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2);
  public final static native boolean RsGxsCircleGroupItem_convertFrom(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, RsGxsCircleGroup jarg2_);
  public final static native boolean RsGxsCircleGroupItem_convertTo(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, RsGxsCircleGroup jarg2_);
  public final static native void RsGxsCircleGroupItem_pgpIdSet_set(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, RsTlvStringSet jarg2_);
  public final static native long RsGxsCircleGroupItem_pgpIdSet_get(long jarg1, RsGxsCircleGroupItem jarg1_);
  public final static native void RsGxsCircleGroupItem_gxsIdSet_set(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, RsTlvStringSet jarg2_);
  public final static native long RsGxsCircleGroupItem_gxsIdSet_get(long jarg1, RsGxsCircleGroupItem jarg1_);
  public final static native void RsGxsCircleGroupItem_subCircleSet_set(long jarg1, RsGxsCircleGroupItem jarg1_, long jarg2, RsTlvStringSet jarg2_);
  public final static native long RsGxsCircleGroupItem_subCircleSet_get(long jarg1, RsGxsCircleGroupItem jarg1_);
  public final static native long new_RsGxsCircleMsgItem();
  public final static native void delete_RsGxsCircleMsgItem(long jarg1);
  public final static native void RsGxsCircleMsgItem_clear(long jarg1, RsGxsCircleMsgItem jarg1_);
  public final static native long RsGxsCircleMsgItem_print__SWIG_0(long jarg1, RsGxsCircleMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsCircleMsgItem_print__SWIG_1(long jarg1, RsGxsCircleMsgItem jarg1_, long jarg2);
  public final static native void RsGxsCircleMsgItem_msg_set(long jarg1, RsGxsCircleMsgItem jarg1_, long jarg2, RsGxsCircleMsg jarg2_);
  public final static native long RsGxsCircleMsgItem_msg_get(long jarg1, RsGxsCircleMsgItem jarg1_);
  public final static native long new_RsGxsCircleSerialiser();
  public final static native void delete_RsGxsCircleSerialiser(long jarg1);
  public final static native long RsGxsCircleSerialiser_size(long jarg1, RsGxsCircleSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsCircleSerialiser_serialise(long jarg1, RsGxsCircleSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsCircleSerialiser_deserialise(long jarg1, RsGxsCircleSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsTlvKeyValueWide();
  public final static native void delete_RsTlvKeyValueWide(long jarg1);
  public final static native long RsTlvKeyValueWide_TlvSize(long jarg1, RsTlvKeyValueWide jarg1_);
  public final static native void RsTlvKeyValueWide_TlvClear(long jarg1, RsTlvKeyValueWide jarg1_);
  public final static native boolean RsTlvKeyValueWide_SetTlv(long jarg1, RsTlvKeyValueWide jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeyValueWide_GetTlv(long jarg1, RsTlvKeyValueWide jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeyValueWide_print(long jarg1, RsTlvKeyValueWide jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeyValueWide_wKey_set(long jarg1, RsTlvKeyValueWide jarg1_, long jarg2);
  public final static native long RsTlvKeyValueWide_wKey_get(long jarg1, RsTlvKeyValueWide jarg1_);
  public final static native void RsTlvKeyValueWide_wValue_set(long jarg1, RsTlvKeyValueWide jarg1_, long jarg2);
  public final static native long RsTlvKeyValueWide_wValue_get(long jarg1, RsTlvKeyValueWide jarg1_);
  public final static native long new_RsTlvKeyValueWideSet();
  public final static native void delete_RsTlvKeyValueWideSet(long jarg1);
  public final static native long RsTlvKeyValueWideSet_TlvSize(long jarg1, RsTlvKeyValueWideSet jarg1_);
  public final static native void RsTlvKeyValueWideSet_TlvClear(long jarg1, RsTlvKeyValueWideSet jarg1_);
  public final static native boolean RsTlvKeyValueWideSet_SetTlv(long jarg1, RsTlvKeyValueWideSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsTlvKeyValueWideSet_GetTlv(long jarg1, RsTlvKeyValueWideSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RsTlvKeyValueWideSet_print(long jarg1, RsTlvKeyValueWideSet jarg1_, long jarg2, int jarg3);
  public final static native void RsTlvKeyValueWideSet_wPairs_set(long jarg1, RsTlvKeyValueWideSet jarg1_, long jarg2);
  public final static native long RsTlvKeyValueWideSet_wPairs_get(long jarg1, RsTlvKeyValueWideSet jarg1_);
  public final static native short RS_PKT_SUBTYPE_GXSFORUM_GROUP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSFORUM_MESSAGE_ITEM_get();
  public final static native long new_RsGxsForumGroupItem();
  public final static native void delete_RsGxsForumGroupItem(long jarg1);
  public final static native void RsGxsForumGroupItem_clear(long jarg1, RsGxsForumGroupItem jarg1_);
  public final static native long RsGxsForumGroupItem_print__SWIG_0(long jarg1, RsGxsForumGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsForumGroupItem_print__SWIG_1(long jarg1, RsGxsForumGroupItem jarg1_, long jarg2);
  public final static native void RsGxsForumGroupItem_mGroup_set(long jarg1, RsGxsForumGroupItem jarg1_, long jarg2, RsGxsForumGroup jarg2_);
  public final static native long RsGxsForumGroupItem_mGroup_get(long jarg1, RsGxsForumGroupItem jarg1_);
  public final static native long new_RsGxsForumMsgItem();
  public final static native void delete_RsGxsForumMsgItem(long jarg1);
  public final static native void RsGxsForumMsgItem_clear(long jarg1, RsGxsForumMsgItem jarg1_);
  public final static native long RsGxsForumMsgItem_print__SWIG_0(long jarg1, RsGxsForumMsgItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsForumMsgItem_print__SWIG_1(long jarg1, RsGxsForumMsgItem jarg1_, long jarg2);
  public final static native void RsGxsForumMsgItem_mMsg_set(long jarg1, RsGxsForumMsgItem jarg1_, long jarg2, RsGxsForumMsg jarg2_);
  public final static native long RsGxsForumMsgItem_mMsg_get(long jarg1, RsGxsForumMsgItem jarg1_);
  public final static native long new_RsGxsForumSerialiser();
  public final static native void delete_RsGxsForumSerialiser(long jarg1);
  public final static native long RsGxsForumSerialiser_size(long jarg1, RsGxsForumSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsForumSerialiser_serialise(long jarg1, RsGxsForumSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsForumSerialiser_deserialise(long jarg1, RsGxsForumSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_GXSID_GROUP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSID_OPINION_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSID_COMMENT_ITEM_get();
  public final static native long new_RsGxsIdGroupItem();
  public final static native void delete_RsGxsIdGroupItem(long jarg1);
  public final static native void RsGxsIdGroupItem_clear(long jarg1, RsGxsIdGroupItem jarg1_);
  public final static native long RsGxsIdGroupItem_print__SWIG_0(long jarg1, RsGxsIdGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsIdGroupItem_print__SWIG_1(long jarg1, RsGxsIdGroupItem jarg1_, long jarg2);
  public final static native void RsGxsIdGroupItem_group_set(long jarg1, RsGxsIdGroupItem jarg1_, long jarg2, RsGxsIdGroup jarg2_);
  public final static native long RsGxsIdGroupItem_group_get(long jarg1, RsGxsIdGroupItem jarg1_);
  public final static native long new_RsGxsIdOpinionItem();
  public final static native void delete_RsGxsIdOpinionItem(long jarg1);
  public final static native void RsGxsIdOpinionItem_clear(long jarg1, RsGxsIdOpinionItem jarg1_);
  public final static native long RsGxsIdOpinionItem_print__SWIG_0(long jarg1, RsGxsIdOpinionItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsIdOpinionItem_print__SWIG_1(long jarg1, RsGxsIdOpinionItem jarg1_, long jarg2);
  public final static native void RsGxsIdOpinionItem_opinion_set(long jarg1, RsGxsIdOpinionItem jarg1_, long jarg2, RsGxsIdOpinion jarg2_);
  public final static native long RsGxsIdOpinionItem_opinion_get(long jarg1, RsGxsIdOpinionItem jarg1_);
  public final static native long new_RsGxsIdCommentItem();
  public final static native void delete_RsGxsIdCommentItem(long jarg1);
  public final static native void RsGxsIdCommentItem_clear(long jarg1, RsGxsIdCommentItem jarg1_);
  public final static native long RsGxsIdCommentItem_print__SWIG_0(long jarg1, RsGxsIdCommentItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsIdCommentItem_print__SWIG_1(long jarg1, RsGxsIdCommentItem jarg1_, long jarg2);
  public final static native void RsGxsIdCommentItem_comment_set(long jarg1, RsGxsIdCommentItem jarg1_, long jarg2, RsGxsIdComment jarg2_);
  public final static native long RsGxsIdCommentItem_comment_get(long jarg1, RsGxsIdCommentItem jarg1_);
  public final static native long new_RsGxsIdSerialiser();
  public final static native void delete_RsGxsIdSerialiser(long jarg1);
  public final static native long RsGxsIdSerialiser_size(long jarg1, RsGxsIdSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsIdSerialiser_serialise(long jarg1, RsGxsIdSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsIdSerialiser_deserialise(long jarg1, RsGxsIdSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_GXSCOMMENT_COMMENT_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSCOMMENT_VOTE_ITEM_get();
  public final static native long new_RsGxsCommentItem(int jarg1);
  public final static native void delete_RsGxsCommentItem(long jarg1);
  public final static native void RsGxsCommentItem_clear(long jarg1, RsGxsCommentItem jarg1_);
  public final static native long RsGxsCommentItem_print__SWIG_0(long jarg1, RsGxsCommentItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsCommentItem_print__SWIG_1(long jarg1, RsGxsCommentItem jarg1_, long jarg2);
  public final static native void RsGxsCommentItem_mMsg_set(long jarg1, RsGxsCommentItem jarg1_, long jarg2, RsGxsComment jarg2_);
  public final static native long RsGxsCommentItem_mMsg_get(long jarg1, RsGxsCommentItem jarg1_);
  public final static native long new_RsGxsVoteItem(int jarg1);
  public final static native void delete_RsGxsVoteItem(long jarg1);
  public final static native void RsGxsVoteItem_clear(long jarg1, RsGxsVoteItem jarg1_);
  public final static native long RsGxsVoteItem_print__SWIG_0(long jarg1, RsGxsVoteItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsVoteItem_print__SWIG_1(long jarg1, RsGxsVoteItem jarg1_, long jarg2);
  public final static native void RsGxsVoteItem_mMsg_set(long jarg1, RsGxsVoteItem jarg1_, long jarg2, RsGxsVote jarg2_);
  public final static native long RsGxsVoteItem_mMsg_get(long jarg1, RsGxsVoteItem jarg1_);
  public final static native long new_RsGxsCommentSerialiser(int jarg1);
  public final static native void delete_RsGxsCommentSerialiser(long jarg1);
  public final static native long RsGxsCommentSerialiser_size(long jarg1, RsGxsCommentSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsCommentSerialiser_serialise(long jarg1, RsGxsCommentSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsCommentSerialiser_deserialise(long jarg1, RsGxsCommentSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_WIRE_GROUP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_WIRE_PULSE_ITEM_get();
  public final static native long new_RsGxsWireGroupItem();
  public final static native void delete_RsGxsWireGroupItem(long jarg1);
  public final static native void RsGxsWireGroupItem_clear(long jarg1, RsGxsWireGroupItem jarg1_);
  public final static native long RsGxsWireGroupItem_print__SWIG_0(long jarg1, RsGxsWireGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsWireGroupItem_print__SWIG_1(long jarg1, RsGxsWireGroupItem jarg1_, long jarg2);
  public final static native void RsGxsWireGroupItem_group_set(long jarg1, RsGxsWireGroupItem jarg1_, long jarg2, RsWireGroup jarg2_);
  public final static native long RsGxsWireGroupItem_group_get(long jarg1, RsGxsWireGroupItem jarg1_);
  public final static native long new_RsGxsWirePulseItem();
  public final static native void delete_RsGxsWirePulseItem(long jarg1);
  public final static native void RsGxsWirePulseItem_clear(long jarg1, RsGxsWirePulseItem jarg1_);
  public final static native long RsGxsWirePulseItem_print__SWIG_0(long jarg1, RsGxsWirePulseItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsWirePulseItem_print__SWIG_1(long jarg1, RsGxsWirePulseItem jarg1_, long jarg2);
  public final static native void RsGxsWirePulseItem_pulse_set(long jarg1, RsGxsWirePulseItem jarg1_, long jarg2, RsWirePulse jarg2_);
  public final static native long RsGxsWirePulseItem_pulse_get(long jarg1, RsGxsWirePulseItem jarg1_);
  public final static native long new_RsGxsWireSerialiser();
  public final static native void delete_RsGxsWireSerialiser(long jarg1);
  public final static native long RsGxsWireSerialiser_size(long jarg1, RsGxsWireSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsWireSerialiser_serialise(long jarg1, RsGxsWireSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsWireSerialiser_deserialise(long jarg1, RsGxsWireSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_PHOTO_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_PHOTO_SHOW_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_PHOTO_COMMENT_ITEM_get();
  public final static native long new_RsGxsPhotoAlbumItem();
  public final static native void delete_RsGxsPhotoAlbumItem(long jarg1);
  public final static native void RsGxsPhotoAlbumItem_clear(long jarg1, RsGxsPhotoAlbumItem jarg1_);
  public final static native long RsGxsPhotoAlbumItem_print__SWIG_0(long jarg1, RsGxsPhotoAlbumItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsPhotoAlbumItem_print__SWIG_1(long jarg1, RsGxsPhotoAlbumItem jarg1_, long jarg2);
  public final static native void RsGxsPhotoAlbumItem_album_set(long jarg1, RsGxsPhotoAlbumItem jarg1_, long jarg2, RsPhotoAlbum jarg2_);
  public final static native long RsGxsPhotoAlbumItem_album_get(long jarg1, RsGxsPhotoAlbumItem jarg1_);
  public final static native long new_RsGxsPhotoPhotoItem();
  public final static native void delete_RsGxsPhotoPhotoItem(long jarg1);
  public final static native void RsGxsPhotoPhotoItem_clear(long jarg1, RsGxsPhotoPhotoItem jarg1_);
  public final static native long RsGxsPhotoPhotoItem_print__SWIG_0(long jarg1, RsGxsPhotoPhotoItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsPhotoPhotoItem_print__SWIG_1(long jarg1, RsGxsPhotoPhotoItem jarg1_, long jarg2);
  public final static native void RsGxsPhotoPhotoItem_photo_set(long jarg1, RsGxsPhotoPhotoItem jarg1_, long jarg2, RsPhotoPhoto jarg2_);
  public final static native long RsGxsPhotoPhotoItem_photo_get(long jarg1, RsGxsPhotoPhotoItem jarg1_);
  public final static native long new_RsGxsPhotoCommentItem();
  public final static native void delete_RsGxsPhotoCommentItem(long jarg1);
  public final static native void RsGxsPhotoCommentItem_clear(long jarg1, RsGxsPhotoCommentItem jarg1_);
  public final static native long RsGxsPhotoCommentItem_print__SWIG_0(long jarg1, RsGxsPhotoCommentItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsPhotoCommentItem_print__SWIG_1(long jarg1, RsGxsPhotoCommentItem jarg1_, long jarg2);
  public final static native void RsGxsPhotoCommentItem_comment_set(long jarg1, RsGxsPhotoCommentItem jarg1_, long jarg2, RsPhotoComment jarg2_);
  public final static native long RsGxsPhotoCommentItem_comment_get(long jarg1, RsGxsPhotoCommentItem jarg1_);
  public final static native long new_RsGxsPhotoSerialiser();
  public final static native void delete_RsGxsPhotoSerialiser(long jarg1);
  public final static native long RsGxsPhotoSerialiser_size(long jarg1, RsGxsPhotoSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsPhotoSerialiser_serialise(long jarg1, RsGxsPhotoSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsPhotoSerialiser_deserialise(long jarg1, RsGxsPhotoSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_SUBTYPE_POSTED_GRP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_POSTED_POST_ITEM_get();
  public final static native long new_RsGxsPostedGroupItem();
  public final static native void delete_RsGxsPostedGroupItem(long jarg1);
  public final static native void RsGxsPostedGroupItem_clear(long jarg1, RsGxsPostedGroupItem jarg1_);
  public final static native long RsGxsPostedGroupItem_print__SWIG_0(long jarg1, RsGxsPostedGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsPostedGroupItem_print__SWIG_1(long jarg1, RsGxsPostedGroupItem jarg1_, long jarg2);
  public final static native void RsGxsPostedGroupItem_mGroup_set(long jarg1, RsGxsPostedGroupItem jarg1_, long jarg2, RsPostedGroup jarg2_);
  public final static native long RsGxsPostedGroupItem_mGroup_get(long jarg1, RsGxsPostedGroupItem jarg1_);
  public final static native long new_RsGxsPostedPostItem();
  public final static native void delete_RsGxsPostedPostItem(long jarg1);
  public final static native void RsGxsPostedPostItem_clear(long jarg1, RsGxsPostedPostItem jarg1_);
  public final static native long RsGxsPostedPostItem_print__SWIG_0(long jarg1, RsGxsPostedPostItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsPostedPostItem_print__SWIG_1(long jarg1, RsGxsPostedPostItem jarg1_, long jarg2);
  public final static native void RsGxsPostedPostItem_mPost_set(long jarg1, RsGxsPostedPostItem jarg1_, long jarg2, RsPostedPost jarg2_);
  public final static native long RsGxsPostedPostItem_mPost_get(long jarg1, RsGxsPostedPostItem jarg1_);
  public final static native long new_RsGxsPostedSerialiser();
  public final static native void delete_RsGxsPostedSerialiser(long jarg1);
  public final static native long RsGxsPostedSerialiser_size(long jarg1, RsGxsPostedSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsPostedSerialiser_serialise(long jarg1, RsGxsPostedSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsPostedSerialiser_deserialise(long jarg1, RsGxsPostedSerialiser jarg1_, long jarg2, long jarg3);
  public final static native long new_RsStackFileLock(long jarg1);
  public final static native void delete_RsStackFileLock(long jarg1);
  public final static native long getTopDir(long jarg1);
  public final static native long getRootDir(long jarg1);
  public final static native long removeRootDir(long jarg1);
  public final static native void removeTopDir(long jarg1, long jarg2);
  public final static native long removeRootDirs(long jarg1, long jarg2);
  public final static native boolean renameFile(long jarg1, long jarg2);
  public final static native long rs_CRC32(long jarg1, long jarg2);
  public final static native boolean crc32File(long jarg1, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native int breakupDirList(long jarg1, long jarg2);
  public final static native boolean copyFile(long jarg1, long jarg2);
  public final static native boolean fileExists(long jarg1);
  public final static native boolean checkFile__SWIG_0(long jarg1, boolean jarg2);
  public final static native boolean checkFile__SWIG_1(long jarg1);
  public final static native boolean checkDirectory(long jarg1);
  public final static native boolean checkCreateDirectory(long jarg1);
  public final static native boolean cleanupDirectory(long jarg1, long jarg2);
  public final static native boolean cleanupDirectoryFaster(long jarg1, long jarg2);
  public final static native boolean hashFile(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean getFileHash__SWIG_0(long jarg1, long jarg2, long jarg3, long jarg4, RsThread jarg4_);
  public final static native boolean getFileHash__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long sha1sum(long jarg1, long jarg2);
  public final static native int createLockFile(long jarg1, long jarg2);
  public final static native void releaseLockFile(int jarg1);
  public final static native long getWideTopDir(long jarg1);
  public final static native long getWideRootDir(long jarg1);
  public final static native long removeWideRootDir(long jarg1);
  public final static native long removeWideTopDir(long jarg1);
  public final static native long removeWideRootDirs(long jarg1, long jarg2);
  public final static native boolean renameWideFile(long jarg1, long jarg2);
  public final static native int breakupWideDirList(long jarg1, long jarg2);
  public final static native boolean checkWideDirectory(long jarg1);
  public final static native boolean checkWideCreateDirectory(long jarg1);
  public final static native boolean cleanupWideDirectory(long jarg1, long jarg2);
  public final static native boolean hashWideFile(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean getWideFileHash(long jarg1, long jarg2, long jarg3);
  public final static native long rs_fopen(String jarg1, String jarg2);
  public final static native long convertPathToUnix(long jarg1);
  public final static native long makePath(long jarg1, long jarg2);
  public final static native short RS_PKT_SUBTYPE_GXSCHANNEL_GROUP_ITEM_get();
  public final static native short RS_PKT_SUBTYPE_GXSCHANNEL_POST_ITEM_get();
  public final static native long new_RsGxsChannelGroupItem();
  public final static native void delete_RsGxsChannelGroupItem(long jarg1);
  public final static native void RsGxsChannelGroupItem_clear(long jarg1, RsGxsChannelGroupItem jarg1_);
  public final static native long RsGxsChannelGroupItem_print__SWIG_0(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsChannelGroupItem_print__SWIG_1(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2);
  public final static native boolean RsGxsChannelGroupItem_fromChannelGroup(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2, RsGxsChannelGroup jarg2_, boolean jarg3);
  public final static native boolean RsGxsChannelGroupItem_toChannelGroup(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2, RsGxsChannelGroup jarg2_, boolean jarg3);
  public final static native void RsGxsChannelGroupItem_mDescription_set(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2);
  public final static native long RsGxsChannelGroupItem_mDescription_get(long jarg1, RsGxsChannelGroupItem jarg1_);
  public final static native void RsGxsChannelGroupItem_mImage_set(long jarg1, RsGxsChannelGroupItem jarg1_, long jarg2, RsTlvImage jarg2_);
  public final static native long RsGxsChannelGroupItem_mImage_get(long jarg1, RsGxsChannelGroupItem jarg1_);
  public final static native long new_RsGxsChannelPostItem();
  public final static native void delete_RsGxsChannelPostItem(long jarg1);
  public final static native void RsGxsChannelPostItem_clear(long jarg1, RsGxsChannelPostItem jarg1_);
  public final static native long RsGxsChannelPostItem_print__SWIG_0(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGxsChannelPostItem_print__SWIG_1(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2);
  public final static native boolean RsGxsChannelPostItem_fromChannelPost(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2, RsGxsChannelPost jarg2_, boolean jarg3);
  public final static native boolean RsGxsChannelPostItem_toChannelPost(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2, RsGxsChannelPost jarg2_, boolean jarg3);
  public final static native void RsGxsChannelPostItem_mMsg_set(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2);
  public final static native long RsGxsChannelPostItem_mMsg_get(long jarg1, RsGxsChannelPostItem jarg1_);
  public final static native void RsGxsChannelPostItem_mAttachment_set(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2, RsTlvFileSet jarg2_);
  public final static native long RsGxsChannelPostItem_mAttachment_get(long jarg1, RsGxsChannelPostItem jarg1_);
  public final static native void RsGxsChannelPostItem_mThumbnail_set(long jarg1, RsGxsChannelPostItem jarg1_, long jarg2, RsTlvImage jarg2_);
  public final static native long RsGxsChannelPostItem_mThumbnail_get(long jarg1, RsGxsChannelPostItem jarg1_);
  public final static native long new_RsGxsChannelSerialiser();
  public final static native void delete_RsGxsChannelSerialiser(long jarg1);
  public final static native long RsGxsChannelSerialiser_size(long jarg1, RsGxsChannelSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGxsChannelSerialiser_serialise(long jarg1, RsGxsChannelSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGxsChannelSerialiser_deserialise(long jarg1, RsGxsChannelSerialiser jarg1_, long jarg2, long jarg3);
  public final static native short RS_PKT_CLASS_PLUGIN_SUBTYPE_HASHSET_get();
  public final static native void delete_RsPluginItem(long jarg1);
  public final static native boolean RsPluginItem_serialise(long jarg1, RsPluginItem jarg1_, long jarg2, long jarg3);
  public final static native long RsPluginItem_serial_size(long jarg1, RsPluginItem jarg1_);
  public final static native void RsPluginItem_clear(long jarg1, RsPluginItem jarg1_);
  public final static native long new_RsPluginSerialiser();
  public final static native long RsPluginSerialiser_size(long jarg1, RsPluginSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsPluginSerialiser_serialise(long jarg1, RsPluginSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsPluginSerialiser_deserialise(long jarg1, RsPluginSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsPluginSerialiser(long jarg1);
  public final static native void RsPluginHashSetItem_hashes_set(long jarg1, RsPluginHashSetItem jarg1_, long jarg2, RsTlvHashSet jarg2_);
  public final static native long RsPluginHashSetItem_hashes_get(long jarg1, RsPluginHashSetItem jarg1_);
  public final static native long RsPluginHashSetItem_print(long jarg1, RsPluginHashSetItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsPluginHashSetItem(long jarg1);
  public final static native long RS_GROUTER_MATRIX_MAX_HIT_ENTRIES_get();
  public final static native long RS_GROUTER_MATRIX_MIN_TIME_BETWEEN_HITS_get();
  public final static native long RS_GROUTER_DEBUG_OUTPUT_PERIOD_get();
  public final static native long RS_GROUTER_AUTOWASH_PERIOD_get();
  public final static native long RS_GROUTER_PUBLISH_CAMPAIGN_PERIOD_get();
  public final static native long RS_GROUTER_PUBLISH_KEY_TIME_INTERVAL_get();
  public final static native void GRouterClient_receiveLongDistanceItem(long jarg1, GRouterClient jarg1_, long jarg2, long jarg3);
  public final static native void delete_GRouterClient(long jarg1);
  public final static native long new_RoutingCacheInfo();
  public final static native void delete_RoutingCacheInfo(long jarg1);
  public final static native void RoutingMatrixInfo_per_friend_probabilities_set(long jarg1, RoutingMatrixInfo jarg1_, long jarg2);
  public final static native long RoutingMatrixInfo_per_friend_probabilities_get(long jarg1, RoutingMatrixInfo jarg1_);
  public final static native void RoutingMatrixInfo_published_keys_set(long jarg1, RoutingMatrixInfo jarg1_, long jarg2);
  public final static native long RoutingMatrixInfo_published_keys_get(long jarg1, RoutingMatrixInfo jarg1_);
  public final static native long new_RoutingMatrixInfo();
  public final static native void delete_RoutingMatrixInfo(long jarg1);
  public final static native boolean RsGRouter_getRoutingCacheInfo(long jarg1, RsGRouter jarg1_, long jarg2, RoutingCacheInfo jarg2_);
  public final static native boolean RsGRouter_getRoutingMatrixInfo(long jarg1, RsGRouter jarg1_, long jarg2, RoutingMatrixInfo jarg2_);
  public final static native void RsGRouter_sendData(long jarg1, RsGRouter jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, long jarg4);
  public final static native boolean RsGRouter_registerKey(long jarg1, RsGRouter jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, long jarg4);
  public final static native void delete_RsGRouter(long jarg1);
  public final static native void rsGRouter_set(long jarg1, RsGRouter jarg1_);
  public final static native long rsGRouter_get();
  public final static native void RoutingMatrixHitEntry_friend_id_set(long jarg1, RoutingMatrixHitEntry jarg1_, long jarg2);
  public final static native long RoutingMatrixHitEntry_friend_id_get(long jarg1, RoutingMatrixHitEntry jarg1_);
  public final static native void RoutingMatrixHitEntry_weight_set(long jarg1, RoutingMatrixHitEntry jarg1_, float jarg2);
  public final static native float RoutingMatrixHitEntry_weight_get(long jarg1, RoutingMatrixHitEntry jarg1_);
  public final static native void RoutingMatrixHitEntry_time_stamp_set(long jarg1, RoutingMatrixHitEntry jarg1_, long jarg2);
  public final static native long RoutingMatrixHitEntry_time_stamp_get(long jarg1, RoutingMatrixHitEntry jarg1_);
  public final static native long new_RoutingMatrixHitEntry();
  public final static native void delete_RoutingMatrixHitEntry(long jarg1);
  public final static native long new_GRouterMatrix();
  public final static native boolean GRouterMatrix_computeRoutingProbabilities(long jarg1, GRouterMatrix jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, long jarg4);
  public final static native boolean GRouterMatrix_updateRoutingProbabilities(long jarg1, GRouterMatrix jarg1_);
  public final static native boolean GRouterMatrix_addRoutingClue(long jarg1, GRouterMatrix jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, float jarg4, long jarg5, long jarg6);
  public final static native void GRouterMatrix_debugDump(long jarg1, GRouterMatrix jarg1_);
  public final static native void delete_GRouterMatrix(long jarg1);
  public final static native int FLAGS_TAG_GROUTER_CACHE_get();
  public final static native long GROUTER_CACHE_INFO_FLAGS_WAITING_ACK_get();
  public final static native void GRouterMessageDataItem_data_bytes_set(long jarg1, GRouterMessageDataItem jarg1_, long jarg2);
  public final static native long GRouterMessageDataItem_data_bytes_get(long jarg1, GRouterMessageDataItem jarg1_);
  public final static native void GRouterMessageDataItem_data_size_set(long jarg1, GRouterMessageDataItem jarg1_, long jarg2);
  public final static native long GRouterMessageDataItem_data_size_get(long jarg1, GRouterMessageDataItem jarg1_);
  public final static native void GRouterMessageDataItem_message_id_set(long jarg1, GRouterMessageDataItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger GRouterMessageDataItem_message_id_get(long jarg1, GRouterMessageDataItem jarg1_);
  public final static native void GRouterMessageDataItem_destination_set(long jarg1, GRouterMessageDataItem jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long GRouterMessageDataItem_destination_get(long jarg1, GRouterMessageDataItem jarg1_);
  public final static native void delete_GRouterMessageDataItem(long jarg1);
  public final static native void GRouterCacheInfo_flags_set(long jarg1, GRouterCacheInfo jarg1_, long jarg2);
  public final static native long GRouterCacheInfo_flags_get(long jarg1, GRouterCacheInfo jarg1_);
  public final static native void GRouterCacheInfo_last_activity_set(long jarg1, GRouterCacheInfo jarg1_, long jarg2);
  public final static native long GRouterCacheInfo_last_activity_get(long jarg1, GRouterCacheInfo jarg1_);
  public final static native long new_GRouterCacheInfo();
  public final static native void delete_GRouterCacheInfo(long jarg1);
  public final static native void GRouterCache__pending_messages_set(long jarg1, GRouterCache jarg1_, long jarg2);
  public final static native long GRouterCache__pending_messages_get(long jarg1, GRouterCache jarg1_);
  public final static native void GRouterCache__cache_info_set(long jarg1, GRouterCache jarg1_, long jarg2);
  public final static native long GRouterCache__cache_info_get(long jarg1, GRouterCache jarg1_);
  public final static native long new_GRouterCache();
  public final static native void delete_GRouterCache(long jarg1);
  public final static native short RS_SERVICE_TYPE_GROUTER_get();
  public final static native short RS_PKT_SUBTYPE_GROUTER_PUBLISH_KEY_get();
  public final static native short RS_PKT_SUBTYPE_GROUTER_DATA_get();
  public final static native short RS_PKT_SUBTYPE_GROUTER_ACK_get();
  public final static native short QOS_PRIORITY_RS_GROUTER_PUBLISH_KEY_get();
  public final static native short QOS_PRIORITY_RS_GROUTER_ACK_get();
  public final static native short QOS_PRIORITY_RS_GROUTER_DATA_get();
  public final static native long RS_GROUTER_ACK_STATE_RECEIVED_get();
  public final static native long RS_GROUTER_ACK_STATE_RECEIVED_INDIRECTLY_get();
  public final static native long RS_GROUTER_ACK_STATE_GIVEN_UP_get();
  public final static native boolean RsGRouterItem_serialise(long jarg1, RsGRouterItem jarg1_, long jarg2, long jarg3);
  public final static native long RsGRouterItem_serial_size(long jarg1, RsGRouterItem jarg1_);
  public final static native void RsGRouterItem_clear(long jarg1, RsGRouterItem jarg1_);
  public final static native long RsGRouterItem_print__SWIG_0(long jarg1, RsGRouterItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGRouterItem_print__SWIG_1(long jarg1, RsGRouterItem jarg1_, long jarg2);
  public final static native void delete_RsGRouterItem(long jarg1);
  public final static native long new_RsGRouterPublishKeyItem();
  public final static native boolean RsGRouterPublishKeyItem_serialise(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2, long jarg3);
  public final static native long RsGRouterPublishKeyItem_serial_size(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void RsGRouterPublishKeyItem_clear(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native long RsGRouterPublishKeyItem_print__SWIG_0(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGRouterPublishKeyItem_print__SWIG_1(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2);
  public final static native void RsGRouterPublishKeyItem_diffusion_id_set(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2);
  public final static native long RsGRouterPublishKeyItem_diffusion_id_get(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void RsGRouterPublishKeyItem_published_key_set(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long RsGRouterPublishKeyItem_published_key_get(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void RsGRouterPublishKeyItem_service_id_set(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2);
  public final static native long RsGRouterPublishKeyItem_service_id_get(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void RsGRouterPublishKeyItem_randomized_distance_set(long jarg1, RsGRouterPublishKeyItem jarg1_, float jarg2);
  public final static native float RsGRouterPublishKeyItem_randomized_distance_get(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void RsGRouterPublishKeyItem_description_string_set(long jarg1, RsGRouterPublishKeyItem jarg1_, long jarg2);
  public final static native long RsGRouterPublishKeyItem_description_string_get(long jarg1, RsGRouterPublishKeyItem jarg1_);
  public final static native void delete_RsGRouterPublishKeyItem(long jarg1);
  public final static native long new_RsGRouterGenericDataItem();
  public final static native boolean RsGRouterGenericDataItem_serialise(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2, long jarg3);
  public final static native long RsGRouterGenericDataItem_serial_size(long jarg1, RsGRouterGenericDataItem jarg1_);
  public final static native void RsGRouterGenericDataItem_clear(long jarg1, RsGRouterGenericDataItem jarg1_);
  public final static native long RsGRouterGenericDataItem_print__SWIG_0(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGRouterGenericDataItem_print__SWIG_1(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2);
  public final static native void RsGRouterGenericDataItem_destination_key_set(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long RsGRouterGenericDataItem_destination_key_get(long jarg1, RsGRouterGenericDataItem jarg1_);
  public final static native void RsGRouterGenericDataItem_data_size_set(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2);
  public final static native long RsGRouterGenericDataItem_data_size_get(long jarg1, RsGRouterGenericDataItem jarg1_);
  public final static native void RsGRouterGenericDataItem_data_bytes_set(long jarg1, RsGRouterGenericDataItem jarg1_, long jarg2);
  public final static native long RsGRouterGenericDataItem_data_bytes_get(long jarg1, RsGRouterGenericDataItem jarg1_);
  public final static native void delete_RsGRouterGenericDataItem(long jarg1);
  public final static native long new_RsGRouterACKItem();
  public final static native boolean RsGRouterACKItem_serialise(long jarg1, RsGRouterACKItem jarg1_, long jarg2, long jarg3);
  public final static native long RsGRouterACKItem_serial_size(long jarg1, RsGRouterACKItem jarg1_);
  public final static native void RsGRouterACKItem_clear(long jarg1, RsGRouterACKItem jarg1_);
  public final static native long RsGRouterACKItem_print__SWIG_0(long jarg1, RsGRouterACKItem jarg1_, long jarg2, int jarg3);
  public final static native long RsGRouterACKItem_print__SWIG_1(long jarg1, RsGRouterACKItem jarg1_, long jarg2);
  public final static native void RsGRouterACKItem_destination_key_set(long jarg1, RsGRouterACKItem jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long RsGRouterACKItem_destination_key_get(long jarg1, RsGRouterACKItem jarg1_);
  public final static native void RsGRouterACKItem_state_set(long jarg1, RsGRouterACKItem jarg1_, long jarg2);
  public final static native long RsGRouterACKItem_state_get(long jarg1, RsGRouterACKItem jarg1_);
  public final static native void delete_RsGRouterACKItem(long jarg1);
  public final static native long new_RsGRouterSerialiser();
  public final static native long RsGRouterSerialiser_size(long jarg1, RsGRouterSerialiser jarg1_, long jarg2, RsItem jarg2_);
  public final static native boolean RsGRouterSerialiser_serialise(long jarg1, RsGRouterSerialiser jarg1_, long jarg2, RsItem jarg2_, long jarg3, long jarg4);
  public final static native long RsGRouterSerialiser_deserialise(long jarg1, RsGRouterSerialiser jarg1_, long jarg2, long jarg3);
  public final static native void delete_RsGRouterSerialiser(long jarg1);
  public final static native long CONFIG_TYPE_GROUTER_get();
  public final static native void GRouterPublishedKeyInfo_service_id_set(long jarg1, GRouterPublishedKeyInfo jarg1_, long jarg2);
  public final static native long GRouterPublishedKeyInfo_service_id_get(long jarg1, GRouterPublishedKeyInfo jarg1_);
  public final static native void GRouterPublishedKeyInfo_description_string_set(long jarg1, GRouterPublishedKeyInfo jarg1_, long jarg2);
  public final static native long GRouterPublishedKeyInfo_description_string_get(long jarg1, GRouterPublishedKeyInfo jarg1_);
  public final static native void GRouterPublishedKeyInfo_last_published_time_set(long jarg1, GRouterPublishedKeyInfo jarg1_, long jarg2);
  public final static native long GRouterPublishedKeyInfo_last_published_time_get(long jarg1, GRouterPublishedKeyInfo jarg1_);
  public final static native void GRouterPublishedKeyInfo_validity_time_set(long jarg1, GRouterPublishedKeyInfo jarg1_, long jarg2);
  public final static native long GRouterPublishedKeyInfo_validity_time_get(long jarg1, GRouterPublishedKeyInfo jarg1_);
  public final static native long new_GRouterPublishedKeyInfo();
  public final static native void delete_GRouterPublishedKeyInfo(long jarg1);
  public final static native long new_p3GRouter(long jarg1, p3LinkMgr jarg1_);
  public final static native boolean p3GRouter_registerClientService(long jarg1, p3GRouter jarg1_, long jarg2, long jarg3);
  public final static native boolean p3GRouter_registerKey(long jarg1, p3GRouter jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, long jarg4);
  public final static native void p3GRouter_sendData(long jarg1, p3GRouter jarg1_, long jarg2, Sha1CheckSum jarg2_, long jarg3, long jarg4);
  public final static native boolean p3GRouter_getRoutingMatrixInfo(long jarg1, p3GRouter jarg1_, long jarg2, RoutingMatrixInfo jarg2_);
  public final static native boolean p3GRouter_getRoutingCacheInfo(long jarg1, p3GRouter jarg1_, long jarg2, RoutingCacheInfo jarg2_);
  public final static native void delete_p3GRouter(long jarg1);
  public final static native long new_p3History(long jarg1, p3HistoryMgr jarg1_);
  public final static native void delete_p3History(long jarg1);
  public final static native boolean p3History_getMessages(long jarg1, p3History jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3History_getMessage(long jarg1, p3History jarg1_, long jarg2, long jarg3, HistoryMsg jarg3_);
  public final static native void p3History_removeMessages(long jarg1, p3History jarg1_, long jarg2);
  public final static native void p3History_clear(long jarg1, p3History jarg1_, long jarg2);
  public final static native boolean p3History_getEnable(long jarg1, p3History jarg1_, long jarg2);
  public final static native void p3History_setEnable(long jarg1, p3History jarg1_, long jarg2, boolean jarg3);
  public final static native long p3History_getSaveCount(long jarg1, p3History jarg1_, long jarg2);
  public final static native void p3History_setSaveCount(long jarg1, p3History jarg1_, long jarg2, long jarg3);
  public final static native void p3History_setMaxStorageDuration(long jarg1, p3History jarg1_, long jarg2);
  public final static native long p3History_getMaxStorageDuration(long jarg1, p3History jarg1_);
  public final static native String RS_CONFIG_ADVANCED_STRING_get();
  public final static native long new_p3ServerConfig(long jarg1, p3PeerMgr jarg1_, long jarg2, p3LinkMgr jarg2_, long jarg3, p3NetMgr jarg3_, long jarg4, pqihandler jarg4_, long jarg5, p3GeneralConfig jarg5_);
  public final static native void delete_p3ServerConfig(long jarg1);
  public final static native void p3ServerConfig_load_config(long jarg1, p3ServerConfig jarg1_);
  public final static native int p3ServerConfig_getConfigNetStatus(long jarg1, p3ServerConfig jarg1_, long jarg2, RsConfigNetStatus jarg2_);
  public final static native int p3ServerConfig_getConfigStartup(long jarg1, p3ServerConfig jarg1_, long jarg2, RsConfigStartup jarg2_);
  public final static native int p3ServerConfig_getTotalBandwidthRates(long jarg1, p3ServerConfig jarg1_, long jarg2, RsConfigDataRates jarg2_);
  public final static native int p3ServerConfig_getAllBandwidthRates(long jarg1, p3ServerConfig jarg1_, long jarg2);
  public final static native long p3ServerConfig_RsConfigDirectory(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_RsConfigKeysDirectory(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_RsProfileConfigDirectory(long jarg1, p3ServerConfig jarg1_);
  public final static native boolean p3ServerConfig_getStartMinimised(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getRetroShareLink(long jarg1, p3ServerConfig jarg1_);
  public final static native boolean p3ServerConfig_getAutoLogin(long jarg1, p3ServerConfig jarg1_);
  public final static native void p3ServerConfig_setAutoLogin(long jarg1, p3ServerConfig jarg1_, boolean jarg2);
  public final static native boolean p3ServerConfig_RsClearAutoLogin(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getRetroshareDataDirectory(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getUserLevel(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getNetState(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getNetworkMode(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getNatTypeMode(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getNatHoleMode(long jarg1, p3ServerConfig jarg1_);
  public final static native long p3ServerConfig_getConnectModes(long jarg1, p3ServerConfig jarg1_);
  public final static native boolean p3ServerConfig_getConfigurationOption(long jarg1, p3ServerConfig jarg1_, long jarg2, long jarg3);
  public final static native boolean p3ServerConfig_setConfigurationOption(long jarg1, p3ServerConfig jarg1_, long jarg2, long jarg3);
  public final static native long p3ServerConfig_getOperatingMode(long jarg1, p3ServerConfig jarg1_);
  public final static native boolean p3ServerConfig_setOperatingMode(long jarg1, p3ServerConfig jarg1_, long jarg2);
  public final static native int p3ServerConfig_SetMaxDataRates(long jarg1, p3ServerConfig jarg1_, int jarg2, int jarg3);
  public final static native int p3ServerConfig_GetMaxDataRates(long jarg1, p3ServerConfig jarg1_, long jarg2, long jarg3);
  public final static native int p3ServerConfig_GetCurrentDataRates(long jarg1, p3ServerConfig jarg1_, long jarg2, long jarg3);
  public final static native long new_p3Rank(long jarg1);
  public final static native void delete_p3Rank(long jarg1);
  public final static native boolean p3Rank_updated(long jarg1, p3Rank jarg1_);
  public final static native boolean p3Rank_setSortPeriod(long jarg1, p3Rank jarg1_, long jarg2);
  public final static native boolean p3Rank_setSortMethod(long jarg1, p3Rank jarg1_, long jarg2);
  public final static native boolean p3Rank_clearPeerFilter(long jarg1, p3Rank jarg1_);
  public final static native boolean p3Rank_setPeerFilter(long jarg1, p3Rank jarg1_, long jarg2);
  public final static native long p3Rank_getRankingsCount(long jarg1, p3Rank jarg1_);
  public final static native float p3Rank_getMaxRank(long jarg1, p3Rank jarg1_);
  public final static native boolean p3Rank_getRankings(long jarg1, p3Rank jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Rank_getRankDetails(long jarg1, p3Rank jarg1_, long jarg2, long jarg3);
  public final static native long p3Rank_newRankMsg(long jarg1, p3Rank jarg1_, long jarg2, long jarg3, long jarg4, int jarg5);
  public final static native boolean p3Rank_updateComment(long jarg1, p3Rank jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long p3Rank_anonRankMsg(long jarg1, p3Rank jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void delete_p3Photo(long jarg1);
  public final static native boolean p3Photo_updated(long jarg1, p3Photo jarg1_);
  public final static native boolean p3Photo_getPhotoList(long jarg1, p3Photo jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Photo_getShowList(long jarg1, p3Photo jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Photo_getShowDetails(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Photo_getPhotoDetails(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long p3Photo_createShow(long jarg1, p3Photo jarg1_, long jarg2);
  public final static native boolean p3Photo_deleteShow(long jarg1, p3Photo jarg1_, long jarg2);
  public final static native boolean p3Photo_addPhotoToShow(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, short jarg4);
  public final static native boolean p3Photo_movePhotoInShow(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, short jarg4);
  public final static native boolean p3Photo_removePhotoFromShow(long jarg1, p3Photo jarg1_, long jarg2, long jarg3);
  public final static native long p3Photo_addPhoto__SWIG_0(long jarg1, p3Photo jarg1_, long jarg2);
  public final static native boolean p3Photo_addPhoto__SWIG_1(long jarg1, p3Photo jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Photo_deletePhoto(long jarg1, p3Photo jarg1_, long jarg2);
  public final static native boolean p3Photo_modifyShow(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Photo_modifyPhoto(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Photo_modifyShowComment(long jarg1, p3Photo jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RsLoginHandler_getSSLPassword(long jarg1, boolean jarg2, long jarg3);
  public final static native boolean RsLoginHandler_checkAndStoreSSLPasswdIntoGPGFile(long jarg1, long jarg2);
  public final static native boolean RsLoginHandler_enableAutoLogin(long jarg1, long jarg2);
  public final static native boolean RsLoginHandler_clearAutoLogin(long jarg1);
  public final static native long new_RsLoginHandler();
  public final static native void delete_RsLoginHandler(long jarg1);
  public final static native long new_p3Discovery(long jarg1, p3disc jarg1_);
  public final static native void delete_p3Discovery(long jarg1);
  public final static native boolean p3Discovery_getDiscFriends(long jarg1, p3Discovery jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Discovery_getDiscGPGFriends(long jarg1, p3Discovery jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Discovery_getDiscVersions(long jarg1, p3Discovery jarg1_, long jarg2);
  public final static native boolean p3Discovery_getWaitingDiscCount(long jarg1, p3Discovery jarg1_, long jarg2, long jarg3);
  public final static native long new_ftServer(long jarg1, p3PeerMgr jarg1_, long jarg2, p3LinkMgr jarg2_);
  public final static native void ftServer_setConfigDirectory(long jarg1, ftServer jarg1_, long jarg2);
  public final static native void ftServer_setP3Interface(long jarg1, ftServer jarg1_, long jarg2, P3Interface jarg2_);
  public final static native void ftServer_addConfigComponents(long jarg1, ftServer jarg1_, long jarg2, p3ConfigMgr jarg2_);
  public final static native long ftServer_getCacheStrapper(long jarg1, ftServer jarg1_);
  public final static native long ftServer_getCacheTransfer(long jarg1, ftServer jarg1_);
  public final static native long ftServer_OwnId(long jarg1, ftServer jarg1_);
  public final static native void ftServer_SetupFtServer(long jarg1, ftServer jarg1_, long jarg2, NotifyBase jarg2_);
  public final static native void ftServer_connectToTurtleRouter(long jarg1, ftServer jarg1_, long jarg2, p3turtle jarg2_);
  public final static native void ftServer_StartupThreads(long jarg1, ftServer jarg1_);
  public final static native void ftServer_StopThreads(long jarg1, ftServer jarg1_);
  public final static native void ftServer_run(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_checkHash(long jarg1, long jarg2);
  public final static native boolean ftServer_handleTunnelRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native void ftServer_receiveTurtleData(long jarg1, ftServer jarg1_, long jarg2, RsTurtleGenericTunnelItem jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long ftServer_deserialiseItem(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native void ftServer_addVirtualPeer(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void ftServer_removeVirtualPeer(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native long ftServer_getMultiplexer(long jarg1, ftServer jarg1_);
  public final static native long ftServer_getController(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_alreadyHaveFile(long jarg1, ftServer jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean ftServer_FileRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean ftServer_FileCancel(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_FileControl(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_FileClearCompleted(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_setDestinationDirectory(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_setDestinationName(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_setChunkStrategy(long jarg1, ftServer jarg1_, long jarg2, int jarg3);
  public final static native void ftServer_setDefaultChunkStrategy(long jarg1, ftServer jarg1_, int jarg2);
  public final static native int ftServer_defaultChunkStrategy(long jarg1, ftServer jarg1_);
  public final static native long ftServer_freeDiskSpaceLimit(long jarg1, ftServer jarg1_);
  public final static native void ftServer_setFreeDiskSpaceLimit(long jarg1, ftServer jarg1_, long jarg2);
  public final static native long ftServer_getMinPrioritizedTransfers(long jarg1, ftServer jarg1_);
  public final static native void ftServer_setMinPrioritizedTransfers(long jarg1, ftServer jarg1_, long jarg2);
  public final static native long ftServer_getQueueSize(long jarg1, ftServer jarg1_);
  public final static native void ftServer_setQueueSize(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_changeQueuePosition(long jarg1, ftServer jarg1_, long jarg2, int jarg3);
  public final static native boolean ftServer_changeDownloadSpeed(long jarg1, ftServer jarg1_, long jarg2, int jarg3);
  public final static native boolean ftServer_getDownloadSpeed(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_clearDownload(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_FileDownloads(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_FileUploads(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_FileDetails(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native boolean ftServer_FileDownloadChunksDetails(long jarg1, ftServer jarg1_, long jarg2, long jarg3, FileChunksInfo jarg3_);
  public final static native boolean ftServer_FileUploadChunksDetails(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_);
  public final static native boolean ftServer_ExtraFileAdd(long jarg1, ftServer jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6);
  public final static native boolean ftServer_ExtraFileRemove(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_ExtraFileHash(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftServer_ExtraFileStatus(long jarg1, ftServer jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean ftServer_ExtraFileMove(long jarg1, ftServer jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5);
  public final static native int ftServer_RequestDirDetails__SWIG_0(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, DirDetails jarg4_);
  public final static native int ftServer_RequestDirDetails__SWIG_1(long jarg1, ftServer jarg1_, long jarg2, long jarg3, DirDetails jarg3_, long jarg4);
  public final static native long ftServer_getType(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native int ftServer_SearchKeywords__SWIG_0(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int ftServer_SearchKeywords__SWIG_1(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int ftServer_SearchBoolExp__SWIG_0(long jarg1, ftServer jarg1_, long jarg2, Expression jarg2_, long jarg3, long jarg4);
  public final static native int ftServer_SearchBoolExp__SWIG_1(long jarg1, ftServer jarg1_, long jarg2, Expression jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native boolean ftServer_ConvertSharedFilePath(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native void ftServer_ForceDirectoryCheck(long jarg1, ftServer jarg1_);
  public final static native void ftServer_updateSinceGroupPermissionsChanged(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_InDirectoryCheck(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_copyFile(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native void ftServer_setDownloadDirectory(long jarg1, ftServer jarg1_, long jarg2);
  public final static native void ftServer_setPartialsDirectory(long jarg1, ftServer jarg1_, long jarg2);
  public final static native long ftServer_getDownloadDirectory(long jarg1, ftServer jarg1_);
  public final static native long ftServer_getPartialsDirectory(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_getSharedDirectories(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_setSharedDirectories(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_addSharedDirectory(long jarg1, ftServer jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native boolean ftServer_updateShareFlags(long jarg1, ftServer jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native boolean ftServer_removeSharedDirectory(long jarg1, ftServer jarg1_, long jarg2);
  public final static native boolean ftServer_getShareDownloadDirectory(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_shareDownloadDirectory(long jarg1, ftServer jarg1_, boolean jarg2);
  public final static native void ftServer_setRememberHashFilesDuration(long jarg1, ftServer jarg1_, long jarg2);
  public final static native long ftServer_rememberHashFilesDuration(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_rememberHashFiles(long jarg1, ftServer jarg1_);
  public final static native void ftServer_setRememberHashFiles(long jarg1, ftServer jarg1_, boolean jarg2);
  public final static native void ftServer_clearHashCache(long jarg1, ftServer jarg1_);
  public final static native void ftServer_setWatchPeriod(long jarg1, ftServer jarg1_, int jarg2);
  public final static native int ftServer_watchPeriod(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_sendData(long jarg1, ftServer jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftServer_sendDataRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftServer_sendChunkMapRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftServer_sendChunkMap(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftServer_sendCRC32MapRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3);
  public final static native boolean ftServer_sendCRC32Map(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftServer_sendSingleChunkCRCRequest(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftServer_sendSingleChunkCRC(long jarg1, ftServer jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native int ftServer_tick(long jarg1, ftServer jarg1_);
  public final static native boolean ftServer_addConfiguration(long jarg1, ftServer jarg1_, long jarg2, p3ConfigMgr jarg2_);
  public final static native boolean ftServer_ResumeTransfers(long jarg1, ftServer jarg1_);
  public final static native void delete_ftServer(long jarg1);
  public final static native int RsServer_StartupRetroShare(long jarg1, RsServer jarg1_);
  public final static native long new_RsServer(long jarg1, NotifyBase jarg1_);
  public final static native void delete_RsServer(long jarg1);
  public final static native void RsServer_run(long jarg1, RsServer jarg1_);
  public final static native void RsServer_lockRsCore(long jarg1, RsServer jarg1_);
  public final static native void RsServer_unlockRsCore(long jarg1, RsServer jarg1_);
  public final static native int RsServer_SetInBroadcast(long jarg1, RsServer jarg1_, long jarg2, boolean jarg3);
  public final static native int RsServer_SetInSubscribe(long jarg1, RsServer jarg1_, long jarg2, boolean jarg3);
  public final static native int RsServer_ClearInBroadcast(long jarg1, RsServer jarg1_);
  public final static native int RsServer_ClearInSubscribe(long jarg1, RsServer jarg1_);
  public final static native int RsServer_ConfigSetBootPrompt(long jarg1, RsServer jarg1_, boolean jarg2);
  public final static native void RsServer_ConfigFinalSave(long jarg1, RsServer jarg1_);
  public final static native void RsServer_rsGlobalShutDown(long jarg1, RsServer jarg1_);
  public final static native boolean RsServer_getPeerCryptoDetails(long jarg1, RsServer jarg1_, long jarg2, long jarg3, RsPeerCryptoParams jarg3_);
  public final static native long make_path_unix(long jarg1);
  public final static native long new_p3Status(long jarg1, p3StatusService jarg1_);
  public final static native void delete_p3Status(long jarg1);
  public final static native boolean p3Status_getOwnStatus(long jarg1, p3Status jarg1_, long jarg2, StatusInfo jarg2_);
  public final static native boolean p3Status_getStatusList(long jarg1, p3Status jarg1_, long jarg2);
  public final static native boolean p3Status_getStatus(long jarg1, p3Status jarg1_, long jarg2, long jarg3, StatusInfo jarg3_);
  public final static native boolean p3Status_sendStatus(long jarg1, p3Status jarg1_, long jarg2, long jarg3);
  public final static native void delete_p3Msgs(long jarg1);
  public final static native boolean p3Msgs_getMessageSummaries(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_getMessage(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, MessageInfo jarg3_);
  public final static native void p3Msgs_getMessageCount(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean p3Msgs_MessageSend(long jarg1, p3Msgs jarg1_, long jarg2, MessageInfo jarg2_);
  public final static native boolean p3Msgs_decryptMessage(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_SystemMessage(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Msgs_MessageToDraft(long jarg1, p3Msgs jarg1_, long jarg2, MessageInfo jarg2_, long jarg3);
  public final static native boolean p3Msgs_MessageToTrash(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_MessageDelete(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_MessageRead(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_MessageReplied(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_MessageForwarded(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_MessageStar(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_MessageLoadEmbeddedImages(long jarg1, p3Msgs jarg1_, long jarg2, boolean jarg3);
  public final static native boolean p3Msgs_getMsgParentId(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Msgs_getMessageTagTypes(long jarg1, p3Msgs jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native boolean p3Msgs_setMessageTagType(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Msgs_removeMessageTagType(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_getMessageTag(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, MsgTagInfo jarg3_);
  public final static native boolean p3Msgs_setMessageTag(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean p3Msgs_resetMessageStandardTagTypes(long jarg1, p3Msgs jarg1_, long jarg2, MsgTagType jarg2_);
  public final static native boolean p3Msgs_createDistantOfflineMessengingInvite(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Msgs_getDistantOfflineMessengingInvites(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native void p3Msgs_enableDistantMessaging(long jarg1, p3Msgs jarg1_, boolean jarg2);
  public final static native boolean p3Msgs_distantMessagingEnabled(long jarg1, p3Msgs jarg1_);
  public final static native boolean p3Msgs_getDistantMessageHash(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native void p3Msgs_getAvatarData(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3Msgs_setOwnAvatarData(long jarg1, p3Msgs jarg1_, long jarg2, int jarg3);
  public final static native void p3Msgs_getOwnAvatarData(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native void p3Msgs_setCustomStateString(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native long p3Msgs_getCustomStateString__SWIG_0(long jarg1, p3Msgs jarg1_);
  public final static native long p3Msgs_getCustomStateString__SWIG_1(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_sendPublicChat(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_sendPrivateChat(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native int p3Msgs_getPublicChatQueueCount(long jarg1, p3Msgs jarg1_);
  public final static native boolean p3Msgs_getPublicChatQueue(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native int p3Msgs_getPrivateChatQueueCount(long jarg1, p3Msgs jarg1_, boolean jarg2);
  public final static native boolean p3Msgs_getPrivateChatQueueIds(long jarg1, p3Msgs jarg1_, boolean jarg2, long jarg3);
  public final static native boolean p3Msgs_getPrivateChatQueue(long jarg1, p3Msgs jarg1_, boolean jarg2, long jarg3, long jarg4);
  public final static native boolean p3Msgs_clearPrivateChatQueue(long jarg1, p3Msgs jarg1_, boolean jarg2, long jarg3);
  public final static native void p3Msgs_sendStatusString(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native void p3Msgs_sendGroupChatStatusString(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_joinVisibleChatLobby(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2);
  public final static native void p3Msgs_getListOfNearbyChatLobbies(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_getVirtualPeerId(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3Msgs_isLobbyId(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native void p3Msgs_getChatLobbyList(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native void p3Msgs_invitePeerToLobby(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3Msgs_acceptLobbyInvite(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2);
  public final static native void p3Msgs_denyLobbyInvite(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2);
  public final static native void p3Msgs_getPendingChatLobbyInvites(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native void p3Msgs_unsubscribeChatLobby(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2);
  public final static native boolean p3Msgs_setNickNameForChatLobby(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3Msgs_getNickNameForChatLobby(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native boolean p3Msgs_setDefaultNickNameForChatLobby(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_getDefaultNickNameForChatLobby(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native void p3Msgs_setLobbyAutoSubscribe(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2, boolean jarg3);
  public final static native boolean p3Msgs_getLobbyAutoSubscribe(long jarg1, p3Msgs jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger p3Msgs_createChatLobby(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Msgs_createDistantChatInvite(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Msgs_getDistantChatInviteList(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_initiateDistantChatConnexion__SWIG_0(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean p3Msgs_initiateDistantChatConnexion__SWIG_1(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3);
  public final static native boolean p3Msgs_getDistantChatStatus(long jarg1, p3Msgs jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3Msgs_closeDistantChatConnexion(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native boolean p3Msgs_removeDistantChatInvite(long jarg1, p3Msgs jarg1_, long jarg2);
  public final static native long new_TurtleTrafficStatisticsInfoOp();
  public final static native void TurtleTrafficStatisticsInfoOp_reset(long jarg1, TurtleTrafficStatisticsInfoOp jarg1_);
  public final static native void delete_TurtleTrafficStatisticsInfoOp(long jarg1);
  public final static native void upnpentry_name_set(long jarg1, upnpentry jarg1_, long jarg2);
  public final static native long upnpentry_name_get(long jarg1, upnpentry jarg1_);
  public final static native void upnpentry_id_set(long jarg1, upnpentry jarg1_, long jarg2);
  public final static native long upnpentry_id_get(long jarg1, upnpentry jarg1_);
  public final static native void upnpentry_addr_set(long jarg1, upnpentry jarg1_, long jarg2);
  public final static native long upnpentry_addr_get(long jarg1, upnpentry jarg1_);
  public final static native void upnpentry_flags_set(long jarg1, upnpentry jarg1_, long jarg2);
  public final static native long upnpentry_flags_get(long jarg1, upnpentry jarg1_);
  public final static native void upnpentry_status_set(long jarg1, upnpentry jarg1_, int jarg2);
  public final static native int upnpentry_status_get(long jarg1, upnpentry jarg1_);
  public final static native void upnpentry_lastTs_set(long jarg1, upnpentry jarg1_, int jarg2);
  public final static native int upnpentry_lastTs_get(long jarg1, upnpentry jarg1_);
  public final static native long new_upnpentry();
  public final static native void delete_upnpentry(long jarg1);
  public final static native void upnpforward_name_set(long jarg1, upnpforward jarg1_, long jarg2);
  public final static native long upnpforward_name_get(long jarg1, upnpforward jarg1_);
  public final static native void upnpforward_flags_set(long jarg1, upnpforward jarg1_, long jarg2);
  public final static native long upnpforward_flags_get(long jarg1, upnpforward jarg1_);
  public final static native void upnpforward_iaddr_set(long jarg1, upnpforward jarg1_, long jarg2);
  public final static native long upnpforward_iaddr_get(long jarg1, upnpforward jarg1_);
  public final static native void upnpforward_eaddr_set(long jarg1, upnpforward jarg1_, long jarg2);
  public final static native long upnpforward_eaddr_get(long jarg1, upnpforward jarg1_);
  public final static native void upnpforward_status_set(long jarg1, upnpforward jarg1_, int jarg2);
  public final static native int upnpforward_status_get(long jarg1, upnpforward jarg1_);
  public final static native void upnpforward_lastTs_set(long jarg1, upnpforward jarg1_, int jarg2);
  public final static native int upnpforward_lastTs_get(long jarg1, upnpforward jarg1_);
  public final static native long new_upnpforward();
  public final static native void delete_upnpforward(long jarg1);
  public final static native int RS_UPNP_S_UNINITIALISED_get();
  public final static native int RS_UPNP_S_UNAVAILABLE_get();
  public final static native int RS_UPNP_S_READY_get();
  public final static native int RS_UPNP_S_TCP_FAILED_get();
  public final static native int RS_UPNP_S_UDP_FAILED_get();
  public final static native int RS_UPNP_S_ACTIVE_get();
  public final static native long new_upnphandler();
  public final static native void delete_upnphandler(long jarg1);
  public final static native void upnphandler_enable(long jarg1, upnphandler jarg1_, boolean jarg2);
  public final static native void upnphandler_shutdown(long jarg1, upnphandler jarg1_);
  public final static native void upnphandler_restart(long jarg1, upnphandler jarg1_);
  public final static native boolean upnphandler_getEnabled(long jarg1, upnphandler jarg1_);
  public final static native boolean upnphandler_getActive(long jarg1, upnphandler jarg1_);
  public final static native void upnphandler_setInternalPort(long jarg1, upnphandler jarg1_, int jarg2);
  public final static native void upnphandler_setExternalPort(long jarg1, upnphandler jarg1_, int jarg2);
  public final static native boolean upnphandler_getInternalAddress(long jarg1, upnphandler jarg1_, long jarg2);
  public final static native boolean upnphandler_getExternalAddress(long jarg1, upnphandler jarg1_, long jarg2);
  public final static native boolean upnphandler_requestPortForward(long jarg1, upnphandler jarg1_, long jarg2, PortForwardParams jarg2_);
  public final static native boolean upnphandler_statusPortForward(long jarg1, upnphandler jarg1_, long jarg2, long jarg3, PortForwardParams jarg3_);
  public final static native boolean upnphandler_start_upnp(long jarg1, upnphandler jarg1_);
  public final static native boolean upnphandler_shutdown_upnp(long jarg1, upnphandler jarg1_);
  public final static native boolean upnphandler_initUPnPState(long jarg1, upnphandler jarg1_);
  public final static native boolean upnphandler_printUPnPState(long jarg1, upnphandler jarg1_);
  public final static native void stdEmptyString_set(long jarg1);
  public final static native long stdEmptyString_get();
  public final static native boolean stdStringIsEqualCI(long jarg1, long jarg2);
  public final static native long new_CUPnPPortMapping__SWIG_0(int jarg1, int jarg2, long jarg3, boolean jarg4, long jarg5);
  public final static native long new_CUPnPPortMapping__SWIG_1(int jarg1, int jarg2, long jarg3, boolean jarg4);
  public final static native long new_CUPnPPortMapping__SWIG_2(int jarg1, int jarg2, long jarg3);
  public final static native long new_CUPnPPortMapping__SWIG_3(int jarg1, int jarg2);
  public final static native long new_CUPnPPortMapping__SWIG_4(int jarg1);
  public final static native long new_CUPnPPortMapping__SWIG_5();
  public final static native void delete_CUPnPPortMapping(long jarg1);
  public final static native long CUPnPPortMapping_getExPort(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPPortMapping_getInPort(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPPortMapping_getProtocol(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPPortMapping_getEnabled(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPPortMapping_getDescription(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPPortMapping_getKey(long jarg1, CUPnPPortMapping jarg1_);
  public final static native long CUPnPLib_UPNP_ROOT_DEVICE_get();
  public final static native long CUPnPLib_UPNP_DEVICE_IGW_get();
  public final static native long CUPnPLib_UPNP_DEVICE_WAN_get();
  public final static native long CUPnPLib_UPNP_DEVICE_WAN_CONNECTION_get();
  public final static native long CUPnPLib_UPNP_DEVICE_LAN_get();
  public final static native long CUPnPLib_UPNP_SERVICE_LAYER3_FORWARDING_get();
  public final static native long CUPnPLib_UPNP_SERVICE_WAN_COMMON_INTERFACE_CONFIG_get();
  public final static native long CUPnPLib_UPNP_SERVICE_WAN_IP_CONNECTION_get();
  public final static native long CUPnPLib_UPNP_SERVICE_WAN_PPP_CONNECTION_get();
  public final static native void CUPnPLib_m_ctrlPoint_set(long jarg1, CUPnPLib jarg1_, long jarg2, CUPnPControlPoint jarg2_);
  public final static native long CUPnPLib_m_ctrlPoint_get(long jarg1, CUPnPLib jarg1_);
  public final static native long new_CUPnPLib(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void delete_CUPnPLib(long jarg1);
  public final static native long CUPnPLib_GetUPnPErrorMessage(long jarg1, CUPnPLib jarg1_, int jarg2);
  public final static native long CUPnPLib_processUPnPErrorMessage(long jarg1, CUPnPLib jarg1_, long jarg2, int jarg3, long jarg4, long jarg5);
  public final static native void CUPnPLib_ProcessActionResponse(long jarg1, CUPnPLib jarg1_, long jarg2, long jarg3);
  public final static native long CUPnPLib_Element_GetRootElement(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native long CUPnPLib_Element_GetFirstChild(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native long CUPnPLib_Element_GetNextSibling(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native long CUPnPLib_Element_GetTag(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native long CUPnPLib_Element_GetTextValue(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native long CUPnPLib_Element_GetChildValueByTag(long jarg1, CUPnPLib jarg1_, long jarg2, long jarg3);
  public final static native long CUPnPLib_Element_GetFirstChildByTag(long jarg1, CUPnPLib jarg1_, long jarg2, long jarg3);
  public final static native long CUPnPLib_Element_GetNextSiblingByTag(long jarg1, CUPnPLib jarg1_, long jarg2, long jarg3);
  public final static native long CUPnPLib_Element_GetAttributeByTag(long jarg1, CUPnPLib jarg1_, long jarg2, long jarg3);
  public final static native String s_argument_get();
  public final static native String s_argumentList_get();
  public final static native String s_action_get();
  public final static native String s_actionList_get();
  public final static native String s_allowedValue_get();
  public final static native String s_allowedValueList_get();
  public final static native String s_stateVariable_get();
  public final static native String s_serviceStateTable_get();
  public final static native String s_service_get();
  public final static native String s_serviceList_get();
  public final static native String s_device_get();
  public final static native String s_deviceList_get();
  public final static native long new_CUPnPError(long jarg1, CUPnPLib jarg1_, long jarg2);
  public final static native void delete_CUPnPError(long jarg1);
  public final static native long CUPnPError_getErrorCode(long jarg1, CUPnPError jarg1_);
  public final static native long CUPnPError_getErrorDescription(long jarg1, CUPnPError jarg1_);
  public final static native long new_CUPnPArgument(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPArgument(long jarg1);
  public final static native long CUPnPArgument_GetName(long jarg1, CUPnPArgument jarg1_);
  public final static native long CUPnPArgument_GetDirection(long jarg1, CUPnPArgument jarg1_);
  public final static native boolean CUPnPArgument_GetRetVal(long jarg1, CUPnPArgument jarg1_);
  public final static native long CUPnPArgument_GetRelatedStateVariable(long jarg1, CUPnPArgument jarg1_);
  public final static native long CUPnPArgument_GetKey(long jarg1, CUPnPArgument jarg1_);
  public final static native long new_CUPnPAction(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPAction(long jarg1);
  public final static native long CUPnPAction_GetName(long jarg1, CUPnPAction jarg1_);
  public final static native long CUPnPAction_GetKey(long jarg1, CUPnPAction jarg1_);
  public final static native long CUPnPAction_GetArgumentList(long jarg1, CUPnPAction jarg1_);
  public final static native long new_CUPnPAllowedValue(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPAllowedValue(long jarg1);
  public final static native long CUPnPAllowedValue_GetAllowedValue(long jarg1, CUPnPAllowedValue jarg1_);
  public final static native long CUPnPAllowedValue_GetKey(long jarg1, CUPnPAllowedValue jarg1_);
  public final static native long new_CUPnPStateVariable(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPStateVariable(long jarg1);
  public final static native long CUPnPStateVariable_GetNname(long jarg1, CUPnPStateVariable jarg1_);
  public final static native long CUPnPStateVariable_GetDataType(long jarg1, CUPnPStateVariable jarg1_);
  public final static native long CUPnPStateVariable_GetDefaultValue(long jarg1, CUPnPStateVariable jarg1_);
  public final static native long CUPnPStateVariable_GetKey(long jarg1, CUPnPStateVariable jarg1_);
  public final static native long CUPnPStateVariable_GetAllowedValueList(long jarg1, CUPnPStateVariable jarg1_);
  public final static native long new_CUPnPSCPD(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPSCPD(long jarg1);
  public final static native long CUPnPSCPD_GetActionList(long jarg1, CUPnPSCPD jarg1_);
  public final static native long CUPnPSCPD_GetServiceStateTable(long jarg1, CUPnPSCPD jarg1_);
  public final static native long new_CUPnPArgumentValue__SWIG_0();
  public final static native long new_CUPnPArgumentValue__SWIG_1(long jarg1, long jarg2);
  public final static native void delete_CUPnPArgumentValue(long jarg1);
  public final static native long CUPnPArgumentValue_GetArgument(long jarg1, CUPnPArgumentValue jarg1_);
  public final static native long CUPnPArgumentValue_GetValue(long jarg1, CUPnPArgumentValue jarg1_);
  public final static native long CUPnPArgumentValue_SetArgument(long jarg1, CUPnPArgumentValue jarg1_, long jarg2);
  public final static native long CUPnPArgumentValue_SetValue(long jarg1, CUPnPArgumentValue jarg1_, long jarg2);
  public final static native void CUPnPService_propertyMap_set(long jarg1, CUPnPService jarg1_, long jarg2);
  public final static native long CUPnPService_propertyMap_get(long jarg1, CUPnPService jarg1_);
  public final static native long new_CUPnPService(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPService(long jarg1);
  public final static native long CUPnPService_GetServiceType(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetServiceId(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetSCPDURL(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetAbsSCPDURL(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetControlURL(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetEventSubURL(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetAbsControlURL(long jarg1, CUPnPService jarg1_);
  public final static native long CUPnPService_GetAbsEventSubURL(long jarg1, CUPnPService jarg1_);
  public final static native int CUPnPService_GetTimeout(long jarg1, CUPnPService jarg1_);
  public final static native void CUPnPService_SetTimeout(long jarg1, CUPnPService jarg1_, int jarg2);
  public final static native long CUPnPService_GetTimeoutAddr(long jarg1, CUPnPService jarg1_);
  public final static native String CUPnPService_GetSID(long jarg1, CUPnPService jarg1_);
  public final static native void CUPnPService_SetSID(long jarg1, CUPnPService jarg1_, String jarg2);
  public final static native long CUPnPService_GetKey(long jarg1, CUPnPService jarg1_);
  public final static native boolean CUPnPService_IsSubscribed(long jarg1, CUPnPService jarg1_);
  public final static native void CUPnPService_SetSCPD(long jarg1, CUPnPService jarg1_, long jarg2, CUPnPSCPD jarg2_);
  public final static native boolean CUPnPService_Execute(long jarg1, CUPnPService jarg1_, long jarg2, long jarg3);
  public final static native long CUPnPService_GetStateVariable(long jarg1, CUPnPService jarg1_, long jarg2);
  public final static native long new_CUPnPDevice(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4);
  public final static native void delete_CUPnPDevice(long jarg1);
  public final static native long CUPnPDevice_GetUDN(long jarg1, CUPnPDevice jarg1_);
  public final static native long CUPnPDevice_GetDeviceType(long jarg1, CUPnPDevice jarg1_);
  public final static native long CUPnPDevice_GetFriendlyName(long jarg1, CUPnPDevice jarg1_);
  public final static native long CUPnPDevice_GetPresentationURL(long jarg1, CUPnPDevice jarg1_);
  public final static native long CUPnPDevice_GetKey(long jarg1, CUPnPDevice jarg1_);
  public final static native long new_CUPnPRootDevice(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPLib jarg2_, long jarg3, long jarg4, long jarg5, String jarg6, int jarg7);
  public final static native void delete_CUPnPRootDevice(long jarg1);
  public final static native long CUPnPRootDevice_GetURLBase(long jarg1, CUPnPRootDevice jarg1_);
  public final static native long CUPnPRootDevice_GetLocation(long jarg1, CUPnPRootDevice jarg1_);
  public final static native int CUPnPRootDevice_GetExpires(long jarg1, CUPnPRootDevice jarg1_);
  public final static native void CUPnPRootDevice_SetExpires(long jarg1, CUPnPRootDevice jarg1_, int jarg2);
  public final static native void CUPnPControlPoint_m_WanService_set(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPService jarg2_);
  public final static native long CUPnPControlPoint_m_WanService_get(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void CUPnPControlPoint_m_getStateVariableLastResult_set(long jarg1, CUPnPControlPoint jarg1_, long jarg2);
  public final static native long CUPnPControlPoint_m_getStateVariableLastResult_get(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void CUPnPControlPoint_s_CtrlPoint_set(long jarg1, CUPnPControlPoint jarg1_);
  public final static native long CUPnPControlPoint_s_CtrlPoint_get();
  public final static native long new_CUPnPControlPoint(int jarg1);
  public final static native void delete_CUPnPControlPoint(long jarg1);
  public final static native String CUPnPControlPoint_getInternalIpAddress(long jarg1, CUPnPControlPoint jarg1_);
  public final static native long CUPnPControlPoint_getExternalAddress(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void CUPnPControlPoint_Subscribe(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPService jarg2_);
  public final static native void CUPnPControlPoint_Unsubscribe(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPService jarg2_);
  public final static native boolean CUPnPControlPoint_AddPortMappings(long jarg1, CUPnPControlPoint jarg1_, long jarg2);
  public final static native boolean CUPnPControlPoint_DeletePortMappings(long jarg1, CUPnPControlPoint jarg1_, long jarg2);
  public final static native long CUPnPControlPoint_GetUPnPClientHandle(long jarg1, CUPnPControlPoint jarg1_);
  public final static native boolean CUPnPControlPoint_GetIGWDeviceDetected(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void CUPnPControlPoint_SetIGWDeviceDetected(long jarg1, CUPnPControlPoint jarg1_, boolean jarg2);
  public final static native boolean CUPnPControlPoint_WanServiceDetected(long jarg1, CUPnPControlPoint jarg1_);
  public final static native void CUPnPControlPoint_SetWanService(long jarg1, CUPnPControlPoint jarg1_, long jarg2, CUPnPService jarg2_);
  public final static native int CUPnPControlPoint_Callback(long jarg1, long jarg2, long jarg3);
  public final static native void CUPnPControlPoint_OnEventReceived(long jarg1, CUPnPControlPoint jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native String protofix(String jarg1);
  public final static native void DisplayInfos(long jarg1, long jarg2);
  public final static native void GetConnectionStatus(long jarg1, long jarg2);
  public final static native void ListRedirections(long jarg1, long jarg2);
  public final static native int SetRedirectAndTest(long jarg1, long jarg2, String jarg3, String jarg4, String jarg5, String jarg6);
  public final static native int TestRedirect(long jarg1, long jarg2, String jarg3, String jarg4, String jarg5, String jarg6);
  public final static native int RemoveRedirect(long jarg1, long jarg2, String jarg3, String jarg4);
  public final static native int BIO_tou_socket_should_retry(int jarg1, int jarg2);
  public final static native int BIO_tou_socket_non_fatal_error(int jarg1);
  public final static native int BIO_TYPE_TOU_SOCKET_get();
  public final static native long BIO_s_tou_socket();
  public final static native int MAX_TOU_RECEIVERS_get();
  public final static native int TOU_RECEIVER_TYPE_NONE_get();
  public final static native int TOU_RECEIVER_TYPE_UDPPEER_get();
  public final static native int TOU_RECEIVER_TYPE_UDPRELAY_get();
  public final static native int tou_init(long jarg1, long jarg2, int jarg3);
  public final static native int tou_socket(long jarg1, long jarg2, int jarg3);
  public final static native int tou_bind(int jarg1, long jarg2, long jarg3);
  public final static native int tou_listen(int jarg1, int jarg2);
  public final static native int tou_connect(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native int tou_accept(int jarg1, long jarg2, long jarg3);
  public final static native int tou_connect_via_relay(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native int tou_connected(int jarg1);
  public final static native int tou_listenfor(int jarg1, long jarg2, long jarg3);
  public final static native long tou_read(int jarg1, long jarg2, long jarg3);
  public final static native long tou_write(int jarg1, long jarg2, long jarg3);
  public final static native int tou_close(int jarg1);
  public final static native int tou_errno(int jarg1);
  public final static native int tou_clear_error(int jarg1);
  public final static native int tou_maxread(int jarg1);
  public final static native int tou_maxwrite(int jarg1);
  public final static native int TCP_PSEUDO_HDR_SIZE_get();
  public final static native void TcpPacket_data_set(long jarg1, TcpPacket jarg1_, long jarg2);
  public final static native long TcpPacket_data_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_datasize_set(long jarg1, TcpPacket jarg1_, int jarg2);
  public final static native int TcpPacket_datasize_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_seqno_set(long jarg1, TcpPacket jarg1_, long jarg2);
  public final static native long TcpPacket_seqno_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_ackno_set(long jarg1, TcpPacket jarg1_, long jarg2);
  public final static native long TcpPacket_ackno_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_hlen_flags_set(long jarg1, TcpPacket jarg1_, int jarg2);
  public final static native int TcpPacket_hlen_flags_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_winsize_set(long jarg1, TcpPacket jarg1_, int jarg2);
  public final static native int TcpPacket_winsize_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_ts_set(long jarg1, TcpPacket jarg1_, double jarg2);
  public final static native double TcpPacket_ts_get(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_retrans_set(long jarg1, TcpPacket jarg1_, int jarg2);
  public final static native int TcpPacket_retrans_get(long jarg1, TcpPacket jarg1_);
  public final static native long new_TcpPacket__SWIG_0(long jarg1, int jarg2);
  public final static native long new_TcpPacket__SWIG_1();
  public final static native void delete_TcpPacket(long jarg1);
  public final static native int TcpPacket_writePacket(long jarg1, TcpPacket jarg1_, long jarg2, long jarg3);
  public final static native int TcpPacket_readPacket(long jarg1, TcpPacket jarg1_, long jarg2, int jarg3);
  public final static native long TcpPacket_getData(long jarg1, TcpPacket jarg1_);
  public final static native long TcpPacket_releaseData(long jarg1, TcpPacket jarg1_);
  public final static native long TcpPacket_setData(long jarg1, TcpPacket jarg1_, long jarg2, int jarg3);
  public final static native int TcpPacket_getDataSize(long jarg1, TcpPacket jarg1_);
  public final static native boolean TcpPacket_hasSyn(long jarg1, TcpPacket jarg1_);
  public final static native boolean TcpPacket_hasFin(long jarg1, TcpPacket jarg1_);
  public final static native boolean TcpPacket_hasAck(long jarg1, TcpPacket jarg1_);
  public final static native boolean TcpPacket_hasRst(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_setSyn(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_setFin(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_setRst(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_setAckFlag(long jarg1, TcpPacket jarg1_);
  public final static native void TcpPacket_setAck(long jarg1, TcpPacket jarg1_, long jarg2);
  public final static native long TcpPacket_getAck(long jarg1, TcpPacket jarg1_);
  public final static native long new_UdpRelayAddrSet__SWIG_0();
  public final static native long new_UdpRelayAddrSet__SWIG_1(long jarg1, long jarg2);
  public final static native long UdpRelayAddrSet_flippedSet(long jarg1, UdpRelayAddrSet jarg1_);
  public final static native void UdpRelayAddrSet_mSrcAddr_set(long jarg1, UdpRelayAddrSet jarg1_, long jarg2);
  public final static native long UdpRelayAddrSet_mSrcAddr_get(long jarg1, UdpRelayAddrSet jarg1_);
  public final static native void UdpRelayAddrSet_mDestAddr_set(long jarg1, UdpRelayAddrSet jarg1_, long jarg2);
  public final static native long UdpRelayAddrSet_mDestAddr_get(long jarg1, UdpRelayAddrSet jarg1_);
  public final static native void delete_UdpRelayAddrSet(long jarg1);
  public final static native long new_UdpRelayProxy__SWIG_0();
  public final static native long new_UdpRelayProxy__SWIG_1(long jarg1, UdpRelayAddrSet jarg1_, int jarg2, long jarg3);
  public final static native void UdpRelayProxy_mAddrs_set(long jarg1, UdpRelayProxy jarg1_, long jarg2, UdpRelayAddrSet jarg2_);
  public final static native long UdpRelayProxy_mAddrs_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mBandwidth_set(long jarg1, UdpRelayProxy jarg1_, double jarg2);
  public final static native double UdpRelayProxy_mBandwidth_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mDataSize_set(long jarg1, UdpRelayProxy jarg1_, long jarg2);
  public final static native long UdpRelayProxy_mDataSize_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mLastBandwidthTS_set(long jarg1, UdpRelayProxy jarg1_, long jarg2);
  public final static native long UdpRelayProxy_mLastBandwidthTS_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mLastTS_set(long jarg1, UdpRelayProxy jarg1_, long jarg2);
  public final static native long UdpRelayProxy_mLastTS_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mStartTS_set(long jarg1, UdpRelayProxy jarg1_, long jarg2);
  public final static native long UdpRelayProxy_mStartTS_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mBandwidthLimit_set(long jarg1, UdpRelayProxy jarg1_, double jarg2);
  public final static native double UdpRelayProxy_mBandwidthLimit_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void UdpRelayProxy_mRelayClass_set(long jarg1, UdpRelayProxy jarg1_, int jarg2);
  public final static native int UdpRelayProxy_mRelayClass_get(long jarg1, UdpRelayProxy jarg1_);
  public final static native void delete_UdpRelayProxy(long jarg1);
  public final static native long new_UdpRelayEnd__SWIG_0();
  public final static native long new_UdpRelayEnd__SWIG_1(long jarg1, UdpRelayAddrSet jarg1_, long jarg2);
  public final static native void UdpRelayEnd_mLocalAddr_set(long jarg1, UdpRelayEnd jarg1_, long jarg2);
  public final static native long UdpRelayEnd_mLocalAddr_get(long jarg1, UdpRelayEnd jarg1_);
  public final static native void UdpRelayEnd_mProxyAddr_set(long jarg1, UdpRelayEnd jarg1_, long jarg2);
  public final static native long UdpRelayEnd_mProxyAddr_get(long jarg1, UdpRelayEnd jarg1_);
  public final static native void UdpRelayEnd_mRemoteAddr_set(long jarg1, UdpRelayEnd jarg1_, long jarg2);
  public final static native long UdpRelayEnd_mRemoteAddr_get(long jarg1, UdpRelayEnd jarg1_);
  public final static native void delete_UdpRelayEnd(long jarg1);
  public final static native int UDP_RELAY_DEFAULT_COUNT_ALL_get();
  public final static native int UDP_RELAY_DEFAULT_FRIEND_get();
  public final static native int UDP_RELAY_DEFAULT_FOF_get();
  public final static native int UDP_RELAY_DEFAULT_GENERAL_get();
  public final static native int UDP_RELAY_DEFAULT_BANDWIDTH_get();
  public final static native double UDP_RELAY_FRAC_GENERAL_get();
  public final static native double UDP_RELAY_FRAC_FOF_get();
  public final static native double UDP_RELAY_FRAC_FRIENDS_get();
  public final static native int UDP_RELAY_NUM_CLASS_get();
  public final static native int UDP_RELAY_CLASS_ALL_get();
  public final static native int UDP_RELAY_CLASS_GENERAL_get();
  public final static native int UDP_RELAY_CLASS_FOF_get();
  public final static native int UDP_RELAY_CLASS_FRIENDS_get();
  public final static native int UDP_RELAY_LIFETIME_GENERAL_get();
  public final static native int UDP_RELAY_LIFETIME_FOF_get();
  public final static native int UDP_RELAY_LIFETIME_FRIENDS_get();
  public final static native int STD_RELAY_TTL_get();
  public final static native long new_UdpRelayReceiver(long jarg1);
  public final static native void delete_UdpRelayReceiver(long jarg1);
  public final static native int UdpRelayReceiver_addUdpPeer(long jarg1, UdpRelayReceiver jarg1_, long jarg2, UdpPeer jarg2_, long jarg3, UdpRelayAddrSet jarg3_, long jarg4);
  public final static native int UdpRelayReceiver_removeUdpPeer(long jarg1, UdpRelayReceiver jarg1_, long jarg2, UdpPeer jarg2_);
  public final static native int UdpRelayReceiver_addUdpRelay(long jarg1, UdpRelayReceiver jarg1_, long jarg2, UdpRelayAddrSet jarg2_, long jarg3, long jarg4);
  public final static native int UdpRelayReceiver_removeUdpRelay(long jarg1, UdpRelayReceiver jarg1_, long jarg2, UdpRelayAddrSet jarg2_);
  public final static native int UdpRelayReceiver_checkRelays(long jarg1, UdpRelayReceiver jarg1_);
  public final static native int UdpRelayReceiver_setRelayTotal(long jarg1, UdpRelayReceiver jarg1_, int jarg2);
  public final static native int UdpRelayReceiver_setRelayClassMax(long jarg1, UdpRelayReceiver jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int UdpRelayReceiver_getRelayClassMax(long jarg1, UdpRelayReceiver jarg1_, int jarg2);
  public final static native int UdpRelayReceiver_getRelayClassBandwidth(long jarg1, UdpRelayReceiver jarg1_, int jarg2);
  public final static native int UdpRelayReceiver_getRelayCount(long jarg1, UdpRelayReceiver jarg1_, int jarg2);
  public final static native int UdpRelayReceiver_RelayStatus(long jarg1, UdpRelayReceiver jarg1_, long jarg2);
  public final static native int UdpRelayReceiver_getRelayEnds(long jarg1, UdpRelayReceiver jarg1_, long jarg2);
  public final static native int UdpRelayReceiver_getRelayProxies(long jarg1, UdpRelayReceiver jarg1_, long jarg2);
  public final static native int UdpRelayReceiver_recvPkt(long jarg1, UdpRelayReceiver jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native int UdpRelayReceiver_sendPkt(long jarg1, UdpRelayReceiver jarg1_, long jarg2, int jarg3, long jarg4, int jarg5);
  public final static native int UdpRelayReceiver_status(long jarg1, UdpRelayReceiver jarg1_, long jarg2);
  public final static native int UdpRelayReceiver_UdpPeersStatus(long jarg1, UdpRelayReceiver jarg1_, long jarg2);
  public final static native void UdpRelayReceiver_getDataTransferred(long jarg1, UdpRelayReceiver jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int isUdpRelayPacket(long jarg1, int jarg2);
  public final static native int getPacketFromUdpRelayPacket(long jarg1, int jarg2, long jarg3, long jarg4);
  public final static native int createRelayUdpPacket(long jarg1, int jarg2, long jarg3, int jarg4, long jarg5, UdpRelayEnd jarg5_);
  public final static native int extractUdpRelayAddrSet(long jarg1, int jarg2, long jarg3, UdpRelayAddrSet jarg3_);
  public final static native long new_TouStunPeer__SWIG_0();
  public final static native long new_TouStunPeer__SWIG_1(long jarg1, long jarg2);
  public final static native void TouStunPeer_id_set(long jarg1, TouStunPeer jarg1_, long jarg2);
  public final static native long TouStunPeer_id_get(long jarg1, TouStunPeer jarg1_);
  public final static native void TouStunPeer_remote_set(long jarg1, TouStunPeer jarg1_, long jarg2);
  public final static native long TouStunPeer_remote_get(long jarg1, TouStunPeer jarg1_);
  public final static native void TouStunPeer_eaddr_set(long jarg1, TouStunPeer jarg1_, long jarg2);
  public final static native long TouStunPeer_eaddr_get(long jarg1, TouStunPeer jarg1_);
  public final static native void TouStunPeer_response_set(long jarg1, TouStunPeer jarg1_, boolean jarg2);
  public final static native boolean TouStunPeer_response_get(long jarg1, TouStunPeer jarg1_);
  public final static native void TouStunPeer_lastsend_set(long jarg1, TouStunPeer jarg1_, long jarg2);
  public final static native long TouStunPeer_lastsend_get(long jarg1, TouStunPeer jarg1_);
  public final static native void TouStunPeer_failCount_set(long jarg1, TouStunPeer jarg1_, long jarg2);
  public final static native long TouStunPeer_failCount_get(long jarg1, TouStunPeer jarg1_);
  public final static native void delete_TouStunPeer(long jarg1);
  public final static native long new_UdpStunner(long jarg1);
  public final static native void delete_UdpStunner(long jarg1);
  public final static native int UdpStunner_grabExclusiveMode(long jarg1, UdpStunner jarg1_, long jarg2);
  public final static native int UdpStunner_releaseExclusiveMode(long jarg1, UdpStunner jarg1_, long jarg2, boolean jarg3);
  public final static native void UdpStunner_setTargetStunPeriod(long jarg1, UdpStunner jarg1_, int jarg2);
  public final static native boolean UdpStunner_addStunPeer(long jarg1, UdpStunner jarg1_, long jarg2, String jarg3);
  public final static native boolean UdpStunner_dropStunPeer(long jarg1, UdpStunner jarg1_, long jarg2);
  public final static native boolean UdpStunner_getStunPeer(long jarg1, UdpStunner jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native boolean UdpStunner_needStunPeers(long jarg1, UdpStunner jarg1_);
  public final static native boolean UdpStunner_externalAddr(long jarg1, UdpStunner jarg1_, long jarg2, long jarg3);
  public final static native int UdpStunner_recvPkt(long jarg1, UdpStunner jarg1_, long jarg2, int jarg3, long jarg4);
  public final static native int UdpStunner_status(long jarg1, UdpStunner jarg1_, long jarg2);
  public final static native int UdpStunner_tick(long jarg1, UdpStunner jarg1_);
  public final static native boolean UdpStun_isStunPacket(long jarg1, int jarg2);
  public final static native boolean UdpStun_response(long jarg1, int jarg2, long jarg3);
  public final static native long UdpStun_generate_stun_reply(long jarg1, long jarg2);
  public final static native boolean UdpStun_generate_stun_pkt(long jarg1, long jarg2);
  public final static native int MAX_SEG_get();
  public final static native int TCP_MAX_WIN_get();
  public final static native int TCP_ALIVE_TIMEOUT_get();
  public final static native int TCP_RETRANS_TIMEOUT_get();
  public final static native int TCP_RETRANS_MAX_TIMEOUT_get();
  public final static native int kNoPktTimeout_get();
  public final static native int TCP_CLOSED_get();
  public final static native int TCP_LISTEN_get();
  public final static native int TCP_SYN_SENT_get();
  public final static native int TCP_SYN_RCVD_get();
  public final static native int TCP_ESTABLISHED_get();
  public final static native int TCP_FIN_WAIT_1_get();
  public final static native int TCP_FIN_WAIT_2_get();
  public final static native int TCP_TIMED_WAIT_get();
  public final static native int TCP_CLOSING_get();
  public final static native int TCP_CLOSE_WAIT_get();
  public final static native int TCP_LAST_ACK_get();
  public final static native void dataBuffer_data_set(long jarg1, dataBuffer jarg1_, long jarg2);
  public final static native long dataBuffer_data_get(long jarg1, dataBuffer jarg1_);
  public final static native long new_dataBuffer();
  public final static native void delete_dataBuffer(long jarg1);
  public final static native long new_TcpStream(long jarg1);
  public final static native void delete_TcpStream(long jarg1);
  public final static native int TcpStream_status(long jarg1, TcpStream jarg1_, long jarg2);
  public final static native int TcpStream_connect(long jarg1, TcpStream jarg1_, long jarg2, long jarg3);
  public final static native int TcpStream_listenfor(long jarg1, TcpStream jarg1_, long jarg2);
  public final static native boolean TcpStream_isConnected(long jarg1, TcpStream jarg1_);
  public final static native boolean TcpStream_getRemoteAddress(long jarg1, TcpStream jarg1_, long jarg2);
  public final static native short TcpStream_TcpState(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_TcpErrorState(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_write(long jarg1, TcpStream jarg1_, String jarg2, int jarg3);
  public final static native int TcpStream_read(long jarg1, TcpStream jarg1_, String jarg2, int jarg3);
  public final static native int TcpStream_write_allowed(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_read_pending(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_closeWrite(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_close(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_tick(long jarg1, TcpStream jarg1_);
  public final static native void TcpStream_recvPkt(long jarg1, TcpStream jarg1_, long jarg2, int jarg3);
  public final static native boolean TcpStream_widle(long jarg1, TcpStream jarg1_);
  public final static native boolean TcpStream_ridle(long jarg1, TcpStream jarg1_);
  public final static native long TcpStream_wbytes(long jarg1, TcpStream jarg1_);
  public final static native long TcpStream_rbytes(long jarg1, TcpStream jarg1_);
  public final static native int TcpStream_dumpstate(long jarg1, TcpStream jarg1_, long jarg2);
  public final static native long new_stunAddrAssist(long jarg1, UdpStunner jarg1_);
  public final static native boolean stunAddrAssist_getExternalAddr(long jarg1, stunAddrAssist jarg1_, long jarg2, long jarg3);
  public final static native int stunAddrAssist_tick(long jarg1, stunAddrAssist jarg1_);
  public final static native void stunAddrAssist_setRefreshPeriod(long jarg1, stunAddrAssist jarg1_, int jarg2);
  public final static native void delete_stunAddrAssist(long jarg1);
  public final static native int CSB_START_get();
  public final static native int CSB_TCP_WAIT_get();
  public final static native int CSB_DIRECT_ATTEMPT_get();
  public final static native int CSB_DIRECT_WAIT_get();
  public final static native int CSB_PROXY_ATTEMPT_get();
  public final static native int CSB_PROXY_WAIT_get();
  public final static native int CSB_RELAY_ATTEMPT_get();
  public final static native int CSB_RELAY_WAIT_get();
  public final static native int CSB_REVERSE_WAIT_get();
  public final static native int CSB_FAILED_WAIT_get();
  public final static native int CSB_CONNECTED_get();
  public final static native int CSB_NETSTATE_UNKNOWN_get();
  public final static native int CSB_NETSTATE_FORWARD_get();
  public final static native int CSB_NETSTATE_STABLENAT_get();
  public final static native int CSB_NETSTATE_EXCLUSIVENAT_get();
  public final static native int CSB_NETSTATE_FIREWALLED_get();
  public final static native int CSB_CONNECT_DIRECT_get();
  public final static native int CSB_CONNECT_UNREACHABLE_get();
  public final static native int CSB_ACTION_MASK_MODE_get();
  public final static native int CSB_ACTION_MASK_PORT_get();
  public final static native int CSB_ACTION_WAIT_get();
  public final static native int CSB_ACTION_TCP_CONN_get();
  public final static native int CSB_ACTION_DIRECT_CONN_get();
  public final static native int CSB_ACTION_PROXY_CONN_get();
  public final static native int CSB_ACTION_RELAY_CONN_get();
  public final static native int CSB_ACTION_DHT_PORT_get();
  public final static native int CSB_ACTION_PROXY_PORT_get();
  public final static native int CSB_UPDATE_NONE_get();
  public final static native int CSB_UPDATE_CONNECTED_get();
  public final static native int CSB_UPDATE_DISCONNECTED_get();
  public final static native int CSB_UPDATE_AUTH_DENIED_get();
  public final static native int CSB_UPDATE_RETRY_ATTEMPT_get();
  public final static native int CSB_UPDATE_FAILED_ATTEMPT_get();
  public final static native int CSB_UPDATE_MODE_UNAVAILABLE_get();
  public final static native long new_PeerConnectStateBox();
  public final static native long PeerConnectStateBox_connectCb(long jarg1, PeerConnectStateBox jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long PeerConnectStateBox_updateCb(long jarg1, PeerConnectStateBox jarg1_, long jarg2);
  public final static native boolean PeerConnectStateBox_shouldUseProxyPort(long jarg1, PeerConnectStateBox jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long PeerConnectStateBox_calcNetState(long jarg1, PeerConnectStateBox jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long PeerConnectStateBox_connectState(long jarg1, PeerConnectStateBox jarg1_);
  public final static native void PeerConnectStateBox_mPeerId_set(long jarg1, PeerConnectStateBox jarg1_, long jarg2);
  public final static native long PeerConnectStateBox_mPeerId_get(long jarg1, PeerConnectStateBox jarg1_);
  public final static native boolean PeerConnectStateBox_storeProxyPortChoice(long jarg1, PeerConnectStateBox jarg1_, long jarg2, boolean jarg3);
  public final static native boolean PeerConnectStateBox_getProxyPortChoice(long jarg1, PeerConnectStateBox jarg1_);
  public final static native void delete_PeerConnectStateBox(long jarg1);
  public final static native long new_DhtPeerDetails();
  public final static native void DhtPeerDetails_mPeerType_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerType_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mDhtId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mDhtId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mRsId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mRsId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mDhtState_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mDhtState_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mDhtUpdateTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mDhtUpdateTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mConnectLogic_set(long jarg1, DhtPeerDetails jarg1_, long jarg2, PeerConnectStateBox jarg2_);
  public final static native long DhtPeerDetails_mConnectLogic_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectState_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectState_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectMsg_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectMsg_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectMode_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectMode_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectPeerId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectPeerId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectProxyId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectProxyId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectAddr_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectAddr_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectPoint_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectPoint_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectUdpTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectUdpTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerConnectClosedTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerConnectClosedTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mExclusiveProxyLock_set(long jarg1, DhtPeerDetails jarg1_, boolean jarg2);
  public final static native boolean DhtPeerDetails_mExclusiveProxyLock_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerReqStatusMsg_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerReqStatusMsg_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerReqState_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerReqState_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerReqMode_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerReqMode_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerReqProxyId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerReqProxyId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerReqTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerReqTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbMsg_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbMsg_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbMode_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbMode_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbPoint_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbPoint_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbProxyId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbProxyId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbDestId_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbDestId_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void DhtPeerDetails_mPeerCbTS_set(long jarg1, DhtPeerDetails jarg1_, long jarg2);
  public final static native long DhtPeerDetails_mPeerCbTS_get(long jarg1, DhtPeerDetails jarg1_);
  public final static native void delete_DhtPeerDetails(long jarg1);
  public final static native int PEERNET_ACTION_TYPE_CONNECT_get();
  public final static native int PEERNET_ACTION_TYPE_AUTHORISE_get();
  public final static native int PEERNET_ACTION_TYPE_START_get();
  public final static native int PEERNET_ACTION_TYPE_RESTARTREQ_get();
  public final static native int PEERNET_ACTION_TYPE_KILLREQ_get();
  public final static native int PEERNET_ACTION_TYPE_TCPATTEMPT_get();
  public final static native void PeerAction_mType_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mType_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mSrcId_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mSrcId_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mProxyId_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mProxyId_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mDestId_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mDestId_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mMode_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mMode_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mPoint_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mPoint_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mAnswer_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mAnswer_get(long jarg1, PeerAction jarg1_);
  public final static native void PeerAction_mDelayOrBandwidth_set(long jarg1, PeerAction jarg1_, long jarg2);
  public final static native long PeerAction_mDelayOrBandwidth_get(long jarg1, PeerAction jarg1_);
  public final static native long new_PeerAction();
  public final static native void delete_PeerAction(long jarg1);
  public final static native void p3BitDhtRelayHandler_mInstallRelay_set(long jarg1, p3BitDhtRelayHandler jarg1_, long jarg2);
  public final static native long p3BitDhtRelayHandler_mInstallRelay_get(long jarg1, p3BitDhtRelayHandler jarg1_);
  public final static native void p3BitDhtRelayHandler_mLogFailedConnection_set(long jarg1, p3BitDhtRelayHandler jarg1_, long jarg2);
  public final static native long p3BitDhtRelayHandler_mLogFailedConnection_get(long jarg1, p3BitDhtRelayHandler jarg1_);
  public final static native long new_p3BitDhtRelayHandler();
  public final static native void delete_p3BitDhtRelayHandler(long jarg1);
  public final static native long new_p3BitDht(long jarg1, long jarg2, pqiConnectCb jarg2_, long jarg3, p3NetMgr jarg3_, long jarg4, UdpStack jarg4_, long jarg5);
  public final static native void delete_p3BitDht(long jarg1);
  public final static native long p3BitDht_getNetState(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_getDhtPeers(long jarg1, p3BitDht jarg1_, int jarg2, long jarg3);
  public final static native int p3BitDht_getNetPeerList(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_getNetPeerStatus(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, RsDhtNetPeer jarg3_);
  public final static native int p3BitDht_getRelayEnds(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_getRelayProxies(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native long p3BitDht_getUdpAddressString(long jarg1, p3BitDht jarg1_);
  public final static native void p3BitDht_getDhtRates(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native void p3BitDht_getRelayRates(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean p3BitDht_getOwnDhtId(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native void p3BitDht_setupConnectBits(long jarg1, p3BitDht jarg1_, long jarg2, UdpStunner jarg2_, long jarg3, UdpStunner jarg3_, long jarg4, UdpRelayReceiver jarg4_);
  public final static native void p3BitDht_setupPeerSharer(long jarg1, p3BitDht jarg1_, long jarg2, pqiNetAssistPeerShare jarg2_);
  public final static native void p3BitDht_modifyNodesPerBucket(long jarg1, p3BitDht jarg1_, int jarg2);
  public final static native void p3BitDht_start(long jarg1, p3BitDht jarg1_);
  public final static native int p3BitDht_tick(long jarg1, p3BitDht jarg1_);
  public final static native void p3BitDht_enable(long jarg1, p3BitDht jarg1_, boolean jarg2);
  public final static native void p3BitDht_shutdown(long jarg1, p3BitDht jarg1_);
  public final static native void p3BitDht_restart(long jarg1, p3BitDht jarg1_);
  public final static native boolean p3BitDht_getEnabled(long jarg1, p3BitDht jarg1_);
  public final static native boolean p3BitDht_getActive(long jarg1, p3BitDht jarg1_);
  public final static native boolean p3BitDht_getNetworkStats(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native boolean p3BitDht_findPeer(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native boolean p3BitDht_dropPeer(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_addBadPeer(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int p3BitDht_addKnownPeer(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3BitDht_ConnectionFeedback(long jarg1, p3BitDht jarg1_, long jarg2, int jarg3);
  public final static native boolean p3BitDht_getPeerStatus(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean p3BitDht_getExternalInterface(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native boolean p3BitDht_setAttachMode(long jarg1, p3BitDht jarg1_, boolean jarg2);
  public final static native int p3BitDht_NodeCallback(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native int p3BitDht_PeerCallback(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native int p3BitDht_ValueCallback(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int p3BitDht_ConnectCallback(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, long jarg9);
  public final static native int p3BitDht_InfoCallback(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int p3BitDht_OnlinePeerCallback_locked(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, DhtPeerDetails jarg4_);
  public final static native int p3BitDht_UnreachablePeerCallback_locked(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, DhtPeerDetails jarg4_);
  public final static native int p3BitDht_minuteTick(long jarg1, p3BitDht jarg1_);
  public final static native int p3BitDht_doActions(long jarg1, p3BitDht jarg1_);
  public final static native int p3BitDht_checkProxyAllowed(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, int jarg4, long jarg5);
  public final static native int p3BitDht_checkConnectionAllowed(long jarg1, p3BitDht jarg1_, long jarg2, int jarg3);
  public final static native void p3BitDht_initiateConnection(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native int p3BitDht_installRelayConnection(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int p3BitDht_removeRelayConnection(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native void p3BitDht_monitorConnections(long jarg1, p3BitDht jarg1_);
  public final static native void p3BitDht_ConnectCallout(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void p3BitDht_ConnectCalloutTCPAttempt(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native void p3BitDht_ConnectCalloutDirectOrProxy(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void p3BitDht_ConnectCalloutRelay(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native void p3BitDht_Feedback_Connected(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native void p3BitDht_Feedback_ConnectionFailed(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native void p3BitDht_Feedback_ConnectionClosed(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native void p3BitDht_UdpConnectionFailed_locked(long jarg1, p3BitDht jarg1_, long jarg2, DhtPeerDetails jarg2_);
  public final static native void p3BitDht_ReleaseProxyExclusiveMode_locked(long jarg1, p3BitDht jarg1_, long jarg2, DhtPeerDetails jarg2_, boolean jarg3);
  public final static native void p3BitDht_installRelayHandler(long jarg1, p3BitDht jarg1_, long jarg2, p3BitDhtRelayHandler jarg2_);
  public final static native long p3BitDht_getRelayReceiver(long jarg1, p3BitDht jarg1_);
  public final static native int p3BitDht_RelayHandler_InstallRelayConnection(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int p3BitDht_RelayHandler_LogFailedProxyAttempt(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native int p3BitDht_getRelayServerList(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_addRelayServer(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_removeRelayServer(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native long p3BitDht_getRelayMode(long jarg1, p3BitDht jarg1_);
  public final static native int p3BitDht_setRelayMode(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_getRelayAllowance(long jarg1, p3BitDht jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native int p3BitDht_setRelayAllowance(long jarg1, p3BitDht jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native int p3BitDht_removePeer(long jarg1, p3BitDht jarg1_, long jarg2);
  public final static native int p3BitDht_calculateNodeId(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native int p3BitDht_addKnownNode(long jarg1, p3BitDht jarg1_, long jarg2, long jarg3);
  public final static native long new_ExtAddrFinder();
  public final static native void delete_ExtAddrFinder(long jarg1);
  public final static native boolean ExtAddrFinder_hasValidIP(long jarg1, ExtAddrFinder jarg1_, long jarg2);
  public final static native void ExtAddrFinder_getIPServersList(long jarg1, ExtAddrFinder jarg1_, long jarg2);
  public final static native void ExtAddrFinder_start_request(long jarg1, ExtAddrFinder jarg1_);
  public final static native void ExtAddrFinder_reset(long jarg1, ExtAddrFinder jarg1_);
  public final static native long doExtAddrSearch(long jarg1);
  public final static native long BinToHex__SWIG_0(long jarg1);
  public final static native long BinToHex__SWIG_1(String jarg1, long jarg2);
  public final static native long HashId__SWIG_0(long jarg1, boolean jarg2);
  public final static native long HashId__SWIG_1(long jarg1);
  public final static native long new_RsScopeTimer(long jarg1);
  public final static native void delete_RsScopeTimer(long jarg1);
  public final static native void Radix64_decode(long jarg1, String jarg2, long jarg3);
  public final static native void Radix64_encode(String jarg1, int jarg2, long jarg3);
  public final static native long new_Radix64();
  public final static native void delete_Radix64(long jarg1);
  public final static native boolean RsAES_aes_crypt_8_16(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean RsAES_aes_decrypt_8_16(long jarg1, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long RsAES_get_buffer_size(long jarg1);
  public final static native long new_RsAES();
  public final static native void delete_RsAES(long jarg1);
  public final static native boolean RsDiscSpace_checkForDiscSpace(long jarg1);
  public final static native void RsDiscSpace_setFreeSpaceLimit(long jarg1);
  public final static native long RsDiscSpace_freeSpaceLimit();
  public final static native void RsDiscSpace_setPartialsPath(long jarg1);
  public final static native void RsDiscSpace_setDownloadPath(long jarg1);
  public final static native long new_RsDiscSpace();
  public final static native void delete_RsDiscSpace(long jarg1);
  public final static native long new_FolderIterator(long jarg1);
  public final static native void delete_FolderIterator(long jarg1);
  public final static native boolean FolderIterator_isValid(long jarg1, FolderIterator jarg1_);
  public final static native boolean FolderIterator_readdir(long jarg1, FolderIterator jarg1_);
  public final static native boolean FolderIterator_d_name(long jarg1, FolderIterator jarg1_, long jarg2);
  public final static native boolean FolderIterator_closedir(long jarg1, FolderIterator jarg1_);
  public final static native int RSL_NONE_get();
  public final static native int RSL_ALERT_get();
  public final static native int RSL_ERROR_get();
  public final static native int RSL_WARNING_get();
  public final static native int RSL_DEBUG_ALERT_get();
  public final static native int RSL_DEBUG_BASIC_get();
  public final static native int RSL_DEBUG_ALL_get();
  public final static native int setDebugCrashMode(String jarg1);
  public final static native int clearDebugCrashLog();
  public final static native int setDebugFile(String jarg1);
  public final static native int setOutputLevel(int jarg1);
  public final static native int setZoneLevel(int jarg1, int jarg2);
  public final static native int rslog(long jarg1, int jarg2, long jarg3);
  public final static native int PQL_NONE_get();
  public final static native int PQL_ALERT_get();
  public final static native int PQL_ERROR_get();
  public final static native int PQL_WARNING_get();
  public final static native int PQL_DEBUG_ALERT_get();
  public final static native int PQL_DEBUG_BASIC_get();
  public final static native int PQL_DEBUG_ALL_get();
  public final static native long new_DNSResolver();
  public final static native void delete_DNSResolver(long jarg1);
  public final static native boolean DNSResolver_getIPAddressFromString(long jarg1, DNSResolver jarg1_, long jarg2, long jarg3);
  public final static native void DNSResolver_start_request(long jarg1, DNSResolver jarg1_);
  public final static native void DNSResolver_reset(long jarg1, DNSResolver jarg1_);
  public final static native long solveDNSEntries(long jarg1);
  public final static native long new_ftFiStore(long jarg1, CacheStrapper jarg1_, long jarg2, CacheTransfer jarg2_, long jarg3, NotifyBase jarg3_, long jarg4, p3PeerMgr jarg4_, long jarg5, long jarg6);
  public final static native boolean ftFiStore_search(long jarg1, ftFiStore jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void delete_ftFiStore(long jarg1);
  public final static native long new_ftFiMonitor(long jarg1, CacheStrapper jarg1_, long jarg2, NotifyBase jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native boolean ftFiMonitor_search__SWIG_0(long jarg1, ftFiMonitor jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native boolean ftFiMonitor_search__SWIG_1(long jarg1, ftFiMonitor jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, FileInfo jarg5_);
  public final static native void ftFiMonitor_setSharedDirectories(long jarg1, ftFiMonitor jarg1_, long jarg2);
  public final static native void ftFiMonitor_updateShareFlags(long jarg1, ftFiMonitor jarg1_, long jarg2, SharedDirInfo jarg2_);
  public final static native void ftFiMonitor_setRememberHashCacheDuration(long jarg1, ftFiMonitor jarg1_, long jarg2);
  public final static native long ftFiMonitor_rememberHashCacheDuration(long jarg1, ftFiMonitor jarg1_);
  public final static native void ftFiMonitor_setRememberHashCache(long jarg1, ftFiMonitor jarg1_, boolean jarg2);
  public final static native boolean ftFiMonitor_rememberHashCache(long jarg1, ftFiMonitor jarg1_);
  public final static native void ftFiMonitor_clearHashCache(long jarg1, ftFiMonitor jarg1_);
  public final static native void ftFiMonitor_setWatchPeriod(long jarg1, ftFiMonitor jarg1_, int jarg2);
  public final static native int ftFiMonitor_watchPeriod(long jarg1, ftFiMonitor jarg1_);
  public final static native void delete_ftFiMonitor(long jarg1);
  public final static native long new_ftCacheStrapper(long jarg1, p3LinkMgr jarg1_);
  public final static native boolean ftCacheStrapper_search(long jarg1, ftCacheStrapper jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void delete_ftCacheStrapper(long jarg1);
  public final static native long new_ftClient__SWIG_0();
  public final static native long new_ftClient__SWIG_1(long jarg1, ftTransferModule jarg1_, long jarg2, ftFileCreator jarg2_);
  public final static native void ftClient_mModule_set(long jarg1, ftClient jarg1_, long jarg2, ftTransferModule jarg2_);
  public final static native long ftClient_mModule_get(long jarg1, ftClient jarg1_);
  public final static native void ftClient_mCreator_set(long jarg1, ftClient jarg1_, long jarg2, ftFileCreator jarg2_);
  public final static native long ftClient_mCreator_get(long jarg1, ftClient jarg1_);
  public final static native void delete_ftClient(long jarg1);
  public final static native long new_ftRequest__SWIG_0(long jarg1, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native long new_ftRequest__SWIG_1();
  public final static native void ftRequest_mType_set(long jarg1, ftRequest jarg1_, long jarg2);
  public final static native long ftRequest_mType_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mPeerId_set(long jarg1, ftRequest jarg1_, long jarg2);
  public final static native long ftRequest_mPeerId_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mHash_set(long jarg1, ftRequest jarg1_, long jarg2);
  public final static native long ftRequest_mHash_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mSize_set(long jarg1, ftRequest jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftRequest_mSize_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mOffset_set(long jarg1, ftRequest jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftRequest_mOffset_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mChunk_set(long jarg1, ftRequest jarg1_, long jarg2);
  public final static native long ftRequest_mChunk_get(long jarg1, ftRequest jarg1_);
  public final static native void ftRequest_mData_set(long jarg1, ftRequest jarg1_, long jarg2);
  public final static native long ftRequest_mData_get(long jarg1, ftRequest jarg1_);
  public final static native void delete_ftRequest(long jarg1);
  public final static native void Sha1CacheEntry__map_set(long jarg1, Sha1CacheEntry jarg1_, long jarg2);
  public final static native long Sha1CacheEntry__map_get(long jarg1, Sha1CacheEntry jarg1_);
  public final static native void Sha1CacheEntry_last_activity_set(long jarg1, Sha1CacheEntry jarg1_, long jarg2);
  public final static native long Sha1CacheEntry_last_activity_get(long jarg1, Sha1CacheEntry jarg1_);
  public final static native void Sha1CacheEntry__received_set(long jarg1, Sha1CacheEntry jarg1_, long jarg2);
  public final static native long Sha1CacheEntry__received_get(long jarg1, Sha1CacheEntry jarg1_);
  public final static native void Sha1CacheEntry__to_ask_set(long jarg1, Sha1CacheEntry jarg1_, long jarg2);
  public final static native long Sha1CacheEntry__to_ask_get(long jarg1, Sha1CacheEntry jarg1_);
  public final static native long new_Sha1CacheEntry();
  public final static native void delete_Sha1CacheEntry(long jarg1);
  public final static native long new_ftDataMultiplex(long jarg1, long jarg2, ftDataSend jarg2_, long jarg3, ftSearch jarg3_);
  public final static native boolean ftDataMultiplex_addTransferModule(long jarg1, ftDataMultiplex jarg1_, long jarg2, ftTransferModule jarg2_, long jarg3, ftFileCreator jarg3_);
  public final static native boolean ftDataMultiplex_removeTransferModule(long jarg1, ftDataMultiplex jarg1_, long jarg2);
  public final static native boolean ftDataMultiplex_FileUploads(long jarg1, ftDataMultiplex jarg1_, long jarg2);
  public final static native boolean ftDataMultiplex_FileDownloads(long jarg1, ftDataMultiplex jarg1_, long jarg2);
  public final static native boolean ftDataMultiplex_FileDetails(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void ftDataMultiplex_deleteUnusedServers(long jarg1, ftDataMultiplex jarg1_);
  public final static native void ftDataMultiplex_handlePendingCrcRequests(long jarg1, ftDataMultiplex jarg1_);
  public final static native boolean ftDataMultiplex_sendDataRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataMultiplex_sendData(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataMultiplex_sendChunkMapRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataMultiplex_sendCRC32MapRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataMultiplex_computeAndSendCRC32Map(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataMultiplex_sendSingleChunkCRCRequests(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataMultiplex_dispatchReceivedChunkCheckSum(long jarg1, ftDataMultiplex jarg1_);
  public final static native boolean ftDataMultiplex_recvData(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6, long jarg7);
  public final static native boolean ftDataMultiplex_recvDataRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, java.math.BigInteger jarg5, long jarg6);
  public final static native boolean ftDataMultiplex_recvChunkMapRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, boolean jarg4);
  public final static native boolean ftDataMultiplex_recvChunkMap(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_, boolean jarg5);
  public final static native boolean ftDataMultiplex_recvCRC32Map(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataMultiplex_recvCRC32MapRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3);
  public final static native boolean ftDataMultiplex_recvSingleChunkCRCRequest(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftDataMultiplex_recvSingleChunkCRC(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, Sha1CheckSum jarg5_);
  public final static native boolean ftDataMultiplex_getClientChunkMap(long jarg1, ftDataMultiplex jarg1_, long jarg2, long jarg3, long jarg4, CompressedChunkMap jarg4_);
  public final static native void delete_ftDataMultiplex(long jarg1);
  public final static native long new_ftChunk();
  public final static native void ftChunk_offset_set(long jarg1, ftChunk jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftChunk_offset_get(long jarg1, ftChunk jarg1_);
  public final static native void ftChunk_size_set(long jarg1, ftChunk jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftChunk_size_get(long jarg1, ftChunk jarg1_);
  public final static native void ftChunk_id_set(long jarg1, ftChunk jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger ftChunk_id_get(long jarg1, ftChunk jarg1_);
  public final static native void ftChunk_ts_set(long jarg1, ftChunk jarg1_, long jarg2);
  public final static native long ftChunk_ts_get(long jarg1, ftChunk jarg1_);
  public final static native void ftChunk_ref_cnt_set(long jarg1, ftChunk jarg1_, long jarg2);
  public final static native long ftChunk_ref_cnt_get(long jarg1, ftChunk jarg1_);
  public final static native void ftChunk_peer_id_set(long jarg1, ftChunk jarg1_, long jarg2);
  public final static native long ftChunk_peer_id_get(long jarg1, ftChunk jarg1_);
  public final static native void delete_ftChunk(long jarg1);
  public final static native void ChunkDownloadInfo__slices_set(long jarg1, ChunkDownloadInfo jarg1_, long jarg2);
  public final static native long ChunkDownloadInfo__slices_get(long jarg1, ChunkDownloadInfo jarg1_);
  public final static native void ChunkDownloadInfo__remains_set(long jarg1, ChunkDownloadInfo jarg1_, long jarg2);
  public final static native long ChunkDownloadInfo__remains_get(long jarg1, ChunkDownloadInfo jarg1_);
  public final static native void ChunkDownloadInfo__last_data_received_set(long jarg1, ChunkDownloadInfo jarg1_, long jarg2);
  public final static native long ChunkDownloadInfo__last_data_received_get(long jarg1, ChunkDownloadInfo jarg1_);
  public final static native long new_ChunkDownloadInfo();
  public final static native void delete_ChunkDownloadInfo(long jarg1);
  public final static native void SourceChunksInfo_cmap_set(long jarg1, SourceChunksInfo jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native long SourceChunksInfo_cmap_get(long jarg1, SourceChunksInfo jarg1_);
  public final static native void SourceChunksInfo_TS_set(long jarg1, SourceChunksInfo jarg1_, long jarg2);
  public final static native long SourceChunksInfo_TS_get(long jarg1, SourceChunksInfo jarg1_);
  public final static native void SourceChunksInfo_is_full_set(long jarg1, SourceChunksInfo jarg1_, boolean jarg2);
  public final static native boolean SourceChunksInfo_is_full_get(long jarg1, SourceChunksInfo jarg1_);
  public final static native boolean SourceChunksInfo_hasData(long jarg1, SourceChunksInfo jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native long new_SourceChunksInfo();
  public final static native void delete_SourceChunksInfo(long jarg1);
  public final static native long ChunkMap_CHUNKMAP_FIXED_CHUNK_SIZE_get();
  public final static native long new_ChunkMap(java.math.BigInteger jarg1, boolean jarg2);
  public final static native void delete_ChunkMap(long jarg1);
  public final static native boolean ChunkMap_getDataChunk(long jarg1, ChunkMap jarg1_, long jarg2, long jarg3, long jarg4, ftChunk jarg4_, long jarg5);
  public final static native void ChunkMap_dataReceived(long jarg1, ChunkMap jarg1_, java.math.BigInteger jarg2);
  public final static native void ChunkMap_setStrategy(long jarg1, ChunkMap jarg1_, int jarg2);
  public final static native int ChunkMap_getStrategy(long jarg1, ChunkMap jarg1_);
  public final static native void ChunkMap_getAvailabilityMap(long jarg1, ChunkMap jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native void ChunkMap_setAvailabilityMap(long jarg1, ChunkMap jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native void ChunkMap_removeFileSource(long jarg1, ChunkMap jarg1_, long jarg2);
  public final static native void ChunkMap_buildPlainMap(java.math.BigInteger jarg1, long jarg2, CompressedChunkMap jarg2_);
  public final static native long ChunkMap_getNumberOfChunks(java.math.BigInteger jarg1);
  public final static native boolean ChunkMap_isChunkAvailable(long jarg1, ChunkMap jarg1_, java.math.BigInteger jarg2, long jarg3);
  public final static native void ChunkMap_removeInactiveChunks(long jarg1, ChunkMap jarg1_, long jarg2);
  public final static native void ChunkMap_setPeerAvailabilityMap(long jarg1, ChunkMap jarg1_, long jarg2, long jarg3, CompressedChunkMap jarg3_);
  public final static native long ChunkMap_getSourceChunksInfo(long jarg1, ChunkMap jarg1_, long jarg2);
  public final static native java.math.BigInteger ChunkMap_getTotalReceived(long jarg1, ChunkMap jarg1_);
  public final static native boolean ChunkMap_isComplete(long jarg1, ChunkMap jarg1_);
  public final static native void ChunkMap_getChunksInfo(long jarg1, ChunkMap jarg1_, long jarg2, FileChunksInfo jarg2_);
  public final static native void ChunkMap_setChunkCheckingResult(long jarg1, ChunkMap jarg1_, long jarg2, boolean jarg3);
  public final static native void ChunkMap_getChunksToCheck(long jarg1, ChunkMap jarg1_, long jarg2);
  public final static native void ChunkMap_getSourcesList(long jarg1, ChunkMap jarg1_, long jarg2, long jarg3);
  public final static native void ChunkMap_forceCheck(long jarg1, ChunkMap jarg1_);
  public final static native void ChunkMap_updateTotalDownloaded(long jarg1, ChunkMap jarg1_);
  public final static native long new_ftFileProvider(long jarg1, java.math.BigInteger jarg2, long jarg3);
  public final static native void delete_ftFileProvider(long jarg1);
  public final static native boolean ftFileProvider_getFileData(long jarg1, ftFileProvider jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native boolean ftFileProvider_FileDetails(long jarg1, ftFileProvider jarg1_, long jarg2, FileInfo jarg2_);
  public final static native long ftFileProvider_getHash(long jarg1, ftFileProvider jarg1_);
  public final static native java.math.BigInteger ftFileProvider_getFileSize(long jarg1, ftFileProvider jarg1_);
  public final static native boolean ftFileProvider_fileOk(long jarg1, ftFileProvider jarg1_);
  public final static native void ftFileProvider_getAvailabilityMap(long jarg1, ftFileProvider jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native void ftFileProvider_getClientMap(long jarg1, ftFileProvider jarg1_, long jarg2, long jarg3, CompressedChunkMap jarg3_, long jarg4);
  public final static native void ftFileProvider_setClientMap(long jarg1, ftFileProvider jarg1_, long jarg2, long jarg3, CompressedChunkMap jarg3_);
  public final static native boolean ftFileProvider_purgeOldPeers(long jarg1, ftFileProvider jarg1_, long jarg2, long jarg3);
  public final static native long ftFileProvider_fileHash(long jarg1, ftFileProvider jarg1_);
  public final static native long ftFileProvider_fileName(long jarg1, ftFileProvider jarg1_);
  public final static native java.math.BigInteger ftFileProvider_fileSize(long jarg1, ftFileProvider jarg1_);
  public final static native long new_ZeroInitCounter();
  public final static native void ZeroInitCounter_cnt_set(long jarg1, ZeroInitCounter jarg1_, long jarg2);
  public final static native long ZeroInitCounter_cnt_get(long jarg1, ZeroInitCounter jarg1_);
  public final static native void delete_ZeroInitCounter(long jarg1);
  public final static native long new_ftFileCreator(long jarg1, java.math.BigInteger jarg2, long jarg3, boolean jarg4);
  public final static native void delete_ftFileCreator(long jarg1);
  public final static native boolean ftFileCreator_getFileData(long jarg1, ftFileCreator jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native boolean ftFileCreator_finished(long jarg1, ftFileCreator jarg1_);
  public final static native java.math.BigInteger ftFileCreator_getRecvd(long jarg1, ftFileCreator jarg1_);
  public final static native void ftFileCreator_closeFile(long jarg1, ftFileCreator jarg1_);
  public final static native void ftFileCreator_getChunkMap(long jarg1, ftFileCreator jarg1_, long jarg2, FileChunksInfo jarg2_);
  public final static native void ftFileCreator_setChunkStrategy(long jarg1, ftFileCreator jarg1_, int jarg2);
  public final static native int ftFileCreator_getChunkStrategy(long jarg1, ftFileCreator jarg1_);
  public final static native boolean ftFileCreator_hashReceivedData(long jarg1, ftFileCreator jarg1_, long jarg2);
  public final static native boolean ftFileCreator_crossCheckChunkMap(long jarg1, ftFileCreator jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void ftFileCreator_forceCheck(long jarg1, ftFileCreator jarg1_);
  public final static native boolean ftFileCreator_verifyChunk(long jarg1, ftFileCreator jarg1_, long jarg2, long jarg3, Sha1CheckSum jarg3_);
  public final static native void ftFileCreator_getChunksToCheck(long jarg1, ftFileCreator jarg1_, long jarg2);
  public final static native boolean ftFileCreator_getMissingChunk(long jarg1, ftFileCreator jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native void ftFileCreator_removeInactiveChunks(long jarg1, ftFileCreator jarg1_);
  public final static native void ftFileCreator_removeFileSource(long jarg1, ftFileCreator jarg1_, long jarg2);
  public final static native void ftFileCreator_getSourcesList(long jarg1, ftFileCreator jarg1_, long jarg2, long jarg3);
  public final static native long ftFileCreator_lastRecvTimeStamp(long jarg1, ftFileCreator jarg1_);
  public final static native void ftFileCreator_resetRecvTimeStamp(long jarg1, ftFileCreator jarg1_);
  public final static native long ftFileCreator_creationTimeStamp(long jarg1, ftFileCreator jarg1_);
  public final static native boolean ftFileCreator_addFileData(long jarg1, ftFileCreator jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native void ftFileCreator_getAvailabilityMap(long jarg1, ftFileCreator jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native void ftFileCreator_setAvailabilityMap(long jarg1, ftFileCreator jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native void ftFileCreator_setSourceMap(long jarg1, ftFileCreator jarg1_, long jarg2, long jarg3, CompressedChunkMap jarg3_);
  public final static native boolean ftFileCreator_sourceIsComplete(long jarg1, ftFileCreator jarg1_, long jarg2);
  public final static native long new_FileDetails__SWIG_0();
  public final static native long new_FileDetails__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native long new_FileDetails__SWIG_2(long jarg1, FileInfo jarg1_, long jarg2, long jarg3);
  public final static native void FileDetails_info_set(long jarg1, FileDetails jarg1_, long jarg2, FileInfo jarg2_);
  public final static native long FileDetails_info_get(long jarg1, FileDetails jarg1_);
  public final static native void FileDetails_start_set(long jarg1, FileDetails jarg1_, long jarg2);
  public final static native long FileDetails_start_get(long jarg1, FileDetails jarg1_);
  public final static native void FileDetails_period_set(long jarg1, FileDetails jarg1_, long jarg2);
  public final static native long FileDetails_period_get(long jarg1, FileDetails jarg1_);
  public final static native void delete_FileDetails(long jarg1);
  public final static native long FT_DETAILS_CLEANUP_get();
  public final static native long FT_DETAILS_LOCAL_get();
  public final static native long FT_DETAILS_REMOTE_get();
  public final static native long CLEANUP_PERIOD_get();
  public final static native long new_ftExtraList();
  public final static native boolean ftExtraList_addExtraFile(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5, long jarg6);
  public final static native boolean ftExtraList_removeExtraFile(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3);
  public final static native boolean ftExtraList_moveExtraFile(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5);
  public final static native boolean ftExtraList_hashExtraFile(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftExtraList_hashExtraFileDone(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3, FileInfo jarg3_);
  public final static native boolean ftExtraList_search(long jarg1, ftExtraList jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void ftExtraList_run(long jarg1, ftExtraList jarg1_);
  public final static native void delete_ftExtraList(long jarg1);
  public final static native long new_ftFileSearch();
  public final static native boolean ftFileSearch_addSearchMode(long jarg1, ftFileSearch jarg1_, long jarg2, ftSearch jarg2_, long jarg3);
  public final static native boolean ftFileSearch_search(long jarg1, ftFileSearch jarg1_, long jarg2, long jarg3, long jarg4, FileInfo jarg4_);
  public final static native void delete_ftFileSearch(long jarg1);
  public final static native long PQIPEER_INIT_get();
  public final static native long PQIPEER_NOT_ONLINE_get();
  public final static native long PQIPEER_DOWNLOADING_get();
  public final static native long PQIPEER_IDLE_get();
  public final static native long PQIPEER_SUSPEND_get();
  public final static native long new_peerInfo__SWIG_0(long jarg1);
  public final static native long new_peerInfo__SWIG_1(long jarg1, long jarg2, long jarg3);
  public final static native void peerInfo_peerId_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_peerId_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_state_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_state_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_desiredRate_set(long jarg1, peerInfo jarg1_, double jarg2);
  public final static native double peerInfo_desiredRate_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_actualRate_set(long jarg1, peerInfo jarg1_, double jarg2);
  public final static native double peerInfo_actualRate_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_lastTS_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_lastTS_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_recvTS_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_recvTS_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_lastTransfers_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_lastTransfers_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_nResets_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_nResets_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_rtt_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_rtt_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_rttActive_set(long jarg1, peerInfo jarg1_, boolean jarg2);
  public final static native boolean peerInfo_rttActive_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_rttStart_set(long jarg1, peerInfo jarg1_, long jarg2);
  public final static native long peerInfo_rttStart_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_rttOffset_set(long jarg1, peerInfo jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger peerInfo_rttOffset_get(long jarg1, peerInfo jarg1_);
  public final static native void peerInfo_mRateIncrease_set(long jarg1, peerInfo jarg1_, float jarg2);
  public final static native float peerInfo_mRateIncrease_get(long jarg1, peerInfo jarg1_);
  public final static native void delete_peerInfo(long jarg1);
  public final static native long new_ftFileStatus__SWIG_0();
  public final static native long new_ftFileStatus__SWIG_1(long jarg1);
  public final static native void ftFileStatus_hash_set(long jarg1, ftFileStatus jarg1_, long jarg2);
  public final static native long ftFileStatus_hash_get(long jarg1, ftFileStatus jarg1_);
  public final static native void ftFileStatus_stat_set(long jarg1, ftFileStatus jarg1_, int jarg2);
  public final static native int ftFileStatus_stat_get(long jarg1, ftFileStatus jarg1_);
  public final static native void delete_ftFileStatus(long jarg1);
  public final static native long new_ftTransferModule(long jarg1, ftFileCreator jarg1_, long jarg2, ftDataMultiplex jarg2_, long jarg3, ftController jarg3_);
  public final static native void delete_ftTransferModule(long jarg1);
  public final static native boolean ftTransferModule_setFileSources(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_addFileSource(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_removeFileSource(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_setPeerState(long jarg1, ftTransferModule jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean ftTransferModule_getFileSources(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_getPeerState(long jarg1, ftTransferModule jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long ftTransferModule_getDataRate(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_cancelTransfer(long jarg1, ftTransferModule jarg1_);
  public final static native boolean ftTransferModule_cancelFileTransferUpward(long jarg1, ftTransferModule jarg1_);
  public final static native boolean ftTransferModule_completeFileTransfer(long jarg1, ftTransferModule jarg1_);
  public final static native boolean ftTransferModule_isCheckingHash(long jarg1, ftTransferModule jarg1_);
  public final static native void ftTransferModule_forceCheck(long jarg1, ftTransferModule jarg1_);
  public final static native void ftTransferModule_addCRC32Map(long jarg1, ftTransferModule jarg1_, long jarg2);
  public final static native boolean ftTransferModule_recvFileData(long jarg1, ftTransferModule jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native void ftTransferModule_locked_requestData(long jarg1, ftTransferModule jarg1_, long jarg2, java.math.BigInteger jarg3, long jarg4);
  public final static native boolean ftTransferModule_locked_getChunk(long jarg1, ftTransferModule jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native boolean ftTransferModule_locked_storeData(long jarg1, ftTransferModule jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4);
  public final static native int ftTransferModule_tick(long jarg1, ftTransferModule jarg1_);
  public final static native long ftTransferModule_hash(long jarg1, ftTransferModule jarg1_);
  public final static native java.math.BigInteger ftTransferModule_size(long jarg1, ftTransferModule jarg1_);
  public final static native boolean ftTransferModule_queryInactive(long jarg1, ftTransferModule jarg1_);
  public final static native void ftTransferModule_adjustSpeed(long jarg1, ftTransferModule jarg1_);
  public final static native int ftTransferModule_downloadPriority(long jarg1, ftTransferModule jarg1_);
  public final static native void ftTransferModule_setDownloadPriority(long jarg1, ftTransferModule jarg1_, int jarg2);
  public final static native boolean RsTurtleFileRequestItem_shouldStampTunnel(long jarg1, RsTurtleFileRequestItem jarg1_);
  public final static native long RsTurtleFileRequestItem_travelingDirection(long jarg1, RsTurtleFileRequestItem jarg1_);
  public final static native void RsTurtleFileRequestItem_chunk_offset_set(long jarg1, RsTurtleFileRequestItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsTurtleFileRequestItem_chunk_offset_get(long jarg1, RsTurtleFileRequestItem jarg1_);
  public final static native void RsTurtleFileRequestItem_chunk_size_set(long jarg1, RsTurtleFileRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleFileRequestItem_chunk_size_get(long jarg1, RsTurtleFileRequestItem jarg1_);
  public final static native long RsTurtleFileRequestItem_print(long jarg1, RsTurtleFileRequestItem jarg1_, long jarg2, int jarg3);
  public final static native void delete_RsTurtleFileRequestItem(long jarg1);
  public final static native void delete_RsTurtleFileDataItem(long jarg1);
  public final static native boolean RsTurtleFileDataItem_shouldStampTunnel(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native long RsTurtleFileDataItem_travelingDirection(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native void RsTurtleFileDataItem_chunk_offset_set(long jarg1, RsTurtleFileDataItem jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger RsTurtleFileDataItem_chunk_offset_get(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native void RsTurtleFileDataItem_chunk_size_set(long jarg1, RsTurtleFileDataItem jarg1_, long jarg2);
  public final static native long RsTurtleFileDataItem_chunk_size_get(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native void RsTurtleFileDataItem_chunk_data_set(long jarg1, RsTurtleFileDataItem jarg1_, long jarg2);
  public final static native long RsTurtleFileDataItem_chunk_data_get(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native long RsTurtleFileDataItem_print(long jarg1, RsTurtleFileDataItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleFileDataItem_serialize(long jarg1, RsTurtleFileDataItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleFileDataItem_serial_size(long jarg1, RsTurtleFileDataItem jarg1_);
  public final static native boolean RsTurtleFileMapRequestItem_shouldStampTunnel(long jarg1, RsTurtleFileMapRequestItem jarg1_);
  public final static native long RsTurtleFileMapRequestItem_print(long jarg1, RsTurtleFileMapRequestItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleFileMapRequestItem_serialize(long jarg1, RsTurtleFileMapRequestItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleFileMapRequestItem_serial_size(long jarg1, RsTurtleFileMapRequestItem jarg1_);
  public final static native void delete_RsTurtleFileMapRequestItem(long jarg1);
  public final static native boolean RsTurtleFileMapItem_shouldStampTunnel(long jarg1, RsTurtleFileMapItem jarg1_);
  public final static native void RsTurtleFileMapItem_compressed_map_set(long jarg1, RsTurtleFileMapItem jarg1_, long jarg2, CompressedChunkMap jarg2_);
  public final static native long RsTurtleFileMapItem_compressed_map_get(long jarg1, RsTurtleFileMapItem jarg1_);
  public final static native long RsTurtleFileMapItem_print(long jarg1, RsTurtleFileMapItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleFileMapItem_serialize(long jarg1, RsTurtleFileMapItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleFileMapItem_serial_size(long jarg1, RsTurtleFileMapItem jarg1_);
  public final static native void delete_RsTurtleFileMapItem(long jarg1);
  public final static native boolean RsTurtleFileCrcRequestItem_shouldStampTunnel(long jarg1, RsTurtleFileCrcRequestItem jarg1_);
  public final static native long RsTurtleFileCrcRequestItem_travelingDirection(long jarg1, RsTurtleFileCrcRequestItem jarg1_);
  public final static native long RsTurtleFileCrcRequestItem_print(long jarg1, RsTurtleFileCrcRequestItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleFileCrcRequestItem_serialize(long jarg1, RsTurtleFileCrcRequestItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleFileCrcRequestItem_serial_size(long jarg1, RsTurtleFileCrcRequestItem jarg1_);
  public final static native void delete_RsTurtleFileCrcRequestItem(long jarg1);
  public final static native boolean RsTurtleChunkCrcRequestItem_shouldStampTunnel(long jarg1, RsTurtleChunkCrcRequestItem jarg1_);
  public final static native long RsTurtleChunkCrcRequestItem_travelingDirection(long jarg1, RsTurtleChunkCrcRequestItem jarg1_);
  public final static native void RsTurtleChunkCrcRequestItem_chunk_number_set(long jarg1, RsTurtleChunkCrcRequestItem jarg1_, long jarg2);
  public final static native long RsTurtleChunkCrcRequestItem_chunk_number_get(long jarg1, RsTurtleChunkCrcRequestItem jarg1_);
  public final static native long RsTurtleChunkCrcRequestItem_print(long jarg1, RsTurtleChunkCrcRequestItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleChunkCrcRequestItem_serialize(long jarg1, RsTurtleChunkCrcRequestItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleChunkCrcRequestItem_serial_size(long jarg1, RsTurtleChunkCrcRequestItem jarg1_);
  public final static native void delete_RsTurtleChunkCrcRequestItem(long jarg1);
  public final static native boolean RsTurtleFileCrcItem_shouldStampTunnel(long jarg1, RsTurtleFileCrcItem jarg1_);
  public final static native long RsTurtleFileCrcItem_travelingDirection(long jarg1, RsTurtleFileCrcItem jarg1_);
  public final static native void RsTurtleFileCrcItem_crc_map_set(long jarg1, RsTurtleFileCrcItem jarg1_, long jarg2);
  public final static native long RsTurtleFileCrcItem_crc_map_get(long jarg1, RsTurtleFileCrcItem jarg1_);
  public final static native long RsTurtleFileCrcItem_print(long jarg1, RsTurtleFileCrcItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleFileCrcItem_serialize(long jarg1, RsTurtleFileCrcItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleFileCrcItem_serial_size(long jarg1, RsTurtleFileCrcItem jarg1_);
  public final static native void delete_RsTurtleFileCrcItem(long jarg1);
  public final static native boolean RsTurtleChunkCrcItem_shouldStampTunnel(long jarg1, RsTurtleChunkCrcItem jarg1_);
  public final static native long RsTurtleChunkCrcItem_travelingDirection(long jarg1, RsTurtleChunkCrcItem jarg1_);
  public final static native void RsTurtleChunkCrcItem_chunk_number_set(long jarg1, RsTurtleChunkCrcItem jarg1_, long jarg2);
  public final static native long RsTurtleChunkCrcItem_chunk_number_get(long jarg1, RsTurtleChunkCrcItem jarg1_);
  public final static native void RsTurtleChunkCrcItem_check_sum_set(long jarg1, RsTurtleChunkCrcItem jarg1_, long jarg2, Sha1CheckSum jarg2_);
  public final static native long RsTurtleChunkCrcItem_check_sum_get(long jarg1, RsTurtleChunkCrcItem jarg1_);
  public final static native long RsTurtleChunkCrcItem_print(long jarg1, RsTurtleChunkCrcItem jarg1_, long jarg2, int jarg3);
  public final static native boolean RsTurtleChunkCrcItem_serialize(long jarg1, RsTurtleChunkCrcItem jarg1_, long jarg2, long jarg3);
  public final static native long RsTurtleChunkCrcItem_serial_size(long jarg1, RsTurtleChunkCrcItem jarg1_);
  public final static native void delete_RsTurtleChunkCrcItem(long jarg1);
  public final static native long new_ftFileMapper(java.math.BigInteger jarg1, long jarg2);
  public final static native boolean ftFileMapper_storeData(long jarg1, ftFileMapper jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4, long jarg5);
  public final static native boolean ftFileMapper_readData(long jarg1, ftFileMapper jarg1_, long jarg2, long jarg3, java.math.BigInteger jarg4);
  public final static native void ftFileMapper_print(long jarg1, ftFileMapper jarg1_);
  public final static native void delete_ftFileMapper(long jarg1);
  public final static native void PluginInfo_plugin_set(long jarg1, PluginInfo jarg1_, long jarg2, RsPlugin jarg2_);
  public final static native long PluginInfo_plugin_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_file_hash_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_file_hash_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_file_name_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_file_name_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_creator_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_creator_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_name_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_name_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_API_version_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_API_version_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_svn_revision_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_svn_revision_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_status_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_status_get(long jarg1, PluginInfo jarg1_);
  public final static native void PluginInfo_info_string_set(long jarg1, PluginInfo jarg1_, long jarg2);
  public final static native long PluginInfo_info_string_get(long jarg1, PluginInfo jarg1_);
  public final static native long new_PluginInfo();
  public final static native void delete_PluginInfo(long jarg1);
  public final static native long new_RsPluginManager(long jarg1);
  public final static native void delete_RsPluginManager(long jarg1);
  public final static native int RsPluginManager_nbPlugins(long jarg1, RsPluginManager jarg1_);
  public final static native long RsPluginManager_plugin(long jarg1, RsPluginManager jarg1_, int jarg2);
  public final static native long RsPluginManager_getPluginDirectories(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_getPluginStatus(long jarg1, RsPluginManager jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7);
  public final static native void RsPluginManager_enablePlugin(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native void RsPluginManager_disablePlugin(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native void RsPluginManager_slowTickPlugins(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native long RsPluginManager_getLocalCacheDir(long jarg1, RsPluginManager jarg1_);
  public final static native long RsPluginManager_getRemoteCacheDir(long jarg1, RsPluginManager jarg1_);
  public final static native long RsPluginManager_getFileServer(long jarg1, RsPluginManager jarg1_);
  public final static native long RsPluginManager_getLinkMgr(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_allowAllPlugins(long jarg1, RsPluginManager jarg1_, boolean jarg2);
  public final static native boolean RsPluginManager_getAllowAllPlugins(long jarg1, RsPluginManager jarg1_);
  public final static native boolean RsPluginManager_saveList(long jarg1, RsPluginManager jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPluginManager_loadList(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native long RsPluginManager_setupSerialiser(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_addConfigurations(long jarg1, RsPluginManager jarg1_, long jarg2, p3ConfigMgr jarg2_);
  public final static native void RsPluginManager_loadConfiguration(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_setInterfaces(long jarg1, RsPluginManager jarg1_, long jarg2, RsPlugInInterfaces jarg2_);
  public final static native boolean RsPluginManager_acceptablePluginName(long jarg1);
  public final static native void RsPluginManager_setCacheDirectories(long jarg1, long jarg2);
  public final static native void RsPluginManager_setFileServer(long jarg1, ftServer jarg1_);
  public final static native void RsPluginManager_setLinkMgr(long jarg1, p3LinkMgr jarg1_);
  public final static native void RsPluginManager_loadPlugins__SWIG_0(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native void RsPluginManager_loadPlugins__SWIG_1(long jarg1, RsPluginManager jarg1_, long jarg2);
  public final static native void RsPluginManager_stopPlugins(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_registerCacheServices(long jarg1, RsPluginManager jarg1_);
  public final static native void RsPluginManager_registerClientServices(long jarg1, RsPluginManager jarg1_, long jarg2, p3ServiceServer jarg2_);
  public final static native long new_RsCacheService(int jarg1, long jarg2, long jarg3, long jarg4, RsPluginHandler jarg4_);
  public final static native long RsCacheService_tickDelay(long jarg1, RsCacheService jarg1_);
  public final static native void RsCacheService_tick(long jarg1, RsCacheService jarg1_);
  public final static native long RsCacheService_setupSerialiser(long jarg1, RsCacheService jarg1_);
  public final static native boolean RsCacheService_saveList(long jarg1, RsCacheService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsCacheService_loadList(long jarg1, RsCacheService jarg1_, long jarg2);
  public final static native void delete_RsCacheService(long jarg1);
  public final static native long RsPQIService_tickDelay(long jarg1, RsPQIService jarg1_);
  public final static native int RsPQIService_tick(long jarg1, RsPQIService jarg1_);
  public final static native long RsPQIService_setupSerialiser(long jarg1, RsPQIService jarg1_);
  public final static native boolean RsPQIService_saveList(long jarg1, RsPQIService jarg1_, long jarg2, long jarg3);
  public final static native boolean RsPQIService_loadList(long jarg1, RsPQIService jarg1_, long jarg2);
  public final static native void delete_RsPQIService(long jarg1);
  public final static native long RsTlvBinaryData_SWIGUpcast(long jarg1);
  public final static native long RsTlvStringSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvPeerIdSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvHashSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvServiceIdSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvFileItem_SWIGUpcast(long jarg1);
  public final static native long RsTlvFileSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvFileData_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeyValue_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeyValueSet_SWIGUpcast(long jarg1);
  public final static native long RsTlvImage_SWIGUpcast(long jarg1);
  public final static native long RsTlvIpAddressInfo_SWIGUpcast(long jarg1);
  public final static native long RsTlvIpAddrSet_SWIGUpcast(long jarg1);
  public final static native long pqiConnectCbDummy_SWIGUpcast(long jarg1);
  public final static native long pqiNetAssistFirewall_SWIGUpcast(long jarg1);
  public final static native long pqiNetAssistConnect_SWIGUpcast(long jarg1);
  public final static native long RsQueueThread_SWIGUpcast(long jarg1);
  public final static native long RsItem_SWIGUpcast(long jarg1);
  public final static native long RsRawItem_SWIGUpcast(long jarg1);
  public final static native long PQInterface_SWIGUpcast(long jarg1);
  public final static native long NetBinInterface_SWIGUpcast(long jarg1);
  public final static native long BinFileInterface_SWIGUpcast(long jarg1);
  public final static native long BinEncryptedFileInterface_SWIGUpcast(long jarg1);
  public final static native long BinMemInterface_SWIGUpcast(long jarg1);
  public final static native long NetBinDummy_SWIGUpcast(long jarg1);
  public final static native long p3Config_SWIGUpcast(long jarg1);
  public final static native long p3GeneralConfig_SWIGUpcast(long jarg1);
  public final static native long p3LinkMgr_SWIGUpcast(long jarg1);
  public final static native long p3LinkMgrIMPL_SWIGUpcast(long jarg1);
  public final static native long RsTlvSecurityKey_SWIGUpcast(long jarg1);
  public final static native long RsTlvSecurityKeySet_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeySignature_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeySignatureSet_SWIGUpcast(long jarg1);
  public final static native long RsGxsGrpItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsNxsItem_SWIGUpcast(long jarg1);
  public final static native long RsNxsSyncGrp_SWIGUpcast(long jarg1);
  public final static native long RsNxsTransac_SWIGUpcast(long jarg1);
  public final static native long RsNxsSyncGrpItem_SWIGUpcast(long jarg1);
  public final static native long RsNxsGrp_SWIGUpcast(long jarg1);
  public final static native long RsNxsSyncMsg_SWIGUpcast(long jarg1);
  public final static native long RsNxsSyncMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsNxsMsg_SWIGUpcast(long jarg1);
  public final static native long RsNxsSearchReq_SWIGUpcast(long jarg1);
  public final static native long RsNxsExtended_SWIGUpcast(long jarg1);
  public final static native long RsNxsSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsFileRequest_SWIGUpcast(long jarg1);
  public final static native long RsFileData_SWIGUpcast(long jarg1);
  public final static native long RsFileChunkMapRequest_SWIGUpcast(long jarg1);
  public final static native long RsFileChunkMap_SWIGUpcast(long jarg1);
  public final static native long RsFileCRC32MapRequest_SWIGUpcast(long jarg1);
  public final static native long RsFileSingleChunkCrcRequest_SWIGUpcast(long jarg1);
  public final static native long RsFileCRC32Map_SWIGUpcast(long jarg1);
  public final static native long RsFileSingleChunkCrc_SWIGUpcast(long jarg1);
  public final static native long RsFileItemSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsCacheRequest_SWIGUpcast(long jarg1);
  public final static native long RsCacheItem_SWIGUpcast(long jarg1);
  public final static native long RsCacheItemSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsServiceSerialiser_SWIGUpcast(long jarg1);
  public final static native long P3Interface_SWIGUpcast(long jarg1);
  public final static native long p3Service_SWIGUpcast(long jarg1);
  public final static native long nullService_SWIGUpcast(long jarg1);
  public final static native long p3ThreadedService_SWIGUpcast(long jarg1);
  public final static native long RsGxsGroupChange_SWIGUpcast(long jarg1);
  public final static native long RsGxsMsgChange_SWIGUpcast(long jarg1);
  public final static native long GroupMetaReq_SWIGUpcast(long jarg1);
  public final static native long GroupIdReq_SWIGUpcast(long jarg1);
  public final static native long GroupDataReq_SWIGUpcast(long jarg1);
  public final static native long MsgIdReq_SWIGUpcast(long jarg1);
  public final static native long MsgMetaReq_SWIGUpcast(long jarg1);
  public final static native long MsgDataReq_SWIGUpcast(long jarg1);
  public final static native long MsgRelatedInfoReq_SWIGUpcast(long jarg1);
  public final static native long GroupSetFlagReq_SWIGUpcast(long jarg1);
  public final static native long MessageSetFlagReq_SWIGUpcast(long jarg1);
  public final static native long RsGxsDataAccess_SWIGUpcast(long jarg1);
  public final static native long RsGxsMessageCleanUp_SWIGUpcast(long jarg1);
  public final static native long RsGxsIntegrityCheck_SWIGUpcast(long jarg1);
  public final static native long RsGenExchange_SWIGUpcast(long jarg1);
  public final static native long RsIdentity_SWIGUpcast(long jarg1);
  public final static native long RsGxsCircles_SWIGUpcast(long jarg1);
  public final static native long RsGxsIdExchange_SWIGUpcast(long jarg1);
  public final static native long RsGxsCircleExchange_SWIGUpcast(long jarg1);
  public final static native long RsNxsNetMgrImpl_SWIGUpcast(long jarg1);
  public final static native long MsgRespPending_SWIGUpcast(long jarg1);
  public final static native long GrpRespPending_SWIGUpcast(long jarg1);
  public final static native long GrpCircleIdRequestVetting_SWIGUpcast(long jarg1);
  public final static native long MsgCircleIdsRequestVetting_SWIGUpcast(long jarg1);
  public final static native long p3GroupManagement_SWIGUpcast(long jarg1);
  public final static native long RsGxsNetService_SWIGUpcast(long jarg1);
  public final static native long RsDoubleBind_SWIGUpcast(long jarg1);
  public final static native long RsStringBind_SWIGUpcast(long jarg1);
  public final static native long RsInt32Bind_SWIGUpcast(long jarg1);
  public final static native long RsInt64bind_SWIGUpcast(long jarg1);
  public final static native long RsBoolBind_SWIGUpcast(long jarg1);
  public final static native long RsBlobBind_SWIGUpcast(long jarg1);
  public final static native long RsDataService_SWIGUpcast(long jarg1);
  public final static native long pqistore_SWIGUpcast(long jarg1);
  public final static native long pqiSSLstore_SWIGUpcast(long jarg1);
  public final static native long CacheStrapper_SWIGUpcast(long jarg1);
  public final static native long RsDistribChildConfig_SWIGUpcast(long jarg1);
  public final static native long RsDistribConfigData_SWIGUpcast(long jarg1);
  public final static native long RsDistribMsg_SWIGUpcast(long jarg1);
  public final static native long RsDistribSignedMsg_SWIGUpcast(long jarg1);
  public final static native long RsDistribGrp_SWIGUpcast(long jarg1);
  public final static native long RsDistribGrpKey_SWIGUpcast(long jarg1);
  public final static native long RsDistribSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3GroupDistrib_SWIGUpcast(long jarg1);
  public final static native long p3PortService_SWIGUpcast(long jarg1);
  public final static native long p3PeerMgrIMPL_SWIGUpcast(long jarg1);
  public final static native long p3zcNatAssist_SWIGUpcast(long jarg1);
  public final static native long p3ZeroConf_SWIGUpcast(long jarg1);
  public final static native long pqihandler_SWIGUpcast(long jarg1);
  public final static native long AuthSSLimpl_SWIGUpcast(long jarg1);
  public final static native long pqissl_SWIGUpcast(long jarg1);
  public final static native long pqissludp_SWIGUpcast(long jarg1);
  public final static native long p3UpnpMgr_SWIGUpcast(long jarg1);
  public final static native long p3NetMgrIMPL_SWIGUpcast(long jarg1);
  public final static native long p3DhtMgr_SWIGUpcast(long jarg1);
  public final static native long pqistreamer_SWIGUpcast(long jarg1);
  public final static native long AuthGPGOperationLoadOrSave_SWIGUpcast(long jarg1);
  public final static native long AuthGPG_SWIGUpcast(long jarg1);
  public final static native long AuthGPGtest_SWIGUpcast(long jarg1);
  public final static native long pqiQoSstreamer_SWIGUpcast(long jarg1);
  public final static native long pqiconnect_SWIGUpcast(long jarg1);
  public final static native long pqiperson_SWIGUpcast(long jarg1);
  public final static native long pqissllistenbase_SWIGUpcast(long jarg1);
  public final static native long pqissllistener_SWIGUpcast(long jarg1);
  public final static native long pqiloopback_SWIGUpcast(long jarg1);
  public final static native long p3Notify_SWIGUpcast(long jarg1);
  public final static native long pqipersongrp_SWIGUpcast(long jarg1);
  public final static native long pqipersongrpDummy_SWIGUpcast(long jarg1);
  public final static native long pqisslpersongrp_SWIGUpcast(long jarg1);
  public final static native long RsHistoryMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsHistorySerialiser_SWIGUpcast(long jarg1);
  public final static native long p3HistoryMgr_SWIGUpcast(long jarg1);
  public final static native long RsTunnelItem_SWIGUpcast(long jarg1);
  public final static native long RsTunnelDataItem_SWIGUpcast(long jarg1);
  public final static native long RsTunnelHandshakeItem_SWIGUpcast(long jarg1);
  public final static native long RsTunnelSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3tunnel_SWIGUpcast(long jarg1);
  public final static native long pqissltunnel_SWIGUpcast(long jarg1);
  public final static native long AuthSSLtest_SWIGUpcast(long jarg1);
  public final static native long pqiarchive_SWIGUpcast(long jarg1);
  public final static native long RsDummyNetService_SWIGUpcast(long jarg1);
  public final static native long RsDummyMsg_SWIGUpcast(long jarg1);
  public final static native long RsDummyGrp_SWIGUpcast(long jarg1);
  public final static native long RsDummySerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGixsDummy_SWIGUpcast(long jarg1);
  public final static native long GenExchangeTestService_SWIGUpcast(long jarg1);
  public final static native long GxsPublishGroupTest_SWIGUpcast(long jarg1);
  public final static native long GxsMsgRelatedTest_SWIGUpcast(long jarg1);
  public final static native long GxsPublishMsgTest_SWIGUpcast(long jarg1);
  public final static native long NxsMessageTestObserver_SWIGUpcast(long jarg1);
  public final static native long NxsMessageTest_SWIGUpcast(long jarg1);
  public final static native long NxsNetDummyMgr_SWIGUpcast(long jarg1);
  public final static native long NxsTestHub_SWIGUpcast(long jarg1);
  public final static native long p3Peers_SWIGUpcast(long jarg1);
  public final static native long MonitoredRsPeers_SWIGUpcast(long jarg1);
  public final static native long RsPeerOldNetItem_SWIGUpcast(long jarg1);
  public final static native long RsPeerNetItem_SWIGUpcast(long jarg1);
  public final static native long RsPeerServicePermissionItem_SWIGUpcast(long jarg1);
  public final static native long RsPeerGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsPeerStunItem_SWIGUpcast(long jarg1);
  public final static native long RsPeerConfigSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsCacheConfig_SWIGUpcast(long jarg1);
  public final static native long RsCacheConfigSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsFileTransfer_SWIGUpcast(long jarg1);
  public final static native long RsFileConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsFileConfigSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsConfigKeyValueSet_SWIGUpcast(long jarg1);
  public final static native long RsGeneralConfigSerialiser_SWIGUpcast(long jarg1);
  public final static native long ftController_SWIGUpcast(long jarg1);
  public final static native long p3turtle_SWIGUpcast(long jarg1);
  public final static native long MonitoredTurtleRouter_SWIGUpcast(long jarg1);
  public final static native long testConnect_SWIGUpcast(long jarg1);
  public final static native long pqipersongrpTestHarness_SWIGUpcast(long jarg1);
  public final static native long RsForumMsg_SWIGUpcast(long jarg1);
  public final static native long RsForumReadStatus_SWIGUpcast(long jarg1);
  public final static native long RsForumSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3Forums_SWIGUpcast(long jarg1);
  public final static native long forumServiceTest_SWIGUpcast(long jarg1);
  public final static native long RsChatItem_SWIGUpcast(long jarg1);
  public final static native long RsChatMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyEventItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyListRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyListItem_deprecated_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyListItem_deprecated2_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyListItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyUnsubscribeItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyConnectChallengeItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyInviteItem_SWIGUpcast(long jarg1);
  public final static native long RsPrivateChatMsgConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsPrivateChatDistantInviteConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsChatLobbyConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsChatStatusItem_SWIGUpcast(long jarg1);
  public final static native long RsChatAvatarItem_SWIGUpcast(long jarg1);
  public final static native long RsChatSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsMessageItem_SWIGUpcast(long jarg1);
  public final static native long RsMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsMsgTagType_SWIGUpcast(long jarg1);
  public final static native long RsMsgTags_SWIGUpcast(long jarg1);
  public final static native long RsMsgSrcId_SWIGUpcast(long jarg1);
  public final static native long RsPublicMsgInviteConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsMsgParentId_SWIGUpcast(long jarg1);
  public final static native long RsMsgSerialiser_SWIGUpcast(long jarg1);
  public final static native long CompoundExpression_SWIGUpcast(long jarg1);
  public final static native long StringExpression_SWIGUpcast(long jarg1);
  public final static native long NameExpression_SWIGUpcast(long jarg1);
  public final static native long PathExpression_SWIGUpcast(long jarg1);
  public final static native long ExtExpression_SWIGUpcast(long jarg1);
  public final static native long HashExpression_SWIGUpcast(long jarg1);
  public final static native long RsTurtleItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleSearchResultItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleSearchRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleStringSearchRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleRegExpSearchRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleOpenTunnelItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleTunnelOkItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleGenericTunnelItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleGenericDataItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3ChatService_SWIGUpcast(long jarg1);
  public final static native long chatServiceTest_SWIGUpcast(long jarg1);
  public final static native long RsChannelMsg_SWIGUpcast(long jarg1);
  public final static native long RsChannelReadStatus_SWIGUpcast(long jarg1);
  public final static native long RsChannelDestDirConfigItem_SWIGUpcast(long jarg1);
  public final static native long RsChannelSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsBlogMsg_SWIGUpcast(long jarg1);
  public final static native long RsBlogSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsStatusItem_SWIGUpcast(long jarg1);
  public final static native long RsStatusSerialiser_SWIGUpcast(long jarg1);
  public final static native long rsUdpStack_SWIGUpcast(long jarg1);
  public final static native long rsFixedUdpStack_SWIGUpcast(long jarg1);
  public final static native long UdpPeerTest_SWIGUpcast(long jarg1);
  public final static native long ftDataSendPair_SWIGUpcast(long jarg1);
  public final static native long ftDataSendDummy_SWIGUpcast(long jarg1);
  public final static native long ftDataRecvDummy_SWIGUpcast(long jarg1);
  public final static native long P3Hub_SWIGUpcast(long jarg1);
  public final static native long PQIPipe_SWIGUpcast(long jarg1);
  public final static native long P3Pipe_SWIGUpcast(long jarg1);
  public final static native long ftSearchDummy_SWIGUpcast(long jarg1);
  public final static native long RsPosted_SWIGUpcast(long jarg1);
  public final static native long p3GxsCommentService_SWIGUpcast(long jarg1);
  public final static native long p3Posted_SWIGUpcast(long jarg1);
  public final static native long p3MsgService_SWIGUpcast(long jarg1);
  public final static native long p3PhotoService_SWIGUpcast(long jarg1);
  public final static native long p3GxsServiceVEG_SWIGUpcast(long jarg1);
  public final static native long p3GxsDataServiceVEG_SWIGUpcast(long jarg1);
  public final static native long RsPostedVote_SWIGUpcast(long jarg1);
  public final static native long RsPostedComment_SWIGUpcast(long jarg1);
  public final static native long PostedDataProxy_SWIGUpcast(long jarg1);
  public final static native long p3PostedServiceVEG_SWIGUpcast(long jarg1);
  public final static native long RsBwCtrlAllowedItem_SWIGUpcast(long jarg1);
  public final static native long RsBwCtrlSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3BandwidthControl_SWIGUpcast(long jarg1);
  public final static native long RsWire_SWIGUpcast(long jarg1);
  public final static native long p3Wire_SWIGUpcast(long jarg1);
  public final static native long SSGxsIdPgp_SWIGUpcast(long jarg1);
  public final static native long SSGxsIdScore_SWIGUpcast(long jarg1);
  public final static native long SSGxsIdCumulator_SWIGUpcast(long jarg1);
  public final static native long SSGxsIdGroup_SWIGUpcast(long jarg1);
  public final static native long p3IdService_SWIGUpcast(long jarg1);
  public final static native long RsTlvDsdvEndPoint_SWIGUpcast(long jarg1);
  public final static native long RsTlvDsdvEntry_SWIGUpcast(long jarg1);
  public final static native long RsTlvDsdvEntrySet_SWIGUpcast(long jarg1);
  public final static native long RsDsdvRouteItem_SWIGUpcast(long jarg1);
  public final static native long RsDsdvDataItem_SWIGUpcast(long jarg1);
  public final static native long RsDsdvSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3Dsdv_SWIGUpcast(long jarg1);
  public final static native long RsGameItem_SWIGUpcast(long jarg1);
  public final static native long RsGameSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3GameLauncher_SWIGUpcast(long jarg1);
  public final static native long p3StatusService_SWIGUpcast(long jarg1);
  public final static native long p3Blogs_SWIGUpcast(long jarg1);
  public final static native long RsGxsForums_SWIGUpcast(long jarg1);
  public final static native long p3GxsForums_SWIGUpcast(long jarg1);
  public final static native long RsDiscItem_SWIGUpcast(long jarg1);
  public final static native long RsDiscReply_SWIGUpcast(long jarg1);
  public final static native long RsDiscAskInfo_SWIGUpcast(long jarg1);
  public final static native long RsDiscVersion_SWIGUpcast(long jarg1);
  public final static native long RsDiscHeartbeat_SWIGUpcast(long jarg1);
  public final static native long RsDiscSerialiser_SWIGUpcast(long jarg1);
  public final static native long autoneighbour_SWIGUpcast(long jarg1);
  public final static native long p3disc_SWIGUpcast(long jarg1);
  public final static native long RsGxsChannels_SWIGUpcast(long jarg1);
  public final static native long p3GxsChannels_SWIGUpcast(long jarg1);
  public final static native long RsWiki_SWIGUpcast(long jarg1);
  public final static native long p3Wiki_SWIGUpcast(long jarg1);
  public final static native long p3GxsCircles_SWIGUpcast(long jarg1);
  public final static native long RsTlvBanListEntry_SWIGUpcast(long jarg1);
  public final static native long RsTlvBanList_SWIGUpcast(long jarg1);
  public final static native long RsBanListItem_SWIGUpcast(long jarg1);
  public final static native long RsBanListSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3BanList_SWIGUpcast(long jarg1);
  public final static native long p3Channels_SWIGUpcast(long jarg1);
  public final static native long CacheTestSource_SWIGUpcast(long jarg1);
  public final static native long CacheTestStore_SWIGUpcast(long jarg1);
  public final static native long CacheTestMultiSource_SWIGUpcast(long jarg1);
  public final static native long CacheTestMultiStore_SWIGUpcast(long jarg1);
  public final static native long FileEntry_SWIGUpcast(long jarg1);
  public final static native long DirEntry_SWIGUpcast(long jarg1);
  public final static native long PersonEntry_SWIGUpcast(long jarg1);
  public final static native long FileIndexMonitor_SWIGUpcast(long jarg1);
  public final static native long FileIndexStore_SWIGUpcast(long jarg1);
  public final static native long RsGxsWikiCollectionItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsWikiSnapshotItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsWikiCommentItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsWikiSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsCircleGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsCircleMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsCircleSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeyValueWide_SWIGUpcast(long jarg1);
  public final static native long RsTlvKeyValueWideSet_SWIGUpcast(long jarg1);
  public final static native long RsGxsForumGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsForumMsgItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsForumSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsIdGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsIdOpinionItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsIdCommentItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsIdSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsCommentItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsVoteItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsCommentSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsWireGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsWirePulseItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsWireSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsPhotoAlbumItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsPhotoPhotoItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsPhotoCommentItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsPhotoSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsPostedGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsPostedPostItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsPostedSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsGxsChannelGroupItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsChannelPostItem_SWIGUpcast(long jarg1);
  public final static native long RsGxsChannelSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsPluginItem_SWIGUpcast(long jarg1);
  public final static native long RsPluginSerialiser_SWIGUpcast(long jarg1);
  public final static native long RsPluginHashSetItem_SWIGUpcast(long jarg1);
  public final static native long RsGRouterItem_SWIGUpcast(long jarg1);
  public final static native long RsGRouterPublishKeyItem_SWIGUpcast(long jarg1);
  public final static native long RsGRouterGenericDataItem_SWIGUpcast(long jarg1);
  public final static native long RsGRouterACKItem_SWIGUpcast(long jarg1);
  public final static native long RsGRouterSerialiser_SWIGUpcast(long jarg1);
  public final static native long p3GRouter_SWIGUpcast(long jarg1);
  public final static native long p3History_SWIGUpcast(long jarg1);
  public final static native long p3ServerConfig_SWIGUpcast(long jarg1);
  public final static native long p3Photo_SWIGUpcast(long jarg1);
  public final static native long p3Discovery_SWIGUpcast(long jarg1);
  public final static native long ftServer_SWIGUpcast(long jarg1);
  public final static native long RsServer_SWIGUpcast(long jarg1);
  public final static native long p3Status_SWIGUpcast(long jarg1);
  public final static native long p3Msgs_SWIGUpcast(long jarg1);
  public final static native long TurtleTrafficStatisticsInfoOp_SWIGUpcast(long jarg1);
  public final static native long upnphandler_SWIGUpcast(long jarg1);
  public final static native long CUPnPRootDevice_SWIGUpcast(long jarg1);
  public final static native long TcpStream_SWIGUpcast(long jarg1);
  public final static native long stunAddrAssist_SWIGUpcast(long jarg1);
  public final static native long p3BitDht_SWIGUpcast(long jarg1);
  public final static native long ftFiStore_SWIGUpcast(long jarg1);
  public final static native long ftFiMonitor_SWIGUpcast(long jarg1);
  public final static native long ftCacheStrapper_SWIGUpcast(long jarg1);
  public final static native long ftDataMultiplex_SWIGUpcast(long jarg1);
  public final static native long ftFileCreator_SWIGUpcast(long jarg1);
  public final static native long ftExtraList_SWIGUpcast(long jarg1);
  public final static native long ftFileSearch_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileDataItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileMapRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileMapItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileCrcRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleChunkCrcRequestItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleFileCrcItem_SWIGUpcast(long jarg1);
  public final static native long RsTurtleChunkCrcItem_SWIGUpcast(long jarg1);
  public final static native long RsPluginManager_SWIGUpcast(long jarg1);
  public final static native long RsCacheService_SWIGUpcast(long jarg1);
  public final static native long RsPQIService_SWIGUpcast(long jarg1);
}
