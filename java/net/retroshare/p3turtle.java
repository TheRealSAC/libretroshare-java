/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class p3turtle extends p3Service {
  private long swigCPtr;

  protected p3turtle(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.p3turtle_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(p3turtle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_p3turtle(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public p3turtle(p3LinkMgr lm) {
    this(RetroshareJNI.new_p3turtle(p3LinkMgr.getCPtr(lm), lm), true);
  }

  public void setEnabled(boolean arg0) {
    RetroshareJNI.p3turtle_setEnabled(swigCPtr, this, arg0);
  }

  public boolean enabled() {
    return RetroshareJNI.p3turtle_enabled(swigCPtr, this);
  }

  public void setSessionEnabled(boolean arg0) {
    RetroshareJNI.p3turtle_setSessionEnabled(swigCPtr, this, arg0);
  }

  public boolean sessionEnabled() {
    return RetroshareJNI.p3turtle_sessionEnabled(swigCPtr, this);
  }

  public long turtleSearch(SWIGTYPE_p_std__string string_to_match) {
    return RetroshareJNI.p3turtle_turtleSearch__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(string_to_match));
  }

  public long turtleSearch(LinearizedExpression expr) {
    return RetroshareJNI.p3turtle_turtleSearch__SWIG_1(swigCPtr, this, LinearizedExpression.getCPtr(expr), expr);
  }

  public void monitorTunnels(SWIGTYPE_p_std__string file_hash, RsTurtleClientService client_service) {
    RetroshareJNI.p3turtle_monitorTunnels(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(file_hash), RsTurtleClientService.getCPtr(client_service), client_service);
  }

  public void stopMonitoringTunnels(SWIGTYPE_p_std__string file_hash) {
    RetroshareJNI.p3turtle_stopMonitoringTunnels(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(file_hash));
  }

  public void registerTunnelService(RsTurtleClientService service) {
    RetroshareJNI.p3turtle_registerTunnelService(swigCPtr, this, RsTurtleClientService.getCPtr(service), service);
  }

  public void getInfo(SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t arg0, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t arg1, SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t arg2, SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t arg3) {
    RetroshareJNI.p3turtle_getInfo(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t.getCPtr(arg0), SWIGTYPE_p_std__vectorT_std__vectorT_std__string_t_t.getCPtr(arg1), SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t.getCPtr(arg2), SWIGTYPE_p_std__vectorT_TurtleRequestDisplayInfo_t.getCPtr(arg3));
  }

  public void getTrafficStatistics(TurtleTrafficStatisticsInfo info) {
    RetroshareJNI.p3turtle_getTrafficStatistics(swigCPtr, this, TurtleTrafficStatisticsInfo.getCPtr(info), info);
  }

  public int tick() {
    return RetroshareJNI.p3turtle_tick(swigCPtr, this);
  }

  public RsSerialiser setupSerialiser() {
    long cPtr = RetroshareJNI.p3turtle_setupSerialiser(swigCPtr, this);
    return (cPtr == 0) ? null : new RsSerialiser(cPtr, false);
  }

  public boolean saveList(SWIGTYPE_p_bool cleanup, SWIGTYPE_p_std__listT_RsItem_p_t arg1) {
    return RetroshareJNI.p3turtle_saveList(swigCPtr, this, SWIGTYPE_p_bool.getCPtr(cleanup), SWIGTYPE_p_std__listT_RsItem_p_t.getCPtr(arg1));
  }

  public boolean loadList(SWIGTYPE_p_std__listT_RsItem_p_t arg0) {
    return RetroshareJNI.p3turtle_loadList(swigCPtr, this, SWIGTYPE_p_std__listT_RsItem_p_t.getCPtr(arg0));
  }

  public boolean isTurtlePeer(SWIGTYPE_p_std__string peer_id) {
    return RetroshareJNI.p3turtle_isTurtlePeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public void setMaxTRForwardRate(int max_tr_up_rate) {
    RetroshareJNI.p3turtle_setMaxTRForwardRate(swigCPtr, this, max_tr_up_rate);
  }

  public int getMaxTRForwardRate() {
    return RetroshareJNI.p3turtle_getMaxTRForwardRate(swigCPtr, this);
  }

  public boolean isOnline(SWIGTYPE_p_std__string peer_id) {
    return RetroshareJNI.p3turtle_isOnline(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public SWIGTYPE_p_std__string getTurtlePeerId(long tid) {
    return new SWIGTYPE_p_std__string(RetroshareJNI.p3turtle_getTurtlePeerId(swigCPtr, this, tid), true);
  }

  public void getSourceVirtualPeersList(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__listT_pqipeer_t list) {
    RetroshareJNI.p3turtle_getSourceVirtualPeersList(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__listT_pqipeer_t.getCPtr(list));
  }

  public void sendTurtleData(SWIGTYPE_p_std__string virtual_peer_id, RsTurtleGenericTunnelItem item) {
    RetroshareJNI.p3turtle_sendTurtleData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(virtual_peer_id), RsTurtleGenericTunnelItem.getCPtr(item), item);
  }

}
