/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftFileCreator extends ftFileProvider {
  private long swigCPtr;

  protected ftFileCreator(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.ftFileCreator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftFileCreator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftFileCreator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ftFileCreator(SWIGTYPE_p_std__string savepath, java.math.BigInteger size, SWIGTYPE_p_std__string hash, boolean assume_availability) {
    this(RetroshareJNI.new_ftFileCreator(SWIGTYPE_p_std__string.getCPtr(savepath), size, SWIGTYPE_p_std__string.getCPtr(hash), assume_availability), true);
  }

  public boolean getFileData(SWIGTYPE_p_std__string peer_id, java.math.BigInteger offset, SWIGTYPE_p_unsigned_int chunk_size, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftFileCreator_getFileData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), offset, SWIGTYPE_p_unsigned_int.getCPtr(chunk_size), SWIGTYPE_p_void.getCPtr(data));
  }

  public boolean finished() {
    return RetroshareJNI.ftFileCreator_finished(swigCPtr, this);
  }

  public java.math.BigInteger getRecvd() {
    return RetroshareJNI.ftFileCreator_getRecvd(swigCPtr, this);
  }

  public void closeFile() {
    RetroshareJNI.ftFileCreator_closeFile(swigCPtr, this);
  }

  public void getChunkMap(FileChunksInfo info) {
    RetroshareJNI.ftFileCreator_getChunkMap(swigCPtr, this, FileChunksInfo.getCPtr(info), info);
  }

  public void setChunkStrategy(FileChunksInfo.ChunkStrategy s) {
    RetroshareJNI.ftFileCreator_setChunkStrategy(swigCPtr, this, s.swigValue());
  }

  public FileChunksInfo.ChunkStrategy getChunkStrategy() {
    return FileChunksInfo.ChunkStrategy.swigToEnum(RetroshareJNI.ftFileCreator_getChunkStrategy(swigCPtr, this));
  }

  public boolean hashReceivedData(SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftFileCreator_hashReceivedData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean crossCheckChunkMap(SWIGTYPE_p_t_CRCMapT_unsigned_int_t ref, SWIGTYPE_p_unsigned_int bad_chunks, SWIGTYPE_p_unsigned_int incomplete_chunks) {
    return RetroshareJNI.ftFileCreator_crossCheckChunkMap(swigCPtr, this, SWIGTYPE_p_t_CRCMapT_unsigned_int_t.getCPtr(ref), SWIGTYPE_p_unsigned_int.getCPtr(bad_chunks), SWIGTYPE_p_unsigned_int.getCPtr(incomplete_chunks));
  }

  public void forceCheck() {
    RetroshareJNI.ftFileCreator_forceCheck(swigCPtr, this);
  }

  public boolean verifyChunk(long arg0, Sha1CheckSum arg1) {
    return RetroshareJNI.ftFileCreator_verifyChunk(swigCPtr, this, arg0, Sha1CheckSum.getCPtr(arg1), arg1);
  }

  public void getChunksToCheck(SWIGTYPE_p_std__vectorT_unsigned_int_t chunks_to_ask) {
    RetroshareJNI.ftFileCreator_getChunksToCheck(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(chunks_to_ask));
  }

  public boolean getMissingChunk(SWIGTYPE_p_std__string peer_id, long size_hint, SWIGTYPE_p_unsigned_long_long offset, SWIGTYPE_p_unsigned_int size, SWIGTYPE_p_bool is_chunk_map_too_old) {
    return RetroshareJNI.ftFileCreator_getMissingChunk(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), size_hint, SWIGTYPE_p_unsigned_long_long.getCPtr(offset), SWIGTYPE_p_unsigned_int.getCPtr(size), SWIGTYPE_p_bool.getCPtr(is_chunk_map_too_old));
  }

  public void removeInactiveChunks() {
    RetroshareJNI.ftFileCreator_removeInactiveChunks(swigCPtr, this);
  }

  public void removeFileSource(SWIGTYPE_p_std__string peer_id) {
    RetroshareJNI.ftFileCreator_removeFileSource(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public void getSourcesList(long chunk_number, SWIGTYPE_p_std__vectorT_std__string_t sources) {
    RetroshareJNI.ftFileCreator_getSourcesList(swigCPtr, this, chunk_number, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(sources));
  }

  public SWIGTYPE_p_time_t lastRecvTimeStamp() {
    return new SWIGTYPE_p_time_t(RetroshareJNI.ftFileCreator_lastRecvTimeStamp(swigCPtr, this), true);
  }

  public void resetRecvTimeStamp() {
    RetroshareJNI.ftFileCreator_resetRecvTimeStamp(swigCPtr, this);
  }

  public SWIGTYPE_p_time_t creationTimeStamp() {
    return new SWIGTYPE_p_time_t(RetroshareJNI.ftFileCreator_creationTimeStamp(swigCPtr, this), true);
  }

  public boolean addFileData(java.math.BigInteger offset, long chunk_size, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftFileCreator_addFileData(swigCPtr, this, offset, chunk_size, SWIGTYPE_p_void.getCPtr(data));
  }

  public void getAvailabilityMap(CompressedChunkMap cmap) {
    RetroshareJNI.ftFileCreator_getAvailabilityMap(swigCPtr, this, CompressedChunkMap.getCPtr(cmap), cmap);
  }

  public void setAvailabilityMap(CompressedChunkMap cmap) {
    RetroshareJNI.ftFileCreator_setAvailabilityMap(swigCPtr, this, CompressedChunkMap.getCPtr(cmap), cmap);
  }

  public void setSourceMap(SWIGTYPE_p_std__string peer_id, CompressedChunkMap map) {
    RetroshareJNI.ftFileCreator_setSourceMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), CompressedChunkMap.getCPtr(map), map);
  }

  public boolean sourceIsComplete(SWIGTYPE_p_std__string peer_id) {
    return RetroshareJNI.ftFileCreator_sourceIsComplete(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

}
