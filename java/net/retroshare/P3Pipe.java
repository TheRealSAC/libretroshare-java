/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class P3Pipe extends P3Interface {
  private long swigCPtr;

  protected P3Pipe(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.P3Pipe_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(P3Pipe obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_P3Pipe(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public P3Pipe() {
    this(RetroshareJNI.new_P3Pipe(), true);
  }

  public int tick() {
    return RetroshareJNI.P3Pipe_tick(swigCPtr, this);
  }

  public int status() {
    return RetroshareJNI.P3Pipe_status(swigCPtr, this);
  }

  public RsCacheRequest RequestedSearch() {
    long cPtr = RetroshareJNI.P3Pipe_RequestedSearch(swigCPtr, this);
    return (cPtr == 0) ? null : new RsCacheRequest(cPtr, false);
  }

  public RsCacheItem GetSearchResult() {
    long cPtr = RetroshareJNI.P3Pipe_GetSearchResult(swigCPtr, this);
    return (cPtr == 0) ? null : new RsCacheItem(cPtr, false);
  }

  public RsFileRequest GetFileRequest() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileRequest(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileRequest(cPtr, false);
  }

  public RsFileData GetFileData() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileData(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileData(cPtr, false);
  }

  public RsRawItem GetRsRawItem() {
    long cPtr = RetroshareJNI.P3Pipe_GetRsRawItem(swigCPtr, this);
    return (cPtr == 0) ? null : new RsRawItem(cPtr, false);
  }

  public RsFileChunkMapRequest GetFileChunkMapRequest() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileChunkMapRequest(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileChunkMapRequest(cPtr, false);
  }

  public RsFileChunkMap GetFileChunkMap() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileChunkMap(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileChunkMap(cPtr, false);
  }

  public RsFileCRC32MapRequest GetFileCRC32MapRequest() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileCRC32MapRequest(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileCRC32MapRequest(cPtr, false);
  }

  public RsFileCRC32Map GetFileCRC32Map() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileCRC32Map(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileCRC32Map(cPtr, false);
  }

  public RsFileSingleChunkCrcRequest GetFileSingleChunkCrcRequest() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileSingleChunkCrcRequest(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileSingleChunkCrcRequest(cPtr, false);
  }

  public RsFileSingleChunkCrc GetFileSingleChunkCrc() {
    long cPtr = RetroshareJNI.P3Pipe_GetFileSingleChunkCrc(swigCPtr, this);
    return (cPtr == 0) ? null : new RsFileSingleChunkCrc(cPtr, false);
  }

  public int SearchSpecific(RsCacheRequest item) {
    return RetroshareJNI.P3Pipe_SearchSpecific(swigCPtr, this, RsCacheRequest.getCPtr(item), item);
  }

  public int SendSearchResult(RsCacheItem item) {
    return RetroshareJNI.P3Pipe_SendSearchResult(swigCPtr, this, RsCacheItem.getCPtr(item), item);
  }

  public int SendFileRequest(RsFileRequest item) {
    return RetroshareJNI.P3Pipe_SendFileRequest(swigCPtr, this, RsFileRequest.getCPtr(item), item);
  }

  public int SendFileData(RsFileData item) {
    return RetroshareJNI.P3Pipe_SendFileData(swigCPtr, this, RsFileData.getCPtr(item), item);
  }

  public int SendRsRawItem(RsRawItem item) {
    return RetroshareJNI.P3Pipe_SendRsRawItem(swigCPtr, this, RsRawItem.getCPtr(item), item);
  }

  public int SendFileChunkMapRequest(RsFileChunkMapRequest item) {
    return RetroshareJNI.P3Pipe_SendFileChunkMapRequest(swigCPtr, this, RsFileChunkMapRequest.getCPtr(item), item);
  }

  public int SendFileChunkMap(RsFileChunkMap item) {
    return RetroshareJNI.P3Pipe_SendFileChunkMap(swigCPtr, this, RsFileChunkMap.getCPtr(item), item);
  }

  public int SendFileCRC32MapRequest(RsFileCRC32MapRequest item) {
    return RetroshareJNI.P3Pipe_SendFileCRC32MapRequest(swigCPtr, this, RsFileCRC32MapRequest.getCPtr(item), item);
  }

  public int SendFileCRC32Map(RsFileCRC32Map item) {
    return RetroshareJNI.P3Pipe_SendFileCRC32Map(swigCPtr, this, RsFileCRC32Map.getCPtr(item), item);
  }

  public int SendFileSingleChunkCrcRequest(RsFileSingleChunkCrcRequest item) {
    return RetroshareJNI.P3Pipe_SendFileSingleChunkCrcRequest(swigCPtr, this, RsFileSingleChunkCrcRequest.getCPtr(item), item);
  }

  public int SendFileSingleChunkCrc(RsFileSingleChunkCrc item) {
    return RetroshareJNI.P3Pipe_SendFileSingleChunkCrc(swigCPtr, this, RsFileSingleChunkCrc.getCPtr(item), item);
  }

  public RsItem PopSentItem() {
    long cPtr = RetroshareJNI.P3Pipe_PopSentItem(swigCPtr, this);
    return (cPtr == 0) ? null : new RsItem(cPtr, false);
  }

  public int PushRecvdItem(RsItem item) {
    return RetroshareJNI.P3Pipe_PushRecvdItem(swigCPtr, this, RsItem.getCPtr(item), item);
  }

}
