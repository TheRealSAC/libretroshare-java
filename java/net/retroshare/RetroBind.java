/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RetroBind {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RetroBind(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RetroBind obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_RetroBind(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public boolean bind(SWIGTYPE_p_sqlite3_stmt stm) {
    return RetroshareJNI.RetroBind_bind(swigCPtr, this, SWIGTYPE_p_sqlite3_stmt.getCPtr(stm));
  }

  public RetroBind.BindType getType() {
    return RetroBind.BindType.swigToEnum(RetroshareJNI.RetroBind_getType(swigCPtr, this));
  }

  public int getIndex() {
    return RetroshareJNI.RetroBind_getIndex(swigCPtr, this);
  }

  public final static class BindType {
    public final static RetroBind.BindType BLOB = new RetroBind.BindType("BLOB", RetroshareJNI.RetroBind_BLOB_get());
    public final static RetroBind.BindType STRING = new RetroBind.BindType("STRING");
    public final static RetroBind.BindType INT32 = new RetroBind.BindType("INT32");
    public final static RetroBind.BindType INT64 = new RetroBind.BindType("INT64");
    public final static RetroBind.BindType DOUBLE = new RetroBind.BindType("DOUBLE");
    public final static RetroBind.BindType BOOL = new RetroBind.BindType("BOOL");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static BindType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + BindType.class + " with value " + swigValue);
    }

    private BindType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private BindType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private BindType(String swigName, BindType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static BindType[] swigValues = { BLOB, STRING, INT32, INT64, DOUBLE, BOOL };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
