/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class PGPHandler {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PGPHandler(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PGPHandler obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_PGPHandler(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public PGPHandler(SWIGTYPE_p_std__string path_to_public_keyring, SWIGTYPE_p_std__string path_to_secret_keyring, SWIGTYPE_p_std__string path_to_trust_database, SWIGTYPE_p_std__string pgp_lock_file) {
    this(RetroshareJNI.new_PGPHandler(SWIGTYPE_p_std__string.getCPtr(path_to_public_keyring), SWIGTYPE_p_std__string.getCPtr(path_to_secret_keyring), SWIGTYPE_p_std__string.getCPtr(path_to_trust_database), SWIGTYPE_p_std__string.getCPtr(pgp_lock_file)), true);
  }

  public boolean getGPGFilteredList(SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t list, SWIGTYPE_p_f_r_q_const__PGPCertificateInfo__bool filter) {
    return RetroshareJNI.PGPHandler_getGPGFilteredList__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t.getCPtr(list), SWIGTYPE_p_f_r_q_const__PGPCertificateInfo__bool.getCPtr(filter));
  }

  public boolean getGPGFilteredList(SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t list) {
    return RetroshareJNI.PGPHandler_getGPGFilteredList__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t.getCPtr(list));
  }

  public boolean haveSecretKey(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id) {
    return RetroshareJNI.PGPHandler_haveSecretKey(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id));
  }

  public boolean importGPGKeyPair(SWIGTYPE_p_std__string filename, SWIGTYPE_p_t_RsGenericIdTypeT_8_t imported_id, SWIGTYPE_p_std__string import_error) {
    return RetroshareJNI.PGPHandler_importGPGKeyPair(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(filename), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(imported_id), SWIGTYPE_p_std__string.getCPtr(import_error));
  }

  public boolean exportGPGKeyPair(SWIGTYPE_p_std__string filename, SWIGTYPE_p_t_RsGenericIdTypeT_8_t exported_id) {
    return RetroshareJNI.PGPHandler_exportGPGKeyPair(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(filename), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(exported_id));
  }

  public boolean availableGPGCertificatesWithPrivateKeys(SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t ids) {
    return RetroshareJNI.PGPHandler_availableGPGCertificatesWithPrivateKeys(swigCPtr, this, SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t.getCPtr(ids));
  }

  public boolean GeneratePGPCertificate(SWIGTYPE_p_std__string name, SWIGTYPE_p_std__string email, SWIGTYPE_p_std__string passwd, SWIGTYPE_p_t_RsGenericIdTypeT_8_t pgpId, SWIGTYPE_p_std__string errString) {
    return RetroshareJNI.PGPHandler_GeneratePGPCertificate(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_std__string.getCPtr(email), SWIGTYPE_p_std__string.getCPtr(passwd), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(pgpId), SWIGTYPE_p_std__string.getCPtr(errString));
  }

  public boolean LoadCertificateFromString(SWIGTYPE_p_std__string pem, SWIGTYPE_p_t_RsGenericIdTypeT_8_t gpg_id, SWIGTYPE_p_std__string error_string) {
    return RetroshareJNI.PGPHandler_LoadCertificateFromString(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pem), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(gpg_id), SWIGTYPE_p_std__string.getCPtr(error_string));
  }

  public SWIGTYPE_p_std__string SaveCertificateToString(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, boolean include_signatures) {
    return new SWIGTYPE_p_std__string(RetroshareJNI.PGPHandler_SaveCertificateToString(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), include_signatures), true);
  }

  public boolean exportPublicKey(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, SWIGTYPE_p_p_unsigned_char mem, SWIGTYPE_p_size_t mem_size, boolean armoured, boolean include_signatures) {
    return RetroshareJNI.PGPHandler_exportPublicKey(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), SWIGTYPE_p_p_unsigned_char.getCPtr(mem), SWIGTYPE_p_size_t.getCPtr(mem_size), armoured, include_signatures);
  }

  public boolean SignDataBin(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, SWIGTYPE_p_void data, long len, SWIGTYPE_p_unsigned_char sign, SWIGTYPE_p_unsigned_int signlen, boolean make_raw_signature) {
    return RetroshareJNI.PGPHandler_SignDataBin__SWIG_0(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), SWIGTYPE_p_void.getCPtr(data), len, SWIGTYPE_p_unsigned_char.getCPtr(sign), SWIGTYPE_p_unsigned_int.getCPtr(signlen), make_raw_signature);
  }

  public boolean SignDataBin(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, SWIGTYPE_p_void data, long len, SWIGTYPE_p_unsigned_char sign, SWIGTYPE_p_unsigned_int signlen) {
    return RetroshareJNI.PGPHandler_SignDataBin__SWIG_1(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), SWIGTYPE_p_void.getCPtr(data), len, SWIGTYPE_p_unsigned_char.getCPtr(sign), SWIGTYPE_p_unsigned_int.getCPtr(signlen));
  }

  public boolean VerifySignBin(SWIGTYPE_p_void data, long data_len, SWIGTYPE_p_unsigned_char sign, long sign_len, SWIGTYPE_p_t_RsGenericIdTypeT_20_t withfingerprint) {
    return RetroshareJNI.PGPHandler_VerifySignBin(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data), data_len, SWIGTYPE_p_unsigned_char.getCPtr(sign), sign_len, SWIGTYPE_p_t_RsGenericIdTypeT_20_t.getCPtr(withfingerprint));
  }

  public boolean privateSignCertificate(SWIGTYPE_p_t_RsGenericIdTypeT_8_t own_id, SWIGTYPE_p_t_RsGenericIdTypeT_8_t id_of_key_to_sign) {
    return RetroshareJNI.PGPHandler_privateSignCertificate(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(own_id), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id_of_key_to_sign));
  }

  public boolean encryptDataBin(SWIGTYPE_p_t_RsGenericIdTypeT_8_t key_id, SWIGTYPE_p_void data, long len, SWIGTYPE_p_unsigned_char encrypted_data, SWIGTYPE_p_unsigned_int encrypted_data_len) {
    return RetroshareJNI.PGPHandler_encryptDataBin(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(key_id), SWIGTYPE_p_void.getCPtr(data), len, SWIGTYPE_p_unsigned_char.getCPtr(encrypted_data), SWIGTYPE_p_unsigned_int.getCPtr(encrypted_data_len));
  }

  public boolean decryptDataBin(SWIGTYPE_p_t_RsGenericIdTypeT_8_t key_id, SWIGTYPE_p_void data, long len, SWIGTYPE_p_unsigned_char decrypted_data, SWIGTYPE_p_unsigned_int decrypted_data_len) {
    return RetroshareJNI.PGPHandler_decryptDataBin(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(key_id), SWIGTYPE_p_void.getCPtr(data), len, SWIGTYPE_p_unsigned_char.getCPtr(decrypted_data), SWIGTYPE_p_unsigned_int.getCPtr(decrypted_data_len));
  }

  public boolean encryptTextToFile(SWIGTYPE_p_t_RsGenericIdTypeT_8_t key_id, SWIGTYPE_p_std__string text, SWIGTYPE_p_std__string outfile) {
    return RetroshareJNI.PGPHandler_encryptTextToFile(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(key_id), SWIGTYPE_p_std__string.getCPtr(text), SWIGTYPE_p_std__string.getCPtr(outfile));
  }

  public boolean decryptTextFromFile(SWIGTYPE_p_t_RsGenericIdTypeT_8_t key_id, SWIGTYPE_p_std__string text, SWIGTYPE_p_std__string encrypted_inputfile) {
    return RetroshareJNI.PGPHandler_decryptTextFromFile(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(key_id), SWIGTYPE_p_std__string.getCPtr(text), SWIGTYPE_p_std__string.getCPtr(encrypted_inputfile));
  }

  public boolean getKeyFingerprint(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, SWIGTYPE_p_t_RsGenericIdTypeT_20_t fp) {
    return RetroshareJNI.PGPHandler_getKeyFingerprint(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), SWIGTYPE_p_t_RsGenericIdTypeT_20_t.getCPtr(fp));
  }

  public void setAcceptConnexion(SWIGTYPE_p_t_RsGenericIdTypeT_8_t arg0, boolean arg1) {
    RetroshareJNI.PGPHandler_setAcceptConnexion(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(arg0), arg1);
  }

  public void updateOwnSignatureFlag(SWIGTYPE_p_t_RsGenericIdTypeT_8_t ownId) {
    RetroshareJNI.PGPHandler_updateOwnSignatureFlag__SWIG_0(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(ownId));
  }

  public void updateOwnSignatureFlag(SWIGTYPE_p_t_RsGenericIdTypeT_8_t pgp_id, SWIGTYPE_p_t_RsGenericIdTypeT_8_t ownId) {
    RetroshareJNI.PGPHandler_updateOwnSignatureFlag__SWIG_1(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(pgp_id), SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(ownId));
  }

  public void locked_updateOwnSignatureFlag(PGPCertificateInfo arg0, SWIGTYPE_p_std__string arg1, PGPCertificateInfo arg2, SWIGTYPE_p_std__string arg3) {
    RetroshareJNI.PGPHandler_locked_updateOwnSignatureFlag(swigCPtr, this, PGPCertificateInfo.getCPtr(arg0), arg0, SWIGTYPE_p_std__string.getCPtr(arg1), PGPCertificateInfo.getCPtr(arg2), arg2, SWIGTYPE_p_std__string.getCPtr(arg3));
  }

  public boolean removeKeysFromPGPKeyring(SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t key_ids, SWIGTYPE_p_std__string backup_file, SWIGTYPE_p_unsigned_int error_code) {
    return RetroshareJNI.PGPHandler_removeKeysFromPGPKeyring(swigCPtr, this, SWIGTYPE_p_std__listT_t_RsGenericIdTypeT_8_t_t.getCPtr(key_ids), SWIGTYPE_p_std__string.getCPtr(backup_file), SWIGTYPE_p_unsigned_int.getCPtr(error_code));
  }

  public boolean privateTrustCertificate(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id, int valid_level) {
    return RetroshareJNI.PGPHandler_privateTrustCertificate(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id), valid_level);
  }

  public PGPCertificateInfo getCertificateInfo(SWIGTYPE_p_t_RsGenericIdTypeT_8_t id) {
    long cPtr = RetroshareJNI.PGPHandler_getCertificateInfo(swigCPtr, this, SWIGTYPE_p_t_RsGenericIdTypeT_8_t.getCPtr(id));
    return (cPtr == 0) ? null : new PGPCertificateInfo(cPtr, false);
  }

  public boolean isGPGId(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.PGPHandler_isGPGId(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public boolean isGPGSigned(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.PGPHandler_isGPGSigned(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public boolean isGPGAccepted(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.PGPHandler_isGPGAccepted(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public static void setPassphraseCallback(SWIGTYPE_p_f_p_void_p_q_const__char_p_q_const__char_int__std__string cb) {
    RetroshareJNI.PGPHandler_setPassphraseCallback(SWIGTYPE_p_f_p_void_p_q_const__char_p_q_const__char_int__std__string.getCPtr(cb));
  }

  public static SWIGTYPE_p_f_p_void_p_q_const__char_p_q_const__char_int__std__string passphraseCallback() {
    long cPtr = RetroshareJNI.PGPHandler_passphraseCallback();
    return (cPtr == 0) ? null : new SWIGTYPE_p_f_p_void_p_q_const__char_p_q_const__char_int__std__string(cPtr, false);
  }

  public boolean getGPGDetailsFromBinaryBlock(SWIGTYPE_p_unsigned_char mem, long mem_size, SWIGTYPE_p_std__string key_id, SWIGTYPE_p_std__string name, SWIGTYPE_p_std__listT_std__string_t signers) {
    return RetroshareJNI.PGPHandler_getGPGDetailsFromBinaryBlock(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(mem), mem_size, SWIGTYPE_p_std__string.getCPtr(key_id), SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_std__listT_std__string_t.getCPtr(signers));
  }

  public boolean printKeys() {
    return RetroshareJNI.PGPHandler_printKeys(swigCPtr, this);
  }

  public boolean syncDatabase() {
    return RetroshareJNI.PGPHandler_syncDatabase(swigCPtr, this);
  }

}
