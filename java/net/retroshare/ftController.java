/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftController extends CacheTransfer {
  private long swigCPtr;

  protected ftController(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.ftController_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftController obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftController(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ftController(CacheStrapper cs, ftDataMultiplex dm, SWIGTYPE_p_std__string configDir) {
    this(RetroshareJNI.new_ftController(CacheStrapper.getCPtr(cs), cs, ftDataMultiplex.getCPtr(dm), dm, SWIGTYPE_p_std__string.getCPtr(configDir)), true);
  }

  public void setFtSearchNExtra(ftSearch arg0, ftExtraList arg1) {
    RetroshareJNI.ftController_setFtSearchNExtra(swigCPtr, this, ftSearch.getCPtr(arg0), arg0, ftExtraList.getCPtr(arg1), arg1);
  }

  public void setTurtleRouter(p3turtle arg0) {
    RetroshareJNI.ftController_setTurtleRouter(swigCPtr, this, p3turtle.getCPtr(arg0), arg0);
  }

  public void setFtServer(ftServer arg0) {
    RetroshareJNI.ftController_setFtServer(swigCPtr, this, ftServer.getCPtr(arg0), arg0);
  }

  public boolean activate() {
    return RetroshareJNI.ftController_activate(swigCPtr, this);
  }

  public boolean isActiveAndNoPending() {
    return RetroshareJNI.ftController_isActiveAndNoPending(swigCPtr, this);
  }

  public void run() {
    RetroshareJNI.ftController_run(swigCPtr, this);
  }

  public boolean FileRequest(SWIGTYPE_p_std__string fname, SWIGTYPE_p_std__string hash, java.math.BigInteger size, SWIGTYPE_p_std__string dest, SWIGTYPE_p_t_RsFlags32T_0x4228af_t flags, SWIGTYPE_p_std__listT_std__string_t sourceIds, int state) {
    return RetroshareJNI.ftController_FileRequest__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(fname), SWIGTYPE_p_std__string.getCPtr(hash), size, SWIGTYPE_p_std__string.getCPtr(dest), SWIGTYPE_p_t_RsFlags32T_0x4228af_t.getCPtr(flags), SWIGTYPE_p_std__listT_std__string_t.getCPtr(sourceIds), state);
  }

  public boolean FileRequest(SWIGTYPE_p_std__string fname, SWIGTYPE_p_std__string hash, java.math.BigInteger size, SWIGTYPE_p_std__string dest, SWIGTYPE_p_t_RsFlags32T_0x4228af_t flags, SWIGTYPE_p_std__listT_std__string_t sourceIds) {
    return RetroshareJNI.ftController_FileRequest__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(fname), SWIGTYPE_p_std__string.getCPtr(hash), size, SWIGTYPE_p_std__string.getCPtr(dest), SWIGTYPE_p_t_RsFlags32T_0x4228af_t.getCPtr(flags), SWIGTYPE_p_std__listT_std__string_t.getCPtr(sourceIds));
  }

  public boolean alreadyHaveFile(SWIGTYPE_p_std__string hash, FileInfo info) {
    return RetroshareJNI.ftController_alreadyHaveFile(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), FileInfo.getCPtr(info), info);
  }

  public boolean setChunkStrategy(SWIGTYPE_p_std__string hash, FileChunksInfo.ChunkStrategy s) {
    return RetroshareJNI.ftController_setChunkStrategy(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), s.swigValue());
  }

  public void setDefaultChunkStrategy(FileChunksInfo.ChunkStrategy s) {
    RetroshareJNI.ftController_setDefaultChunkStrategy(swigCPtr, this, s.swigValue());
  }

  public FileChunksInfo.ChunkStrategy defaultChunkStrategy() {
    return FileChunksInfo.ChunkStrategy.swigToEnum(RetroshareJNI.ftController_defaultChunkStrategy(swigCPtr, this));
  }

  public long freeDiskSpaceLimit() {
    return RetroshareJNI.ftController_freeDiskSpaceLimit(swigCPtr, this);
  }

  public void setFreeDiskSpaceLimit(long size_in_mb) {
    RetroshareJNI.ftController_setFreeDiskSpaceLimit(swigCPtr, this, size_in_mb);
  }

  public boolean FileCancel(SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftController_FileCancel(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean FileControl(SWIGTYPE_p_std__string hash, long flags) {
    return RetroshareJNI.ftController_FileControl(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), flags);
  }

  public boolean FileClearCompleted() {
    return RetroshareJNI.ftController_FileClearCompleted(swigCPtr, this);
  }

  public boolean FlagFileComplete(SWIGTYPE_p_std__string hash) {
    return RetroshareJNI.ftController_FlagFileComplete(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public boolean getFileDownloadChunksDetails(SWIGTYPE_p_std__string hash, FileChunksInfo info) {
    return RetroshareJNI.ftController_getFileDownloadChunksDetails(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), FileChunksInfo.getCPtr(info), info);
  }

  public boolean setDestinationName(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__string dest_name) {
    return RetroshareJNI.ftController_setDestinationName(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__string.getCPtr(dest_name));
  }

  public boolean setDestinationDirectory(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__string dest_name) {
    return RetroshareJNI.ftController_setDestinationDirectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__string.getCPtr(dest_name));
  }

  public boolean getPriority(SWIGTYPE_p_std__string hash, SWIGTYPE_p_DwlSpeed p) {
    return RetroshareJNI.ftController_getPriority(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_DwlSpeed.getCPtr(p));
  }

  public void setPriority(SWIGTYPE_p_std__string hash, DwlSpeed p) {
    RetroshareJNI.ftController_setPriority(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), p.swigValue());
  }

  public void moveInQueue(SWIGTYPE_p_std__string hash, QueueMove mv) {
    RetroshareJNI.ftController_moveInQueue(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), mv.swigValue());
  }

  public void clearQueue() {
    RetroshareJNI.ftController_clearQueue(swigCPtr, this);
  }

  public void setQueueSize(long size) {
    RetroshareJNI.ftController_setQueueSize(swigCPtr, this, size);
  }

  public long getQueueSize() {
    return RetroshareJNI.ftController_getQueueSize(swigCPtr, this);
  }

  public void setMinPrioritizedTransfers(long size) {
    RetroshareJNI.ftController_setMinPrioritizedTransfers(swigCPtr, this, size);
  }

  public long getMinPrioritizedTransfers() {
    return RetroshareJNI.ftController_getMinPrioritizedTransfers(swigCPtr, this);
  }

  public boolean FileDownloads(SWIGTYPE_p_std__listT_std__string_t hashs) {
    return RetroshareJNI.ftController_FileDownloads(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(hashs));
  }

  public boolean setDownloadDirectory(SWIGTYPE_p_std__string path) {
    return RetroshareJNI.ftController_setDownloadDirectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(path));
  }

  public boolean setPartialsDirectory(SWIGTYPE_p_std__string path) {
    return RetroshareJNI.ftController_setPartialsDirectory(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(path));
  }

  public SWIGTYPE_p_std__string getDownloadDirectory() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftController_getDownloadDirectory(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string getPartialsDirectory() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftController_getPartialsDirectory(swigCPtr, this), true);
  }

  public boolean FileDetails(SWIGTYPE_p_std__string hash, FileInfo info) {
    return RetroshareJNI.ftController_FileDetails(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), FileInfo.getCPtr(info), info);
  }

  public boolean moveFile(SWIGTYPE_p_std__string source, SWIGTYPE_p_std__string dest) {
    return RetroshareJNI.ftController_moveFile(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(source), SWIGTYPE_p_std__string.getCPtr(dest));
  }

  public boolean copyFile(SWIGTYPE_p_std__string source, SWIGTYPE_p_std__string dest) {
    return RetroshareJNI.ftController_copyFile(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(source), SWIGTYPE_p_std__string.getCPtr(dest));
  }

  public boolean assumeAvailability(SWIGTYPE_p_std__string peer_id) {
    return RetroshareJNI.ftController_assumeAvailability(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public void statusChange(SWIGTYPE_p_std__listT_pqipeer_t plist) {
    RetroshareJNI.ftController_statusChange(swigCPtr, this, SWIGTYPE_p_std__listT_pqipeer_t.getCPtr(plist));
  }

  public void addFileSource(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__string peer_id) {
    RetroshareJNI.ftController_addFileSource(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

  public void removeFileSource(SWIGTYPE_p_std__string hash, SWIGTYPE_p_std__string peer_id) {
    RetroshareJNI.ftController_removeFileSource(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_std__string.getCPtr(peer_id));
  }

}
