/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RsAES {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RsAES(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RsAES obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_RsAES(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static boolean aes_crypt_8_16(SWIGTYPE_p_unsigned_char input_data, long input_data_length, SWIGTYPE_p_unsigned_char key, SWIGTYPE_p_unsigned_char salt, SWIGTYPE_p_unsigned_char output_data, SWIGTYPE_p_unsigned_int output_data_length) {
    return RetroshareJNI.RsAES_aes_crypt_8_16(SWIGTYPE_p_unsigned_char.getCPtr(input_data), input_data_length, SWIGTYPE_p_unsigned_char.getCPtr(key), SWIGTYPE_p_unsigned_char.getCPtr(salt), SWIGTYPE_p_unsigned_char.getCPtr(output_data), SWIGTYPE_p_unsigned_int.getCPtr(output_data_length));
  }

  public static boolean aes_decrypt_8_16(SWIGTYPE_p_unsigned_char input_data, long input_data_length, SWIGTYPE_p_unsigned_char key, SWIGTYPE_p_unsigned_char salt, SWIGTYPE_p_unsigned_char output_data, SWIGTYPE_p_unsigned_int output_data_length) {
    return RetroshareJNI.RsAES_aes_decrypt_8_16(SWIGTYPE_p_unsigned_char.getCPtr(input_data), input_data_length, SWIGTYPE_p_unsigned_char.getCPtr(key), SWIGTYPE_p_unsigned_char.getCPtr(salt), SWIGTYPE_p_unsigned_char.getCPtr(output_data), SWIGTYPE_p_unsigned_int.getCPtr(output_data_length));
  }

  public static long get_buffer_size(long size) {
    return RetroshareJNI.RsAES_get_buffer_size(size);
  }

  public RsAES() {
    this(RetroshareJNI.new_RsAES(), true);
  }

}
