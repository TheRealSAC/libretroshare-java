/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class GxsSecurity {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected GxsSecurity(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GxsSecurity obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_GxsSecurity(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public GxsSecurity() {
    this(RetroshareJNI.new_GxsSecurity(), true);
  }

  public static SWIGTYPE_p_RSA extractPublicKey(RsTlvSecurityKey key) {
    long cPtr = RetroshareJNI.GxsSecurity_extractPublicKey(RsTlvSecurityKey.getCPtr(key), key);
    return (cPtr == 0) ? null : new SWIGTYPE_p_RSA(cPtr, false);
  }

  public static SWIGTYPE_p_RSA extractPrivateKey(RsTlvSecurityKey key) {
    long cPtr = RetroshareJNI.GxsSecurity_extractPrivateKey(RsTlvSecurityKey.getCPtr(key), key);
    return (cPtr == 0) ? null : new SWIGTYPE_p_RSA(cPtr, false);
  }

  public static void setRSAPublicKey(RsTlvSecurityKey key, SWIGTYPE_p_RSA rsa_pub) {
    RetroshareJNI.GxsSecurity_setRSAPublicKey(RsTlvSecurityKey.getCPtr(key), key, SWIGTYPE_p_RSA.getCPtr(rsa_pub));
  }

  public static void setRSAPrivateKey(RsTlvSecurityKey key, SWIGTYPE_p_RSA rsa_priv) {
    RetroshareJNI.GxsSecurity_setRSAPrivateKey(RsTlvSecurityKey.getCPtr(key), key, SWIGTYPE_p_RSA.getCPtr(rsa_priv));
  }

  public static SWIGTYPE_p_std__string getRsaKeySign(SWIGTYPE_p_RSA pubkey) {
    return new SWIGTYPE_p_std__string(RetroshareJNI.GxsSecurity_getRsaKeySign(SWIGTYPE_p_RSA.getCPtr(pubkey)), true);
  }

  public static SWIGTYPE_p_std__string getBinDataSign(SWIGTYPE_p_void data, int len) {
    return new SWIGTYPE_p_std__string(RetroshareJNI.GxsSecurity_getBinDataSign(SWIGTYPE_p_void.getCPtr(data), len), true);
  }

  public static boolean encrypt(SWIGTYPE_p_p_void out, SWIGTYPE_p_int outlen, SWIGTYPE_p_void in, int inlen, SWIGTYPE_p_EVP_PKEY privateKey) {
    return RetroshareJNI.GxsSecurity_encrypt(SWIGTYPE_p_p_void.getCPtr(out), SWIGTYPE_p_int.getCPtr(outlen), SWIGTYPE_p_void.getCPtr(in), inlen, SWIGTYPE_p_EVP_PKEY.getCPtr(privateKey));
  }

  public static boolean decrypt(SWIGTYPE_p_p_void out, SWIGTYPE_p_int outlen, SWIGTYPE_p_void in, int inlen, SWIGTYPE_p_EVP_PKEY privateKey) {
    return RetroshareJNI.GxsSecurity_decrypt(SWIGTYPE_p_p_void.getCPtr(out), SWIGTYPE_p_int.getCPtr(outlen), SWIGTYPE_p_void.getCPtr(in), inlen, SWIGTYPE_p_EVP_PKEY.getCPtr(privateKey));
  }

  public static boolean validateNxsGrp(RsNxsGrp grp, RsTlvKeySignature sign, RsTlvSecurityKey key) {
    return RetroshareJNI.GxsSecurity_validateNxsGrp(RsNxsGrp.getCPtr(grp), grp, RsTlvKeySignature.getCPtr(sign), sign, RsTlvSecurityKey.getCPtr(key), key);
  }

  public static boolean validateNxsMsg(RsNxsMsg msg, RsTlvKeySignature sign, RsTlvSecurityKey key) {
    return RetroshareJNI.GxsSecurity_validateNxsMsg(RsNxsMsg.getCPtr(msg), msg, RsTlvKeySignature.getCPtr(sign), sign, RsTlvSecurityKey.getCPtr(key), key);
  }

  public static boolean getSignature(String data, long data_len, RsTlvSecurityKey privKey, RsTlvKeySignature sign) {
    return RetroshareJNI.GxsSecurity_getSignature(data, data_len, RsTlvSecurityKey.getCPtr(privKey), privKey, RsTlvKeySignature.getCPtr(sign), sign);
  }

}
