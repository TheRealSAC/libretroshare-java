/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RsCertificate {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected RsCertificate(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RsCertificate obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_RsCertificate(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RsCertificate(SWIGTYPE_p_std__string input_string) {
    this(RetroshareJNI.new_RsCertificate__SWIG_0(SWIGTYPE_p_std__string.getCPtr(input_string)), true);
  }

  public RsCertificate(RsPeerDetails details, SWIGTYPE_p_unsigned_char gpg_mem_block, long gpg_mem_block_size) {
    this(RetroshareJNI.new_RsCertificate__SWIG_1(RsPeerDetails.getCPtr(details), details, SWIGTYPE_p_unsigned_char.getCPtr(gpg_mem_block), gpg_mem_block_size), true);
  }

  public SWIGTYPE_p_std__string toStdString_oldFormat() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_toStdString_oldFormat(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string toStdString() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_toStdString(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string ext_ip_string() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_ext_ip_string(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string loc_ip_string() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_loc_ip_string(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string location_name_string() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_location_name_string(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string dns_string() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_dns_string(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string sslid_string() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_sslid_string(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__string armouredPGPKey() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsCertificate_armouredPGPKey(swigCPtr, this), true);
  }

  public int ext_port_us() {
    return RetroshareJNI.RsCertificate_ext_port_us(swigCPtr, this);
  }

  public int loc_port_us() {
    return RetroshareJNI.RsCertificate_loc_port_us(swigCPtr, this);
  }

  public SWIGTYPE_p_unsigned_char pgp_key() {
    long cPtr = RetroshareJNI.RsCertificate_pgp_key(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public long pgp_key_size() {
    return RetroshareJNI.RsCertificate_pgp_key_size(swigCPtr, this);
  }

  public static boolean cleanCertificate(SWIGTYPE_p_std__string input, SWIGTYPE_p_std__string output, SWIGTYPE_p_RsCertificate__Format format, SWIGTYPE_p_int error_code) {
    return RetroshareJNI.RsCertificate_cleanCertificate(SWIGTYPE_p_std__string.getCPtr(input), SWIGTYPE_p_std__string.getCPtr(output), SWIGTYPE_p_RsCertificate__Format.getCPtr(format), SWIGTYPE_p_int.getCPtr(error_code));
  }

  public final static class Format {
    public final static Format RS_CERTIFICATE_OLD_FORMAT = new Format("RS_CERTIFICATE_OLD_FORMAT");
    public final static Format RS_CERTIFICATE_RADIX = new Format("RS_CERTIFICATE_RADIX");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Format swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Format.class + " with value " + swigValue);
    }

    private Format(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Format(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Format(String swigName, Format swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Format[] swigValues = { RS_CERTIFICATE_OLD_FORMAT, RS_CERTIFICATE_RADIX };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
