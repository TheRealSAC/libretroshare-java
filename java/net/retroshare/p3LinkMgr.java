/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class p3LinkMgr extends pqiConnectCb {
  private long swigCPtr;

  protected p3LinkMgr(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.p3LinkMgr_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(p3LinkMgr obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_p3LinkMgr(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SWIGTYPE_p_std__string getOwnId() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.p3LinkMgr_getOwnId(swigCPtr, this), true);
  }

  public boolean isOnline(SWIGTYPE_p_std__string ssl_id) {
    return RetroshareJNI.p3LinkMgr_isOnline(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ssl_id));
  }

  public void getOnlineList(SWIGTYPE_p_std__listT_std__string_t ssl_peers) {
    RetroshareJNI.p3LinkMgr_getOnlineList(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(ssl_peers));
  }

  public boolean getPeerName(SWIGTYPE_p_std__string ssl_id, SWIGTYPE_p_std__string name) {
    return RetroshareJNI.p3LinkMgr_getPeerName(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ssl_id), SWIGTYPE_p_std__string.getCPtr(name));
  }

  public long getLinkType(SWIGTYPE_p_std__string ssl_id) {
    return RetroshareJNI.p3LinkMgr_getLinkType(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ssl_id));
  }

  public void addMonitor(pqiMonitor mon) {
    RetroshareJNI.p3LinkMgr_addMonitor(swigCPtr, this, pqiMonitor.getCPtr(mon), mon);
  }

  public void removeMonitor(pqiMonitor mon) {
    RetroshareJNI.p3LinkMgr_removeMonitor(swigCPtr, this, pqiMonitor.getCPtr(mon), mon);
  }

  public boolean connectAttempt(SWIGTYPE_p_std__string id, SWIGTYPE_p_sockaddr_in raddr, SWIGTYPE_p_sockaddr_in proxyaddr, SWIGTYPE_p_sockaddr_in srcaddr, SWIGTYPE_p_unsigned_int delay, SWIGTYPE_p_unsigned_int period, SWIGTYPE_p_unsigned_int type, SWIGTYPE_p_unsigned_int flags, SWIGTYPE_p_unsigned_int bandwidth) {
    return RetroshareJNI.p3LinkMgr_connectAttempt(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), SWIGTYPE_p_sockaddr_in.getCPtr(raddr), SWIGTYPE_p_sockaddr_in.getCPtr(proxyaddr), SWIGTYPE_p_sockaddr_in.getCPtr(srcaddr), SWIGTYPE_p_unsigned_int.getCPtr(delay), SWIGTYPE_p_unsigned_int.getCPtr(period), SWIGTYPE_p_unsigned_int.getCPtr(type), SWIGTYPE_p_unsigned_int.getCPtr(flags), SWIGTYPE_p_unsigned_int.getCPtr(bandwidth));
  }

  public boolean connectResult(SWIGTYPE_p_std__string id, boolean success, long flags, SWIGTYPE_p_sockaddr_in remote_peer_address) {
    return RetroshareJNI.p3LinkMgr_connectResult(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), success, flags, SWIGTYPE_p_sockaddr_in.getCPtr(remote_peer_address));
  }

  public boolean retryConnect(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.p3LinkMgr_retryConnect(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public void notifyDeniedConnection(SWIGTYPE_p_std__string gpgid, SWIGTYPE_p_std__string sslid, SWIGTYPE_p_std__string sslcn, SWIGTYPE_p_sockaddr_in addr, boolean incoming) {
    RetroshareJNI.p3LinkMgr_notifyDeniedConnection(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(gpgid), SWIGTYPE_p_std__string.getCPtr(sslid), SWIGTYPE_p_std__string.getCPtr(sslcn), SWIGTYPE_p_sockaddr_in.getCPtr(addr), incoming);
  }

  public boolean setLocalAddress(SWIGTYPE_p_sockaddr_in addr) {
    return RetroshareJNI.p3LinkMgr_setLocalAddress(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(addr));
  }

  public SWIGTYPE_p_sockaddr_in getLocalAddress() {
    return new SWIGTYPE_p_sockaddr_in(RetroshareJNI.p3LinkMgr_getLocalAddress(swigCPtr, this), true);
  }

  public void getFriendList(SWIGTYPE_p_std__listT_std__string_t ssl_peers) {
    RetroshareJNI.p3LinkMgr_getFriendList(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(ssl_peers));
  }

  public boolean getFriendNetStatus(SWIGTYPE_p_std__string id, peerConnectState state) {
    return RetroshareJNI.p3LinkMgr_getFriendNetStatus(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), peerConnectState.getCPtr(state), state);
  }

  public void setTunnelConnection(boolean b) {
    RetroshareJNI.p3LinkMgr_setTunnelConnection(swigCPtr, this, b);
  }

  public boolean getTunnelConnection() {
    return RetroshareJNI.p3LinkMgr_getTunnelConnection(swigCPtr, this);
  }

  public int addFriend(SWIGTYPE_p_std__string ssl_id, boolean isVisible) {
    return RetroshareJNI.p3LinkMgr_addFriend(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ssl_id), isVisible);
  }

}
