/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class p3BitDht extends p3Config {
  private long swigCPtr;

  protected p3BitDht(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.p3BitDht_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(p3BitDht obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_p3BitDht(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public p3BitDht(SWIGTYPE_p_std__string id, pqiConnectCb cb, p3NetMgr nm, UdpStack udpstack, SWIGTYPE_p_std__string bootstrapfile) {
    this(RetroshareJNI.new_p3BitDht(SWIGTYPE_p_std__string.getCPtr(id), pqiConnectCb.getCPtr(cb), cb, p3NetMgr.getCPtr(nm), nm, UdpStack.getCPtr(udpstack), udpstack, SWIGTYPE_p_std__string.getCPtr(bootstrapfile)), true);
  }

  public long getNetState(long type) {
    return RetroshareJNI.p3BitDht_getNetState(swigCPtr, this, type);
  }

  public int getDhtPeers(int lvl, SWIGTYPE_p_std__listT_RsDhtPeer_t peers) {
    return RetroshareJNI.p3BitDht_getDhtPeers(swigCPtr, this, lvl, SWIGTYPE_p_std__listT_RsDhtPeer_t.getCPtr(peers));
  }

  public int getNetPeerList(SWIGTYPE_p_std__listT_std__string_t peerIds) {
    return RetroshareJNI.p3BitDht_getNetPeerList(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(peerIds));
  }

  public int getNetPeerStatus(SWIGTYPE_p_std__string peerId, RsDhtNetPeer status) {
    return RetroshareJNI.p3BitDht_getNetPeerStatus(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), RsDhtNetPeer.getCPtr(status), status);
  }

  public int getRelayEnds(SWIGTYPE_p_std__listT_RsDhtRelayEnd_t relayEnds) {
    return RetroshareJNI.p3BitDht_getRelayEnds(swigCPtr, this, SWIGTYPE_p_std__listT_RsDhtRelayEnd_t.getCPtr(relayEnds));
  }

  public int getRelayProxies(SWIGTYPE_p_std__listT_RsDhtRelayProxy_t relayProxies) {
    return RetroshareJNI.p3BitDht_getRelayProxies(swigCPtr, this, SWIGTYPE_p_std__listT_RsDhtRelayProxy_t.getCPtr(relayProxies));
  }

  public SWIGTYPE_p_std__string getUdpAddressString() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.p3BitDht_getUdpAddressString(swigCPtr, this), true);
  }

  public void getDhtRates(SWIGTYPE_p_float read, SWIGTYPE_p_float write) {
    RetroshareJNI.p3BitDht_getDhtRates(swigCPtr, this, SWIGTYPE_p_float.getCPtr(read), SWIGTYPE_p_float.getCPtr(write));
  }

  public void getRelayRates(SWIGTYPE_p_float read, SWIGTYPE_p_float write, SWIGTYPE_p_float relay) {
    RetroshareJNI.p3BitDht_getRelayRates(swigCPtr, this, SWIGTYPE_p_float.getCPtr(read), SWIGTYPE_p_float.getCPtr(write), SWIGTYPE_p_float.getCPtr(relay));
  }

  public boolean getOwnDhtId(SWIGTYPE_p_std__string ownDhtId) {
    return RetroshareJNI.p3BitDht_getOwnDhtId(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ownDhtId));
  }

  public void setupConnectBits(UdpStunner dhtStunner, UdpStunner proxyStunner, UdpRelayReceiver relay) {
    RetroshareJNI.p3BitDht_setupConnectBits(swigCPtr, this, UdpStunner.getCPtr(dhtStunner), dhtStunner, UdpStunner.getCPtr(proxyStunner), proxyStunner, UdpRelayReceiver.getCPtr(relay), relay);
  }

  public void setupPeerSharer(pqiNetAssistPeerShare sharer) {
    RetroshareJNI.p3BitDht_setupPeerSharer(swigCPtr, this, pqiNetAssistPeerShare.getCPtr(sharer), sharer);
  }

  public void modifyNodesPerBucket(int count) {
    RetroshareJNI.p3BitDht_modifyNodesPerBucket(swigCPtr, this, count);
  }

  public void start() {
    RetroshareJNI.p3BitDht_start(swigCPtr, this);
  }

  public int tick() {
    return RetroshareJNI.p3BitDht_tick(swigCPtr, this);
  }

  public void enable(boolean on) {
    RetroshareJNI.p3BitDht_enable(swigCPtr, this, on);
  }

  public void shutdown() {
    RetroshareJNI.p3BitDht_shutdown(swigCPtr, this);
  }

  public void restart() {
    RetroshareJNI.p3BitDht_restart(swigCPtr, this);
  }

  public boolean getEnabled() {
    return RetroshareJNI.p3BitDht_getEnabled(swigCPtr, this);
  }

  public boolean getActive() {
    return RetroshareJNI.p3BitDht_getActive(swigCPtr, this);
  }

  public boolean getNetworkStats(SWIGTYPE_p_unsigned_int netsize, SWIGTYPE_p_unsigned_int localnetsize) {
    return RetroshareJNI.p3BitDht_getNetworkStats(swigCPtr, this, SWIGTYPE_p_unsigned_int.getCPtr(netsize), SWIGTYPE_p_unsigned_int.getCPtr(localnetsize));
  }

  public boolean findPeer(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.p3BitDht_findPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public boolean dropPeer(SWIGTYPE_p_std__string id) {
    return RetroshareJNI.p3BitDht_dropPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id));
  }

  public int addBadPeer(SWIGTYPE_p_sockaddr_in addr, long reason, long flags, long age) {
    return RetroshareJNI.p3BitDht_addBadPeer(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(addr), reason, flags, age);
  }

  public int addKnownPeer(SWIGTYPE_p_std__string pid, SWIGTYPE_p_sockaddr_in addr, long flags) {
    return RetroshareJNI.p3BitDht_addKnownPeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), SWIGTYPE_p_sockaddr_in.getCPtr(addr), flags);
  }

  public void ConnectionFeedback(SWIGTYPE_p_std__string pid, int state) {
    RetroshareJNI.p3BitDht_ConnectionFeedback(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), state);
  }

  public boolean getPeerStatus(SWIGTYPE_p_std__string id, SWIGTYPE_p_sockaddr_in laddr, SWIGTYPE_p_sockaddr_in raddr, SWIGTYPE_p_unsigned_int type, SWIGTYPE_p_unsigned_int mode) {
    return RetroshareJNI.p3BitDht_getPeerStatus(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(id), SWIGTYPE_p_sockaddr_in.getCPtr(laddr), SWIGTYPE_p_sockaddr_in.getCPtr(raddr), SWIGTYPE_p_unsigned_int.getCPtr(type), SWIGTYPE_p_unsigned_int.getCPtr(mode));
  }

  public boolean getExternalInterface(SWIGTYPE_p_sockaddr_in raddr, SWIGTYPE_p_unsigned_int mode) {
    return RetroshareJNI.p3BitDht_getExternalInterface(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr), SWIGTYPE_p_unsigned_int.getCPtr(mode));
  }

  public boolean setAttachMode(boolean on) {
    return RetroshareJNI.p3BitDht_setAttachMode(swigCPtr, this, on);
  }

  public int NodeCallback(SWIGTYPE_p_bdId id, long peerflags) {
    return RetroshareJNI.p3BitDht_NodeCallback(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), peerflags);
  }

  public int PeerCallback(SWIGTYPE_p_bdId id, long status) {
    return RetroshareJNI.p3BitDht_PeerCallback(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), status);
  }

  public int ValueCallback(SWIGTYPE_p_bdNodeId id, SWIGTYPE_p_std__string key, long status) {
    return RetroshareJNI.p3BitDht_ValueCallback(swigCPtr, this, SWIGTYPE_p_bdNodeId.getCPtr(id), SWIGTYPE_p_std__string.getCPtr(key), status);
  }

  public int ConnectCallback(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId proxyId, SWIGTYPE_p_bdId destId, long mode, long point, long param, long cbtype, long errcode) {
    return RetroshareJNI.p3BitDht_ConnectCallback(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(proxyId), SWIGTYPE_p_bdId.getCPtr(destId), mode, point, param, cbtype, errcode);
  }

  public int InfoCallback(SWIGTYPE_p_bdId id, long type, long flags, SWIGTYPE_p_std__string info) {
    return RetroshareJNI.p3BitDht_InfoCallback(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), type, flags, SWIGTYPE_p_std__string.getCPtr(info));
  }

  public int OnlinePeerCallback_locked(SWIGTYPE_p_bdId id, long status, DhtPeerDetails dpd) {
    return RetroshareJNI.p3BitDht_OnlinePeerCallback_locked(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), status, DhtPeerDetails.getCPtr(dpd), dpd);
  }

  public int UnreachablePeerCallback_locked(SWIGTYPE_p_bdId id, long status, DhtPeerDetails dpd) {
    return RetroshareJNI.p3BitDht_UnreachablePeerCallback_locked(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), status, DhtPeerDetails.getCPtr(dpd), dpd);
  }

  public int minuteTick() {
    return RetroshareJNI.p3BitDht_minuteTick(swigCPtr, this);
  }

  public int doActions() {
    return RetroshareJNI.p3BitDht_doActions(swigCPtr, this);
  }

  public int checkProxyAllowed(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId destId, int mode, SWIGTYPE_p_unsigned_int bandwidth) {
    return RetroshareJNI.p3BitDht_checkProxyAllowed(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(destId), mode, SWIGTYPE_p_unsigned_int.getCPtr(bandwidth));
  }

  public int checkConnectionAllowed(SWIGTYPE_p_bdId peerId, int mode) {
    return RetroshareJNI.p3BitDht_checkConnectionAllowed(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(peerId), mode);
  }

  public void initiateConnection(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId proxyId, SWIGTYPE_p_bdId destId, long mode, long loc, long delayOrBandwidth) {
    RetroshareJNI.p3BitDht_initiateConnection(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(proxyId), SWIGTYPE_p_bdId.getCPtr(destId), mode, loc, delayOrBandwidth);
  }

  public int installRelayConnection(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId destId, SWIGTYPE_p_unsigned_int bandwidth) {
    return RetroshareJNI.p3BitDht_installRelayConnection(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(destId), SWIGTYPE_p_unsigned_int.getCPtr(bandwidth));
  }

  public int removeRelayConnection(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId destId) {
    return RetroshareJNI.p3BitDht_removeRelayConnection(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(destId));
  }

  public void monitorConnections() {
    RetroshareJNI.p3BitDht_monitorConnections(swigCPtr, this);
  }

  public void ConnectCallout(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_sockaddr_in addr, long connectMode) {
    RetroshareJNI.p3BitDht_ConnectCallout(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_sockaddr_in.getCPtr(addr), connectMode);
  }

  public void ConnectCalloutTCPAttempt(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_sockaddr_in addr) {
    RetroshareJNI.p3BitDht_ConnectCalloutTCPAttempt(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_sockaddr_in.getCPtr(addr));
  }

  public void ConnectCalloutDirectOrProxy(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_sockaddr_in raddr, long connectFlags, long delay) {
    RetroshareJNI.p3BitDht_ConnectCalloutDirectOrProxy(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_sockaddr_in.getCPtr(raddr), connectFlags, delay);
  }

  public void ConnectCalloutRelay(SWIGTYPE_p_std__string peerId, SWIGTYPE_p_sockaddr_in srcaddr, SWIGTYPE_p_sockaddr_in proxyaddr, SWIGTYPE_p_sockaddr_in destaddr, long connectMode, long bandwidth) {
    RetroshareJNI.p3BitDht_ConnectCalloutRelay(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peerId), SWIGTYPE_p_sockaddr_in.getCPtr(srcaddr), SWIGTYPE_p_sockaddr_in.getCPtr(proxyaddr), SWIGTYPE_p_sockaddr_in.getCPtr(destaddr), connectMode, bandwidth);
  }

  public void Feedback_Connected(SWIGTYPE_p_std__string pid) {
    RetroshareJNI.p3BitDht_Feedback_Connected(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid));
  }

  public void Feedback_ConnectionFailed(SWIGTYPE_p_std__string pid) {
    RetroshareJNI.p3BitDht_Feedback_ConnectionFailed(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid));
  }

  public void Feedback_ConnectionClosed(SWIGTYPE_p_std__string pid) {
    RetroshareJNI.p3BitDht_Feedback_ConnectionClosed(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid));
  }

  public void UdpConnectionFailed_locked(DhtPeerDetails dpd) {
    RetroshareJNI.p3BitDht_UdpConnectionFailed_locked(swigCPtr, this, DhtPeerDetails.getCPtr(dpd), dpd);
  }

  public void ReleaseProxyExclusiveMode_locked(DhtPeerDetails dpd, boolean addrChgLikely) {
    RetroshareJNI.p3BitDht_ReleaseProxyExclusiveMode_locked(swigCPtr, this, DhtPeerDetails.getCPtr(dpd), dpd, addrChgLikely);
  }

  public void installRelayHandler(p3BitDhtRelayHandler arg0) {
    RetroshareJNI.p3BitDht_installRelayHandler(swigCPtr, this, p3BitDhtRelayHandler.getCPtr(arg0), arg0);
  }

  public UdpRelayReceiver getRelayReceiver() {
    long cPtr = RetroshareJNI.p3BitDht_getRelayReceiver(swigCPtr, this);
    return (cPtr == 0) ? null : new UdpRelayReceiver(cPtr, false);
  }

  public int RelayHandler_InstallRelayConnection(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId destId, long mode, SWIGTYPE_p_unsigned_int bandwidth) {
    return RetroshareJNI.p3BitDht_RelayHandler_InstallRelayConnection(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(destId), mode, SWIGTYPE_p_unsigned_int.getCPtr(bandwidth));
  }

  public int RelayHandler_LogFailedProxyAttempt(SWIGTYPE_p_bdId srcId, SWIGTYPE_p_bdId destId, long mode, long errcode) {
    return RetroshareJNI.p3BitDht_RelayHandler_LogFailedProxyAttempt(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(srcId), SWIGTYPE_p_bdId.getCPtr(destId), mode, errcode);
  }

  public int getRelayServerList(SWIGTYPE_p_std__listT_std__string_t ids) {
    return RetroshareJNI.p3BitDht_getRelayServerList(swigCPtr, this, SWIGTYPE_p_std__listT_std__string_t.getCPtr(ids));
  }

  public int addRelayServer(SWIGTYPE_p_std__string ids) {
    return RetroshareJNI.p3BitDht_addRelayServer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ids));
  }

  public int removeRelayServer(SWIGTYPE_p_std__string ids) {
    return RetroshareJNI.p3BitDht_removeRelayServer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(ids));
  }

  public long getRelayMode() {
    return RetroshareJNI.p3BitDht_getRelayMode(swigCPtr, this);
  }

  public int setRelayMode(long mode) {
    return RetroshareJNI.p3BitDht_setRelayMode(swigCPtr, this, mode);
  }

  public int getRelayAllowance(int classIdx, SWIGTYPE_p_unsigned_int count, SWIGTYPE_p_unsigned_int bandwidth) {
    return RetroshareJNI.p3BitDht_getRelayAllowance(swigCPtr, this, classIdx, SWIGTYPE_p_unsigned_int.getCPtr(count), SWIGTYPE_p_unsigned_int.getCPtr(bandwidth));
  }

  public int setRelayAllowance(int classIdx, long count, long bandwidth) {
    return RetroshareJNI.p3BitDht_setRelayAllowance(swigCPtr, this, classIdx, count, bandwidth);
  }

  public int removePeer(SWIGTYPE_p_std__string pid) {
    return RetroshareJNI.p3BitDht_removePeer(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid));
  }

  public int calculateNodeId(SWIGTYPE_p_std__string pid, SWIGTYPE_p_bdNodeId id) {
    return RetroshareJNI.p3BitDht_calculateNodeId(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(pid), SWIGTYPE_p_bdNodeId.getCPtr(id));
  }

  public int addKnownNode(SWIGTYPE_p_bdId id, long flags) {
    return RetroshareJNI.p3BitDht_addKnownNode(swigCPtr, this, SWIGTYPE_p_bdId.getCPtr(id), flags);
  }

}
