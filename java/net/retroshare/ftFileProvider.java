/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class ftFileProvider {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected ftFileProvider(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ftFileProvider obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_ftFileProvider(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ftFileProvider(SWIGTYPE_p_std__string path, java.math.BigInteger size, SWIGTYPE_p_std__string hash) {
    this(RetroshareJNI.new_ftFileProvider(SWIGTYPE_p_std__string.getCPtr(path), size, SWIGTYPE_p_std__string.getCPtr(hash)), true);
  }

  public boolean getFileData(SWIGTYPE_p_std__string peer_id, java.math.BigInteger offset, SWIGTYPE_p_unsigned_int chunk_size, SWIGTYPE_p_void data) {
    return RetroshareJNI.ftFileProvider_getFileData(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), offset, SWIGTYPE_p_unsigned_int.getCPtr(chunk_size), SWIGTYPE_p_void.getCPtr(data));
  }

  public boolean FileDetails(FileInfo info) {
    return RetroshareJNI.ftFileProvider_FileDetails(swigCPtr, this, FileInfo.getCPtr(info), info);
  }

  public SWIGTYPE_p_std__string getHash() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftFileProvider_getHash(swigCPtr, this), true);
  }

  public java.math.BigInteger getFileSize() {
    return RetroshareJNI.ftFileProvider_getFileSize(swigCPtr, this);
  }

  public boolean fileOk() {
    return RetroshareJNI.ftFileProvider_fileOk(swigCPtr, this);
  }

  public void getAvailabilityMap(CompressedChunkMap cmap) {
    RetroshareJNI.ftFileProvider_getAvailabilityMap(swigCPtr, this, CompressedChunkMap.getCPtr(cmap), cmap);
  }

  public void getClientMap(SWIGTYPE_p_std__string peer_id, CompressedChunkMap cmap, SWIGTYPE_p_bool map_is_too_old) {
    RetroshareJNI.ftFileProvider_getClientMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), CompressedChunkMap.getCPtr(cmap), cmap, SWIGTYPE_p_bool.getCPtr(map_is_too_old));
  }

  public void setClientMap(SWIGTYPE_p_std__string peer_id, CompressedChunkMap cmap) {
    RetroshareJNI.ftFileProvider_setClientMap(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(peer_id), CompressedChunkMap.getCPtr(cmap), cmap);
  }

  public boolean purgeOldPeers(SWIGTYPE_p_time_t now, long max_duration) {
    return RetroshareJNI.ftFileProvider_purgeOldPeers(swigCPtr, this, SWIGTYPE_p_time_t.getCPtr(now), max_duration);
  }

  public SWIGTYPE_p_std__string fileHash() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftFileProvider_fileHash(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__string fileName() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.ftFileProvider_fileName(swigCPtr, this), false);
  }

  public java.math.BigInteger fileSize() {
    return RetroshareJNI.ftFileProvider_fileSize(swigCPtr, this);
  }

}
