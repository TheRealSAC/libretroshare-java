/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class RsPluginManager extends RsPluginHandler {
  private long swigCPtr;

  protected RsPluginManager(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.RsPluginManager_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RsPluginManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_RsPluginManager(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public RsPluginManager(SWIGTYPE_p_std__string current_executable_sha1_hash) {
    this(RetroshareJNI.new_RsPluginManager(SWIGTYPE_p_std__string.getCPtr(current_executable_sha1_hash)), true);
  }

  public int nbPlugins() {
    return RetroshareJNI.RsPluginManager_nbPlugins(swigCPtr, this);
  }

  public RsPlugin plugin(int i) {
    long cPtr = RetroshareJNI.RsPluginManager_plugin(swigCPtr, this, i);
    return (cPtr == 0) ? null : new RsPlugin(cPtr, false);
  }

  public SWIGTYPE_p_std__vectorT_std__string_t getPluginDirectories() {
    return new SWIGTYPE_p_std__vectorT_std__string_t(RetroshareJNI.RsPluginManager_getPluginDirectories(swigCPtr, this), false);
  }

  public void getPluginStatus(int i, SWIGTYPE_p_unsigned_int status, SWIGTYPE_p_std__string file_name, SWIGTYPE_p_std__string hash, SWIGTYPE_p_unsigned_int svn_revision, SWIGTYPE_p_std__string error_string) {
    RetroshareJNI.RsPluginManager_getPluginStatus(swigCPtr, this, i, SWIGTYPE_p_unsigned_int.getCPtr(status), SWIGTYPE_p_std__string.getCPtr(file_name), SWIGTYPE_p_std__string.getCPtr(hash), SWIGTYPE_p_unsigned_int.getCPtr(svn_revision), SWIGTYPE_p_std__string.getCPtr(error_string));
  }

  public void enablePlugin(SWIGTYPE_p_std__string hash) {
    RetroshareJNI.RsPluginManager_enablePlugin(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public void disablePlugin(SWIGTYPE_p_std__string hash) {
    RetroshareJNI.RsPluginManager_disablePlugin(swigCPtr, this, SWIGTYPE_p_std__string.getCPtr(hash));
  }

  public void slowTickPlugins(SWIGTYPE_p_time_t sec) {
    RetroshareJNI.RsPluginManager_slowTickPlugins(swigCPtr, this, SWIGTYPE_p_time_t.getCPtr(sec));
  }

  public SWIGTYPE_p_std__string getLocalCacheDir() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsPluginManager_getLocalCacheDir(swigCPtr, this), false);
  }

  public SWIGTYPE_p_std__string getRemoteCacheDir() {
    return new SWIGTYPE_p_std__string(RetroshareJNI.RsPluginManager_getRemoteCacheDir(swigCPtr, this), false);
  }

  public ftServer getFileServer() {
    long cPtr = RetroshareJNI.RsPluginManager_getFileServer(swigCPtr, this);
    return (cPtr == 0) ? null : new ftServer(cPtr, false);
  }

  public p3LinkMgr getLinkMgr() {
    long cPtr = RetroshareJNI.RsPluginManager_getLinkMgr(swigCPtr, this);
    return (cPtr == 0) ? null : new p3LinkMgr(cPtr, false);
  }

  public void allowAllPlugins(boolean b) {
    RetroshareJNI.RsPluginManager_allowAllPlugins(swigCPtr, this, b);
  }

  public boolean getAllowAllPlugins() {
    return RetroshareJNI.RsPluginManager_getAllowAllPlugins(swigCPtr, this);
  }

  public boolean saveList(SWIGTYPE_p_bool cleanup, SWIGTYPE_p_std__listT_RsItem_p_t list) {
    return RetroshareJNI.RsPluginManager_saveList(swigCPtr, this, SWIGTYPE_p_bool.getCPtr(cleanup), SWIGTYPE_p_std__listT_RsItem_p_t.getCPtr(list));
  }

  public boolean loadList(SWIGTYPE_p_std__listT_RsItem_p_t list) {
    return RetroshareJNI.RsPluginManager_loadList(swigCPtr, this, SWIGTYPE_p_std__listT_RsItem_p_t.getCPtr(list));
  }

  public RsSerialiser setupSerialiser() {
    long cPtr = RetroshareJNI.RsPluginManager_setupSerialiser(swigCPtr, this);
    return (cPtr == 0) ? null : new RsSerialiser(cPtr, false);
  }

  public void addConfigurations(p3ConfigMgr cfgMgr) {
    RetroshareJNI.RsPluginManager_addConfigurations(swigCPtr, this, p3ConfigMgr.getCPtr(cfgMgr), cfgMgr);
  }

  public void loadConfiguration() {
    RetroshareJNI.RsPluginManager_loadConfiguration(swigCPtr, this);
  }

  public void setInterfaces(RsPlugInInterfaces interfaces) {
    RetroshareJNI.RsPluginManager_setInterfaces(swigCPtr, this, RsPlugInInterfaces.getCPtr(interfaces), interfaces);
  }

  public static boolean acceptablePluginName(SWIGTYPE_p_std__string s) {
    return RetroshareJNI.RsPluginManager_acceptablePluginName(SWIGTYPE_p_std__string.getCPtr(s));
  }

  public static void setCacheDirectories(SWIGTYPE_p_std__string local, SWIGTYPE_p_std__string remote) {
    RetroshareJNI.RsPluginManager_setCacheDirectories(SWIGTYPE_p_std__string.getCPtr(local), SWIGTYPE_p_std__string.getCPtr(remote));
  }

  public static void setFileServer(ftServer ft) {
    RetroshareJNI.RsPluginManager_setFileServer(ftServer.getCPtr(ft), ft);
  }

  public static void setLinkMgr(p3LinkMgr cm) {
    RetroshareJNI.RsPluginManager_setLinkMgr(p3LinkMgr.getCPtr(cm), cm);
  }

  public void loadPlugins(SWIGTYPE_p_std__vectorT_std__string_t plugin_directories) {
    RetroshareJNI.RsPluginManager_loadPlugins__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(plugin_directories));
  }

  public void loadPlugins(SWIGTYPE_p_std__vectorT_RsPlugin_p_t explicit_plugin_entries) {
    RetroshareJNI.RsPluginManager_loadPlugins__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__vectorT_RsPlugin_p_t.getCPtr(explicit_plugin_entries));
  }

  public void stopPlugins() {
    RetroshareJNI.RsPluginManager_stopPlugins(swigCPtr, this);
  }

  public void registerCacheServices() {
    RetroshareJNI.RsPluginManager_registerCacheServices(swigCPtr, this);
  }

  public void registerClientServices(p3ServiceServer pqih) {
    RetroshareJNI.RsPluginManager_registerClientServices(swigCPtr, this, p3ServiceServer.getCPtr(pqih), pqih);
  }

}
