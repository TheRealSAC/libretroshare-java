/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class TcpStream extends UdpPeer {
  private long swigCPtr;

  protected TcpStream(long cPtr, boolean cMemoryOwn) {
    super(RetroshareJNI.TcpStream_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TcpStream obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_TcpStream(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public TcpStream(SWIGTYPE_p_UdpSubReceiver udp) {
    this(RetroshareJNI.new_TcpStream(SWIGTYPE_p_UdpSubReceiver.getCPtr(udp)), true);
  }

  public int status(SWIGTYPE_p_std__ostream out) {
    return RetroshareJNI.TcpStream_status(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

  public int connect(SWIGTYPE_p_sockaddr_in raddr, long conn_period) {
    return RetroshareJNI.TcpStream_connect(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr), conn_period);
  }

  public int listenfor(SWIGTYPE_p_sockaddr_in raddr) {
    return RetroshareJNI.TcpStream_listenfor(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr));
  }

  public boolean isConnected() {
    return RetroshareJNI.TcpStream_isConnected(swigCPtr, this);
  }

  public boolean getRemoteAddress(SWIGTYPE_p_sockaddr_in raddr) {
    return RetroshareJNI.TcpStream_getRemoteAddress(swigCPtr, this, SWIGTYPE_p_sockaddr_in.getCPtr(raddr));
  }

  public short TcpState() {
    return RetroshareJNI.TcpStream_TcpState(swigCPtr, this);
  }

  public int TcpErrorState() {
    return RetroshareJNI.TcpStream_TcpErrorState(swigCPtr, this);
  }

  public int write(String dta, int size) {
    return RetroshareJNI.TcpStream_write(swigCPtr, this, dta, size);
  }

  public int read(String dta, int size) {
    return RetroshareJNI.TcpStream_read(swigCPtr, this, dta, size);
  }

  public int write_allowed() {
    return RetroshareJNI.TcpStream_write_allowed(swigCPtr, this);
  }

  public int read_pending() {
    return RetroshareJNI.TcpStream_read_pending(swigCPtr, this);
  }

  public int closeWrite() {
    return RetroshareJNI.TcpStream_closeWrite(swigCPtr, this);
  }

  public int close() {
    return RetroshareJNI.TcpStream_close(swigCPtr, this);
  }

  public int tick() {
    return RetroshareJNI.TcpStream_tick(swigCPtr, this);
  }

  public void recvPkt(SWIGTYPE_p_void data, int size) {
    RetroshareJNI.TcpStream_recvPkt(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data), size);
  }

  public boolean widle() {
    return RetroshareJNI.TcpStream_widle(swigCPtr, this);
  }

  public boolean ridle() {
    return RetroshareJNI.TcpStream_ridle(swigCPtr, this);
  }

  public long wbytes() {
    return RetroshareJNI.TcpStream_wbytes(swigCPtr, this);
  }

  public long rbytes() {
    return RetroshareJNI.TcpStream_rbytes(swigCPtr, this);
  }

  public int dumpstate(SWIGTYPE_p_std__ostream out) {
    return RetroshareJNI.TcpStream_dumpstate(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(out));
  }

}
