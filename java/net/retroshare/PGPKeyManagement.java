/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class PGPKeyManagement {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected PGPKeyManagement(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PGPKeyManagement obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_PGPKeyManagement(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static boolean createMinimalKey(SWIGTYPE_p_std__string pgp_certificate, SWIGTYPE_p_std__string cleaned_certificate) {
    return RetroshareJNI.PGPKeyManagement_createMinimalKey(SWIGTYPE_p_std__string.getCPtr(pgp_certificate), SWIGTYPE_p_std__string.getCPtr(cleaned_certificate));
  }

  public static void findLengthOfMinimalKey(SWIGTYPE_p_unsigned_char keydata, long key_len, SWIGTYPE_p_size_t minimal_key_len) {
    RetroshareJNI.PGPKeyManagement_findLengthOfMinimalKey(SWIGTYPE_p_unsigned_char.getCPtr(keydata), key_len, SWIGTYPE_p_size_t.getCPtr(minimal_key_len));
  }

  public static SWIGTYPE_p_std__string makeArmouredKey(SWIGTYPE_p_unsigned_char keydata, long key_size, SWIGTYPE_p_std__string version_string) {
    return new SWIGTYPE_p_std__string(RetroshareJNI.PGPKeyManagement_makeArmouredKey(SWIGTYPE_p_unsigned_char.getCPtr(keydata), key_size, SWIGTYPE_p_std__string.getCPtr(version_string)), true);
  }

  public static long compute24bitsCRC(SWIGTYPE_p_unsigned_char data, long len) {
    return RetroshareJNI.PGPKeyManagement_compute24bitsCRC(SWIGTYPE_p_unsigned_char.getCPtr(data), len);
  }

  public PGPKeyManagement() {
    this(RetroshareJNI.new_PGPKeyManagement(), true);
  }

}
