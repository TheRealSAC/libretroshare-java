/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.retroshare;

public class CompressedChunkMap {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected CompressedChunkMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CompressedChunkMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RetroshareJNI.delete_CompressedChunkMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public CompressedChunkMap() {
    this(RetroshareJNI.new_CompressedChunkMap__SWIG_0(), true);
  }

  public CompressedChunkMap(SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t uncompressed_data) {
    this(RetroshareJNI.new_CompressedChunkMap__SWIG_1(SWIGTYPE_p_std__vectorT_FileChunksInfo__ChunkState_t.getCPtr(uncompressed_data)), true);
  }

  public CompressedChunkMap(long nb_chunks, long value) {
    this(RetroshareJNI.new_CompressedChunkMap__SWIG_2(nb_chunks, value), true);
  }

  public static long getCompressedSize(long size) {
    return RetroshareJNI.CompressedChunkMap_getCompressedSize(size);
  }

  public long filledChunks(long nbchks) {
    return RetroshareJNI.CompressedChunkMap_filledChunks(swigCPtr, this, nbchks);
  }

  public java.math.BigInteger computeProgress(java.math.BigInteger total_size, long chunk_size) {
    return RetroshareJNI.CompressedChunkMap_computeProgress(swigCPtr, this, total_size, chunk_size);
  }

  public void set(long j) {
    RetroshareJNI.CompressedChunkMap_set(swigCPtr, this, j);
  }

  public void reset(long j) {
    RetroshareJNI.CompressedChunkMap_reset(swigCPtr, this, j);
  }

  public void set_map(SWIGTYPE_p_std__vectorT_unsigned_int_t value) {
    RetroshareJNI.CompressedChunkMap__map_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_int_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_unsigned_int_t get_map() {
    return new SWIGTYPE_p_std__vectorT_unsigned_int_t(RetroshareJNI.CompressedChunkMap__map_get(swigCPtr, this), true);
  }

}
